var _STRINGS = {
    Ad: {
        Mobile: {
            Preroll: {
                ReadyIn: "The game is ready in ",
                Loading: "Your game is loading...",
                Close: "Close"
            },
            Header: {
                ReadyIn: "The game is ready in ",
                Loading: "Your game is loading...",
                Close: "Close"
            },
            End: {
                ReadyIn: "Advertisement ends in ",
                Loading: "Please wait ...",
                Close: "Close"
            }
        }
    },
    Splash: {
        Loading: "LOADING",
        LogoLine1: "Some text here",
        LogoLine2: "powered by MarketJS",
        LogoLine3: "none"
    },
    Game: {
        SelectPlayer: "Select Player",
        Win: "You win!",
        Lose: "You lose!",
        Score: "Score",
        Time: "Time",
        Round: "ROUND"
    },
    Results: {
        Title: "High score"
    }
}  
, _SPRITESHEETS_DATA = {
    GUI: {
        path: "media/graphics/sprites/button.png",
        texture: {
            "win-set-W": {
                x: 239,
                y: 44,
                w: 78,
                h: 78
            },
            "win-set-I": {
                x: 318,
                y: 44,
                w: 32,
                h: 78
            },
            "win-set-N": {
                x: 350,
                y: 44,
                w: 62,
                h: 78
            },
            "win-set-!": {
                x: 413,
                y: 44,
                w: 30,
                h: 78
            },
            "lose-set-L": {
                x: 224,
                y: 122,
                w: 54,
                h: 78
            },
            "lose-set-O": {
                x: 278,
                y: 122,
                w: 57,
                h: 78
            },
            "lose-set-S": {
                x: 335,
                y: 122,
                w: 59,
                h: 78
            },
            "lose-set-E": {
                x: 395,
                y: 122,
                w: 54,
                h: 78
            },
            "fight-set-F": {
                x: 5,
                y: 216,
                w: 42,
                h: 52
            },
            "fight-set-I": {
                x: 48,
                y: 216,
                w: 28,
                h: 52
            },
            "fight-set-G": {
                x: 78,
                y: 216,
                w: 47,
                h: 52
            },
            "fight-set-H": {
                x: 125,
                y: 216,
                w: 44,
                h: 52
            },
            "fight-set-T": {
                x: 170,
                y: 216,
                w: 47,
                h: 52
            },
            "fight-set-!": {
                x: 217,
                y: 216,
                w: 20,
                h: 52
            },
            "number-set-0": {
                x: 0,
                y: 1,
                w: 35,
                h: 44
            },
            "number-set-1": {
                x: 37,
                y: 1,
                w: 24,
                h: 44
            },
            "number-set-2": {
                x: 61,
                y: 1,
                w: 35,
                h: 44
            },
            "number-set-3": {
                x: 99,
                y: 1,
                w: 34,
                h: 44
            },
            "number-set-4": {
                x: 137,
                y: 1,
                w: 34,
                h: 44
            },
            "number-set-5": {
                x: 172,
                y: 1,
                w: 31,
                h: 44
            },
            "number-set-6": {
                x: 206,
                y: 1,
                w: 36,
                h: 44
            },
            "number-set-7": {
                x: 243,
                y: 1,
                w: 34,
                h: 44
            },
            "number-set-8": {
                x: 277,
                y: 1,
                w: 35,
                h: 44
            },
            "number-set-9": {
                x: 312,
                y: 1,
                w: 36,
                h: 44
            },
            "number-set-,": {
                x: 348,
                y: 1,
                w: 14,
                h: 16
            },
            powerup: {
                x: 360,
                y: 228,
                w: 86,
                h: 86
            },
            "left-tap": {
                x: 457,
                y: 4,
                w: 76,
                h: 76
            },
            hold: {
                x: 457,
                y: 85,
                w: 76,
                h: 76
            },
            "right-tap": {
                x: 457,
                y: 167,
                w: 76,
                h: 76
            },
            timer: {
                x: 0,
                y: 269,
                w: 310,
                h: 17
            },
            hp01: {
                x: 121,
                y: 294,
                w: 121,
                h: 8
            },
            hp02: {
                x: 121,
                y: 286,
                w: 121,
                h: 8
            },
            hp03: {
                x: 0,
                y: 294,
                w: 121,
                h: 8
            },
            hp04: {
                x: 0,
                y: 286,
                w: 121,
                h: 8
            },
            "timer-number-9": {
                x: 325,
                y: 229,
                w: 5,
                h: 7
            },
            "timer-number-8": {
                x: 316,
                y: 229,
                w: 5,
                h: 7
            },
            "timer-number-7": {
                x: 307,
                y: 229,
                w: 5,
                h: 7
            },
            "timer-number-6": {
                x: 298,
                y: 229,
                w: 5,
                h: 7
            },
            "timer-number-5": {
                x: 289,
                y: 229,
                w: 5,
                h: 7
            },
            "timer-number-4": {
                x: 280,
                y: 229,
                w: 5,
                h: 7
            },
            "timer-number-3": {
                x: 271,
                y: 229,
                w: 5,
                h: 7
            },
            "timer-number-2": {
                x: 262,
                y: 229,
                w: 5,
                h: 7
            },
            "timer-number-1": {
                x: 253,
                y: 229,
                w: 5,
                h: 7
            },
            "timer-number-0": {
                x: 244,
                y: 229,
                w: 5,
                h: 7
            },
            "next-button": {
                x: 2,
                y: 49,
                w: 214,
                h: 47
            },
            "start-button": {
                x: 2,
                y: 100,
                w: 182,
                h: 47
            },
            "sfx-button-on": {
                x: 2,
                y: 315,
                w: 214,
                h: 47
            },
            "bgm-button-off": {
                x: 242,
                y: 315,
                w: 214,
                h: 47
            },
            "sfx-button-off": {
                x: 2,
                y: 365,
                w: 214,
                h: 47
            },
            "bgm-button-on": {
                x: 242,
                y: 365,
                w: 214,
                h: 47
            },
            timeout: {
                x: 432,
                y: 4,
                w: 24,
                h: 24
            },
            "main-menu-button": {
                x: 9,
                y: 417,
                w: 137,
                h: 47
            },
            "retry-button": {
                x: 175,
                y: 417,
                w: 137,
                h: 47
            },
            "your-score": {
                x: 236,
                y: 199,
                w: 220,
                h: 27
            }
        }
    }, 
    result: {
        path: "media/graphics/sprites/result.jpg",
        texture: {
            win: {
                x: 0,
                y: 0,
                w: 480,
                h: 395
            },
            lose: {
                x: 0,
                y: 395,
                w: 480,
                h: 395
            }
        }
    },
    btn_more_games: {
        path: "media/graphics/sprites/btn_more_games.png",
        texture: {
            btn_more_games: {
                x: 0,
                y: 0,
                w: 103,
                h: 59
            }
        }
    }
};
var _SETTINGS = {
    API: {
        Enabled: !0,
        Log: {
            Events: {
                InitializeGame: !0,
                EndGame: !0,
                Level: {
                    Begin: !0,
                    End: !0,
                    Win: !0,
                    Lose: !0,
                    Draw: !0
                }
            }
        }
    },
    Ad: {
        Mobile: {
            Preroll: {
                Enabled: !0,
                Duration: 5,
                Width: 300,
                Height: 250,
                Rotation: {
                    Enabled: !1,
                    Weight: {
                        MobileAdInGamePreroll: 40,
                        MobileAdInGamePreroll2: 40,
                        MobileAdInGamePreroll3: 20
                    }
                }
            },
            Header: {
                Enabled: !1,
                Duration: 5,
                Width: 320,
                Height: 50,
                Rotation: {
                    Enabled: !1,
                    Weight: {
                        MobileAdInGameHeader: 40,
                        MobileAdInGameHeader2: 40,
                        MobileAdInGameHeader3: 20
                    }
                }
            },
            Footer: {
                Enabled: !1,
                Duration: 5,
                Width: 320,
                Height: 50,
                Rotation: {
                    Enabled: !1,
                    Weight: {
                        MobileAdInGameFooter: 40,
                        MobileAdInGameFooter2: 40,
                        MobileAdInGameFooter3: 20
                    }
                }
            },
            End: {
                Enabled: !1,
                Duration: 1,
                Width: 300,
                Height: 250,
                Rotation: {
                    Enabled: !1,
                    Weight: {
                        MobileAdInGameEnd: 40,
                        MobileAdInGameEnd2: 40,
                        MobileAdInGameEnd3: 20
                    }
                }
            }
        }
    },
    Language: {
        Default: "en"
    },
    DeveloperBranding: {
        Splash: {
            Enabled: !0
        },
        Logo: {
            Enabled: !0,
            Link: "http://marketjs.com",
            LinkEnabled: !1,
            NewWindow: !0,
            Width: 166,
            Height: 61
        }
    },
    Branding: {
        Splash: {
            Enabled: !1
        },
        Logo: {
            Enabled: !1,
            Link: "http://google.com",
            LinkEnabled: !0,
            NewWindow: !0,
            Width: 280,
            Height: 34
        }
    },
    MoreGames: {
        Enabled: !0,
        Link: "http://www.marketjs.com/game/links/mobile",
        NewWindow: !0
    },
    Gamecenter: {
        Enabled: !0
    }
};
var MobileAdInGamePreroll = {
    ad_duration: _SETTINGS.Ad.Mobile.Preroll.Duration,
    ad_width: _SETTINGS.Ad.Mobile.Preroll.Width,
    ad_height: _SETTINGS.Ad.Mobile.Preroll.Height,
    ready_in: _STRINGS.Ad.Mobile.Preroll.ReadyIn,
    loading: _STRINGS.Ad.Mobile.Preroll.Loading,
    close: _STRINGS.Ad.Mobile.Preroll.Close + "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;",
    Initialize: function() {
        if (_SETTINGS.Ad.Mobile.Preroll.Rotation.Enabled) {
            var b = _SETTINGS.Ad.Mobile.Preroll.Rotation.Weight
              , c = b.MobileAdInGamePreroll
              , d = c + b.MobileAdInGamePreroll2
              , b = d + b.MobileAdInGamePreroll3
              , f = Math.floor(100 * Math.random());
            console.log("seed: ", f);
            f <= c ? this.selectedOverlayName = "MobileAdInGamePreroll" : f <= d ? this.selectedOverlayName = "MobileAdInGamePreroll2" : f <= b && (this.selectedOverlayName = "MobileAdInGamePreroll3");
            console.log("Ad rotating preroll enabled")
        } else
            this.selectedOverlayName = "MobileAdInGamePreroll",
            console.log("Ad rotating preroll disabled");
        console.log("selected:", this.selectedOverlayName);
        this.overlay = $("#" + this.selectedOverlayName);
        this.box = $("#" + this.selectedOverlayName + "-Box");
        this.game = $("#game");
        this.boxContents = {
            footer: $("#" + this.selectedOverlayName + "-Box-Footer"),
            header: $("#" + this.selectedOverlayName + "-Box-Header"),
            close: $("#" + this.selectedOverlayName + "-Box-Close"),
            body: $("#" + this.selectedOverlayName + "-Box-Body")
        };
        this.box.width(this.ad_width);
        this.box.height(this.ad_height);
        this.box.css("left", (this.overlay.width() - this.box.width()) / 2);
        this.box.css("top", (this.overlay.height() - this.box.height() - this.boxContents.header.height() - this.boxContents.footer.height()) / 2);
        this.overlay.show(this.Timer(this.ad_duration))
    },
    Timer: function(b) {
        var c = b
          , d = setInterval(function() {
            MobileAdInGamePreroll.boxContents.header.text(MobileAdInGamePreroll.ready_in + c + "...");
            MobileAdInGamePreroll.boxContents.footer.text(MobileAdInGamePreroll.loading);
            c--;
            0 > c && (clearInterval(d),
            MobileAdInGamePreroll.boxContents.close.css("left", MobileAdInGamePreroll.boxContents.body.width() - 23),
            MobileAdInGamePreroll.boxContents.close.show(),
            MobileAdInGamePreroll.boxContents.header.html(MobileAdInGamePreroll.close),
            MobileAdInGamePreroll.boxContents.footer.text(""))
        }, 1E3)
    },
    Close: function() {
        this.boxContents.close.hide();
        this.overlay.hide()
    }
};
var MobileAdInGameHeader = {
    ad_duration: _SETTINGS.Ad.Mobile.Header.Duration,
    ad_width: _SETTINGS.Ad.Mobile.Header.Width,
    ad_height: _SETTINGS.Ad.Mobile.Header.Height,
    Initialize: function() {
        if (_SETTINGS.Ad.Mobile.Header.Rotation.Enabled) {
            var b = _SETTINGS.Ad.Mobile.Header.Rotation.Weight
              , c = b.MobileAdInGameHeader
              , d = c + b.MobileAdInGameHeader2
              , b = d + b.MobileAdInGameHeader3
              , f = Math.floor(100 * Math.random());
            console.log("seed: ", f);
            f <= c ? 
            		this.selectedOverlayName = "MobileAdInGameHeader" 
            		: f <= d ? 
            				this.selectedOverlayName = "MobileAdInGameHeader2" 
            				: f <= b && (this.selectedOverlayName = "MobileAdInGameHeader3");
            console.log("Ad rotating header enabled")
        } else
            this.selectedOverlayName = "MobileAdInGameHeader",
            console.log("Ad rotating header disabled");
        this.div = $("#" + this.selectedOverlayName);
        this.game = $("#game");
        this.div.width(this.ad_width);
        this.div.height(this.ad_height);
        this.div.css("left", this.game.position().left + (this.game.width() - this.div.width()) / 2);
        this.div.css("top", 0);
        this.div.show(this.Timer(this.ad_duration))
    },
    Timer: function(b) {
        var c = setInterval(function() {
            b--;
            0 > b && (MobileAdInGameHeader.div.hide(),
            clearInterval(c))
        }, 1E3)
    }
};
var MobileAdInGameFooter = {
    ad_duration: _SETTINGS.Ad.Mobile.Footer.Duration,
    ad_width: _SETTINGS.Ad.Mobile.Footer.Width,
    ad_height: _SETTINGS.Ad.Mobile.Footer.Height,
    Initialize: function() {
        if (_SETTINGS.Ad.Mobile.Footer.Rotation.Enabled) {
            var b = _SETTINGS.Ad.Mobile.Footer.Rotation.Weight
              , c = b.MobileAdInGameFooter
              , d = c + b.MobileAdInGameFooter2
              , b = d + b.MobileAdInGameFooter3
              , f = Math.floor(100 * Math.random());
            console.log("seed: ", f);
            f <= c ? this.selectedOverlayName = "MobileAdInGameFooter" : f <= d ? this.selectedOverlayName = "MobileAdInGameFooter2" : f <= b && (this.selectedOverlayName = "MobileAdInGameFooter3");
            console.log("Ad rotating footer enabled")
        } else
            this.selectedOverlayName = "MobileAdInGameFooter",
            console.log("Ad rotating footer disabled");
        this.div = $("#" + this.selectedOverlayName);
        this.game = $("#game");
        this.div.width(this.ad_width);
        this.div.height(this.ad_height);
        this.div.css("left", this.game.position().left + (this.game.width() - this.div.width()) / 2);
        this.div.css("top", this.game.height() - this.div.height() - 5);
        this.div.show(this.Timer(this.ad_duration))
    },
    Timer: function(b) {
        var c = setInterval(function() {
            b--;
            0 > b && (MobileAdInGameFooter.div.hide(),
            clearInterval(c))
        }, 1E3)
    }
};
var MobileAdInGameEnd = {
    ad_duration: _SETTINGS.Ad.Mobile.End.Duration,
    ad_width: _SETTINGS.Ad.Mobile.End.Width,
    ad_height: _SETTINGS.Ad.Mobile.End.Height,
    ready_in: _STRINGS.Ad.Mobile.End.ReadyIn,
    loading: _STRINGS.Ad.Mobile.End.Loading,
    close: _STRINGS.Ad.Mobile.End.Close + "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;",
    Initialize: function() {
        if (_SETTINGS.Ad.Mobile.End.Rotation.Enabled) {
            var b = _SETTINGS.Ad.Mobile.End.Rotation.Weight
              , c = b.MobileAdInGameEnd
              , d = c + b.MobileAdInGameEnd2
              , b = d + b.MobileAdInGameEnd3
              , f = Math.floor(100 * Math.random());
            console.log("seed: ", f);
            f <= c ? this.selectedOverlayName = "MobileAdInGameEnd" : f <= d ? this.selectedOverlayName = "MobileAdInGameEnd2" : f <= b && (this.selectedOverlayName = "MobileAdInGameEnd3");
            console.log("Ad rotating end enabled")
        } else
            this.selectedOverlayName = "MobileAdInGameEnd",
            console.log("Ad rotating end disabled");
        console.log("selected:", this.selectedOverlayName);
        this.overlay = $("#" + this.selectedOverlayName);
        this.box = $("#" + this.selectedOverlayName + "-Box");
        this.game = $("#game");
        this.boxContents = {
            footer: $("#" + this.selectedOverlayName + "-Box-Footer"),
            header: $("#" + this.selectedOverlayName + "-Box-Header"),
            close: $("#" + this.selectedOverlayName + "-Box-Close"),
            body: $("#" + this.selectedOverlayName + "-Box-Body")
        };
        this.box.width(this.ad_width);
        this.box.height(this.ad_height);
        this.box.css("left", (this.overlay.width() - this.box.width()) / 2);
        this.box.css("top", (this.overlay.height() - this.box.height() - this.boxContents.header.height() - this.boxContents.footer.height()) / 2);
        this.overlay.show(this.Timer(this.ad_duration))
    },
    Timer: function(b) {
        var c = b
          , d = setInterval(function() {
            MobileAdInGameEnd.boxContents.header.text(MobileAdInGameEnd.ready_in + c + "...");
            MobileAdInGameEnd.boxContents.footer.text(MobileAdInGameEnd.loading);
            c--;
            0 > c && (clearInterval(d),
            MobileAdInGameEnd.boxContents.close.css("left", MobileAdInGameEnd.boxContents.body.width() - 23),
            MobileAdInGameEnd.boxContents.close.show(),
            MobileAdInGameEnd.boxContents.header.html(MobileAdInGameEnd.close),
            MobileAdInGameEnd.boxContents.footer.text(""))
        }, 1E3)
    },
    Close: function() {
        this.boxContents.close.hide();
        this.overlay.hide()
    }
};

var portraitMode = !0
, mobilePortraitWidth = 480
, mobilePortraitHeight = 640
, mobileLandscapeWidth = 640
, mobileLandscapeHeight = 480
, mobileWidth = portraitMode ? mobilePortraitWidth : mobileLandscapeWidth
, mobileHeight = portraitMode ? mobilePortraitHeight : mobileLandscapeHeight
, desktopWidth = 480
, desktopHeight = 640
, w
, h
, multiplier
, destW
, destH
, dynamicClickableEntityDivs = {}
, coreDivsToResize = ["game", "play", "orientate"]
, advancedDivsToResize = {
    MobileAdInGamePreroll: {
        "box-width": _SETTINGS.Ad.Mobile.Preroll.Width + 2,
        "box-height": _SETTINGS.Ad.Mobile.Preroll.Height + 20
    },
    MobileAdInGameEnd: {
        "box-width": _SETTINGS.Ad.Mobile.End.Width + 2,
        "box-height": _SETTINGS.Ad.Mobile.End.Height + 20
    },
    MobileAdInGamePreroll2: {
        "box-width": _SETTINGS.Ad.Mobile.Preroll.Width + 2,
        "box-height": _SETTINGS.Ad.Mobile.Preroll.Height + 20
    },
    MobileAdInGameEnd2: {
        "box-width": _SETTINGS.Ad.Mobile.End.Width + 2,
        "box-height": _SETTINGS.Ad.Mobile.End.Height + 20
    },
    MobileAdInGamePreroll3: {
        "box-width": _SETTINGS.Ad.Mobile.Preroll.Width + 2,
        "box-height": _SETTINGS.Ad.Mobile.Preroll.Height + 20
    },
    MobileAdInGameEnd3: {
        "box-width": _SETTINGS.Ad.Mobile.End.Width + 2,
        "box-height": _SETTINGS.Ad.Mobile.End.Height + 20
    }
};

function adjustLayers(b) {
    for (i = 0; i < coreDivsToResize.length; i++)
        ig.ua.mobile ? ($("#" + coreDivsToResize[i]).width(w),
        $("#" + coreDivsToResize[i]).height(h)) : ($("#" + coreDivsToResize[i]).width(destW),
        $("#" + coreDivsToResize[i]).height(destH),
        $("#" + coreDivsToResize[i]).css("left", b ? 0 : w / 2 - destW / 2));
    for (key in dynamicClickableEntityDivs)
        try {
            "function" === typeof dynamicClickableEntityDivs[key].updateCSS && dynamicClickableEntityDivs[key].updateCSS()
        } catch (c) {
            console.log(c)
        }
    for (key in advancedDivsToResize)
        try {
            $("#" + key).width(w),
            $("#" + key).height(h),
            $("#" + key + "-Box").css("left", (w - advancedDivsToResize[key]["box-width"]) / 2),
            $("#" + key + "-Box").css("top", (h - advancedDivsToResize[key]["box-height"]) / 2)
        } catch (d) {
            console.log(d)
        }
    $("#ajaxbar").width(w);
    $("#ajaxbar").height(h)
}
function sizeHandler() {
    $("#game") && (w = window.innerWidth,
    h = window.innerHeight,
    ig.ua.mobile ? (multiplier = Math.min(h / mobileHeight, w / mobileWidth),
    destW = mobileWidth * multiplier,
    destH = mobileHeight * multiplier) : (multiplier = Math.min(h / desktopHeight, w / desktopWidth),
    destW = desktopWidth * multiplier,
    destH = desktopHeight * multiplier),
    widthRatio = window.innerWidth / mobileWidth,
    heightRatio = window.innerHeight / mobileHeight,
    adjustLayers(),
    window.scrollTo(0, 1))
}
function orientationHandler() {
    console.log("changing orientation ...");
    ig.ua.mobile && ((portraitMode ? window.innerHeight < window.innerWidth : window.innerHeight > window.innerWidth) ? ($("#orientate").show(),
    $("#game").hide()) : ($("#orientate").hide(),
    $("#game").show()));
    sizeHandler()
}
function fixSamsungHandler() {
    ig.ua.android 
    && !(4.2 > parseFloat(navigator.userAgent.slice(navigator.userAgent.indexOf("Android") + 8, navigator.userAgent.indexOf("Android") + 11))) 
    && (!(0 > navigator.userAgent.indexOf("GT")) && !(0 < navigator.userAgent.indexOf("Chrome")) && !(0 < navigator.userAgent.indexOf("Firefox"))) 
    && (document.addEventListener("touchstart", function(b) {
        b.preventDefault();
        return !1
    }, !1),
    document.addEventListener("touchmove", function(b) {
        b.preventDefault();
        return !1
    }, !1),
    document.addEventListener("touchend", function(b) {
        b.preventDefault();
        return !1
    }, !1))
}
window.addEventListener("resize", function() {
    orientationHandler()
}, !1);
window.addEventListener("orientationchange", function() {
    orientationHandler()
}, !1);
document.ontouchmove = function(b) {
    window.scrollTo(0, 1);
    b.preventDefault()
}
;
function getInternetExplorerVersion() {
    var b = -1;
    "Microsoft Internet Explorer" == navigator.appName && null != /MSIE ([0-9]{1,}[.0-9]{0,})/.exec(navigator.userAgent) && (b = parseFloat(RegExp.$1));
    return b
}
var ie = getInternetExplorerVersion();


ig.module("impact.image")
  .defines(function() {
    ig.Image = ig.Class.extend({
        data: null,
        width: 0,
        height: 0,
        loaded: !1,
        failed: !1,
        loadCallback: null,
        path: "",
        staticInstantiate: function(b) {
            return ig.Image.cache[b] || null
        },
        init: function(b) {
            this.path = b;
            this.load()
        },
        load: function(b) {
            this.loaded ? b && b(this.path, !0) : (!this.loaded && ig.ready ? (this.loadCallback = b || null,
            this.data = new Image,
            this.data.onload = this.onload.bind(this),
            this.data.onerror = this.onerror.bind(this),
            this.data.src = ig.prefix + this.path + ig.nocache) : ig.addResource(this),
            ig.Image.cache[this.path] = this)
        },
        reload: function() {
            this.loaded = !1;
            this.data = new Image;
            this.data.onload = this.onload.bind(this);
            this.data.src = this.path + "?" + Date.now()
        },
        onload: function() {
            this.width = this.data.width;
            this.height = this.data.height;
            this.loaded = !0;
            1 != ig.system.scale && this.resize(ig.system.scale);
            this.loadCallback && this.loadCallback(this.path, !0)
        },
        onerror: function() {
            this.failed = !0;
            this.loadCallback && this.loadCallback(this.path, !1)
        },
        resize: function(b) {
            var c = ig.getImagePixels(this.data, 0, 0, this.width, this.height)
              , d = this.width * b
              , f = this.height * b
              , g = ig.$new("canvas");
            g.width = d;
            g.height = f;
            for (var p = g.getContext("2d"), x = p.getImageData(0, 0, d, f), t = 0; t < f; t++)
                for (var y = 0; y < d; y++) {
                    var A = 4 * (Math.floor(t / b) * this.width + Math.floor(y / b))
                      , B = 4 * (t * d + y);
                    x.data[B] = c.data[A];
                    x.data[B + 1] = c.data[A + 1];
                    x.data[B + 2] = c.data[A + 2];
                    x.data[B + 3] = c.data[A + 3]
                }
            p.putImageData(x, 0, 0);
            this.data = g
        },
        draw: function(b, c, d, f, g, p) {
            if (this.loaded) {
                var x = ig.system.scale;
                g = (g ? g : this.width) * x;
                p = (p ? p : this.height) * x;
                ig.system.context.drawImage(this.data, d ? d * x : 0, f ? f * x : 0, g, p, ig.system.getDrawPos(b), ig.system.getDrawPos(c), g, p);
                ig.Image.drawCount++
            }
        },
        drawTile: function(b, c, d, f, g, p, x) {
            g = g ? g : f;
            if (this.loaded && !(f > this.width || g > this.height)) {
                var t = ig.system.scale
                  , y = Math.floor(f * t)
                  , A = Math.floor(g * t)
                  , B = p ? -1 : 1
                  , l = x ? -1 : 1;
                if (p || x)
                    ig.system.context.save(),
                    ig.system.context.scale(B, l);
                ig.system.context.drawImage(this.data, Math.floor(d * f) % this.width * t, Math.floor(d * f / this.width) * g * t, y, A, ig.system.getDrawPos(b) * B - (p ? y : 0), ig.system.getDrawPos(c) * l - (x ? A : 0), y, A);
                (p || x) && ig.system.context.restore();
                ig.Image.drawCount++
            }
        }
    });
    ig.Image.drawCount = 0;
    ig.Image.cache = {};
    ig.Image.reloadCache = function() {
        for (var b in ig.Image.cache)
            ig.Image.cache[b].reload()
    }});
ig.module("impact.font")
  .requires("impact.image")
  .defines(function() {
    ig.Font = ig.Image.extend({
        widthMap: [],
        indices: [],
        firstChar: 32,
        alpha: 1,
        letterSpacing: 1,
        lineSpacing: 0,
        onload: function(b) {
            this._loadMetrics(this.data);
            this.parent(b)
        },
        widthForString: function(b) {
            if (-1 !== b.indexOf("\n")) {
                b = b.split("\n");
                for (var c = 0, d = 0; d < b.length; d++)
                    c = Math.max(c, this._widthForLine(b[d]));
                return c
            }
            return this._widthForLine(b)
        },
        _widthForLine: function(b) {
            for (var c = 0, d = 0; d < b.length; d++)
                c += this.widthMap[b.charCodeAt(d) - this.firstChar] + this.letterSpacing;
            return c
        },
        heightForString: function(b) {
            return b.split("\n").length * (this.height + this.lineSpacing)
        },
        draw: function(b, c, d, f) {
            "string" != typeof b && (b = b.toString());
            if (-1 !== b.indexOf("\n")) {
                b = b.split("\n");
                for (var g = this.height + this.lineSpacing, p = 0; p < b.length; p++)
                    this.draw(b[p], c, d + p * g, f)
            } else {
                if (f == ig.Font.ALIGN.RIGHT || f == ig.Font.ALIGN.CENTER)
                    p = this._widthForLine(b),
                    c -= f == ig.Font.ALIGN.CENTER ? p / 2 : p;
                1 !== this.alpha && (ig.system.context.globalAlpha = this.alpha);
                for (p = 0; p < b.length; p++)
                    f = b.charCodeAt(p),
                    c += this._drawChar(f - this.firstChar, c, d);
                1 !== this.alpha && (ig.system.context.globalAlpha = 1);
                ig.Image.drawCount += b.length
            }
        },
        _drawChar: function(b, c, d) {
            if (!this.loaded || 0 > b || b >= this.indices.length)
                return 0;
            var f = ig.system.scale
              , g = this.widthMap[b] * f
              , p = (this.height - 2) * f;
            ig.system.context.drawImage(this.data, this.indices[b] * f, 0, g, p, ig.system.getDrawPos(c), ig.system.getDrawPos(d), g, p);
            return this.widthMap[b] + this.letterSpacing
        },
        _loadMetrics: function(b) {
            this.height = b.height - 1;
            this.widthMap = [];
            this.indices = [];
            for (var c = ig.getImagePixels(b, 0, b.height - 1, b.width, 1), d = 0, f = 0, g = 0; g < b.width; g++) {
                var p = 4 * g + 3;
                127 < c.data[p] ? f++ : 128 > c.data[p] && f && (this.widthMap.push(f),
                this.indices.push(g - f),
                d++,
                f = 0)
            }
            this.widthMap.push(f);
            this.indices.push(g - f)
        }
    });
    ig.Font.ALIGN = {
        LEFT: 0,
        RIGHT: 1,
        CENTER: 2
    }});
ig.module("impact.sound")
  .defines(function() {
    ig.SoundManager = ig.Class.extend({
        clips: {},
        volume: 1,
        format: null,
        init: function() {
            if (!ig.Sound.enabled || !window.Audio)
                ig.Sound.enabled = !1;
            else {
                for (var b = new Audio, c = 0; c < ig.Sound.use.length; c++) {
                    var d = ig.Sound.use[c];
                    if (b.canPlayType(d.mime)) {
                        this.format = d;
                        break
                    }
                }
                this.format || (ig.Sound.enabled = !1)
            }
        },
        load: function(b, c, d) {
            var f = ig.prefix + b.replace(/[^\.]+$/, this.format.ext) + ig.nocache;
            if (this.clips[b]) {
                if (c && this.clips[b].length < ig.Sound.channels)
                    for (c = this.clips[b].length; c < ig.Sound.channels; c++) {
                        var g = new Audio(f);
                        g.load();
                        this.clips[b].push(g)
                    }
                return this.clips[b][0]
            }
            var p = new Audio(f);
            d && (p.addEventListener("canplaythrough", function t(c) {
                p.removeEventListener("canplaythrough", t, !1);
                d(b, !0, c)
            }, !1),
            p.addEventListener("error", function(c) {
                d(b, !1, c)
            }, !1));
            p.preload = "auto";
            p.load();
            this.clips[b] = [p];
            if (c)
                for (c = 1; c < ig.Sound.channels; c++)
                    g = new Audio(f),
                    g.load(),
                    this.clips[b].push(g);
            return p
        },
        get: function(b) {
            b = this.clips[b];
            for (var c = 0, d; d = b[c++]; )
                if (d.paused || d.ended)
                    return d.ended && (d.currentTime = 0),
                    d;
            b[0].pause();
            b[0].currentTime = 0;
            return b[0]
        }
    });
    ig.Music = ig.Class.extend({
        tracks: [],
        namedTracks: {},
        currentTrack: null,
        currentIndex: 0,
        random: !1,
        _volume: 1,
        _loop: !1,
        _fadeInterval: 0,
        _fadeTimer: null,
        _endedCallbackBound: null,
        init: function() {
            this._endedCallbackBound = this._endedCallback.bind(this);
            Object.defineProperty ? (Object.defineProperty(this, "volume", {
                get: this.getVolume.bind(this),
                set: this.setVolume.bind(this)
            }),
            Object.defineProperty(this, "loop", {
                get: this.getLooping.bind(this),
                set: this.setLooping.bind(this)
            })) : this.__defineGetter__ && (this.__defineGetter__("volume", this.getVolume.bind(this)),
            this.__defineSetter__("volume", this.setVolume.bind(this)),
            this.__defineGetter__("loop", this.getLooping.bind(this)),
            this.__defineSetter__("loop", this.setLooping.bind(this)))
        },
        add: function(b, c) {
            if (ig.Sound.enabled) {
                var d = ig.soundManager.load(b instanceof ig.Sound ? b.path : b, !1);
                d.loop = this._loop;
                d.volume = this._volume;
                d.addEventListener("ended", this._endedCallbackBound, !1);
                this.tracks.push(d);
                c && (this.namedTracks[c] = d);
                this.currentTrack || (this.currentTrack = d)
            }
        },
        next: function() {
            this.tracks.length && (this.stop(),
            this.currentIndex = this.random ? Math.floor(Math.random() * this.tracks.length) : (this.currentIndex + 1) % this.tracks.length,
            this.currentTrack = this.tracks[this.currentIndex],
            this.play())
        },
        pause: function() {
            this.currentTrack && this.currentTrack.pause()
        },
        stop: function() {
            this.currentTrack && (this.currentTrack.pause(),
            this.currentTrack.currentTime = 0)
        },
        play: function(b) {
            if (b && this.namedTracks[b])
                b = this.namedTracks[b],
                b != this.currentTrack && (this.stop(),
                this.currentTrack = b);
            else if (!this.currentTrack)
                return;
            this.currentTrack.play()
        },
        getLooping: function() {
            return this._loop
        },
        setLooping: function(b) {
            this._loop = b;
            for (var c in this.tracks)
                this.tracks[c].loop = b
        },
        getVolume: function() {
            return this._volume
        },
        setVolume: function(b) {
            this._volume = b.limit(0, 1);
            for (var c in this.tracks)
                this.tracks[c].volume = this._volume
        },
        fadeOut: function(b) {
            this.currentTrack && (clearInterval(this._fadeInterval),
            this.fadeTimer = new ig.Timer(b),
            this._fadeInterval = setInterval(this._fadeStep.bind(this), 50))
        },
        _fadeStep: function() {
            var b = this.fadeTimer.delta().map(-this.fadeTimer.target, 0, 1, 0).limit(0, 1) * this._volume;
            0.01 >= b ? (this.stop(),
            this.currentTrack.volume = this._volume,
            clearInterval(this._fadeInterval)) : this.currentTrack.volume = b
        },
        _endedCallback: function() {
            this._loop ? this.play() : this.next()
        }
    });
    ig.Sound = ig.Class.extend({
        path: "",
        volume: 1,
        currentClip: null,
        multiChannel: !0,
        init: function(b, c) {
            this.path = b;
            this.multiChannel = !1 !== c;
            this.load()
        },
        load: function(b) {
            ig.Sound.enabled ? ig.ready ? ig.soundManager.load(this.path, this.multiChannel, b) : ig.addResource(this) : b && b(this.path, !0)
        },
        play: function() {
            ig.Sound.enabled && (this.currentClip = ig.soundManager.get(this.path),
            this.currentClip.volume = ig.soundManager.volume * this.volume,
            this.currentClip.play())
        },
        stop: function() {
            this.currentClip && (this.currentClip.pause(),
            this.currentClip.currentTime = 0)
        }
    });
    ig.Sound.FORMAT = {
        MP3: {
            ext: "mp3",
            mime: "audio/mpeg"
        },
        M4A: {
            ext: "m4a",
            mime: "audio/mp4; codecs=mp4a"
        },
        OGG: {
            ext: "ogg",
            mime: "audio/ogg; codecs=vorbis"
        },
        WEBM: {
            ext: "webm",
            mime: "audio/webm; codecs=vorbis"
        },
        CAF: {
            ext: "caf",
            mime: "audio/x-caf"
        }
    };
    ig.Sound.use = [ig.Sound.FORMAT.OGG, ig.Sound.FORMAT.MP3];
    ig.Sound.channels = 4;
    ig.Sound.enabled = !0});
ig.module("impact.loader")
  .requires("impact.image", "impact.font", "impact.sound")
  .defines(function() {
    ig.Loader = ig.Class.extend({
        resources: [],
        gameClass: null,
        status: 0,
        done: !1,
        _unloaded: [],
        _drawStatus: 0,
        _intervalId: 0,
        _loadCallbackBound: null,
        init: function(b, c) {
            this.gameClass = b;
            this.resources = c;
            this._loadCallbackBound = this._loadCallback.bind(this);
            for (var d = 0; d < this.resources.length; d++)
                this._unloaded.push(this.resources[d].path)
        },
        load: function() {
            ig.system.clear("#000");
            if (this.resources.length) {
                for (var b = 0; b < this.resources.length; b++)
                    this.loadResource(this.resources[b]);
                this._intervalId = setInterval(function() {
                    "function" === typeof this.update && this.update();
                    "function" === typeof this.draw && this.draw()
                }
                .bind(this), 16)
            } else
                this.end()
        },
        loadResource: function(b) {
            b.load(this._loadCallbackBound)
        },
        end: function() {
            !this.done && !(this._drawStatus && 0.997 > this._drawStatus) && (this.done = !0,
            clearInterval(this._intervalId),
            ig.system.setGame(this.gameClass))
        },
        update: function() {},
        draw: function() {},
        _loadCallback: function(b, c) {
            if (c)
                this._unloaded.erase(b);
            else
                throw "Failed to load resource: " + b;
            this.status = 1 - this._unloaded.length / this.resources.length;
            0 == this._unloaded.length && setTimeout(this.end.bind(this), 1500)
        }
    })});
ig.module("impact.timer")
  .defines(function() {
    ig.Timer = ig.Class.extend({
        target: 0,
        base: 0,
        last: 0,
        pausedAt: 0,
        init: function(b) {
            this.last = this.base = ig.Timer.time;
            this.target = b || 0
        },
        set: function(b) {
            this.target = b || 0;
            this.base = ig.Timer.time;
            this.pausedAt = 0
        },
        reset: function() {
            this.base = ig.Timer.time;
            this.pausedAt = 0
        },
        tick: function() {
            var b = ig.Timer.time - this.last;
            this.last = ig.Timer.time;
            return this.pausedAt ? 0 : b
        },
        delta: function() {
            return (this.pausedAt || ig.Timer.time) - this.base - this.target
        },
        pause: function() {
            this.pausedAt || (this.pausedAt = ig.Timer.time)
        },
        unpause: function() {
            this.pausedAt && (this.base += ig.Timer.time - this.pausedAt,
            this.pausedAt = 0)
        }
    });
    ig.Timer._last = 0;
    ig.Timer.time = Number.MIN_VALUE;
    ig.Timer.timeScale = 1;
    ig.Timer.maxStep = 0.05;
    ig.Timer.step = function() {
        var b = Date.now();
        ig.Timer.time += Math.min((b - ig.Timer._last) / 1E3, ig.Timer.maxStep) * ig.Timer.timeScale;
        ig.Timer._last = b
    }});
ig.module("impact.system")
  .requires("impact.timer", "impact.image")
  .defines(function() {
    ig.System = ig.Class.extend({
        fps: 30,
        width: 320,
        height: 240,
        realWidth: 320,
        realHeight: 240,
        scale: 1,
        tick: 0,
        animationId: 0,
        newGameClass: null,
        running: !1,
        delegate: null,
        clock: null,
        canvas: null,
        context: null,
        init: function(b, c, d, f, g) {
            this.fps = c;
            this.clock = new ig.Timer;
            this.canvas = ig.$(b);
            this.resize(d, f, g);
            this.context = this.canvas.getContext("2d");
            this.getDrawPos = ig.System.drawMode;
            1 != this.scale && (ig.System.scaleMode = ig.System.SCALE.CRISP);
            ig.System.scaleMode(this.canvas, this.context)
        },
        resize: function(b, c, d) {
            this.width = b;
            this.height = c;
            this.scale = d || this.scale;
            this.realWidth = this.width * this.scale;
            this.realHeight = this.height * this.scale;
            this.canvas.width = this.realWidth;
            this.canvas.height = this.realHeight
        },
        setGame: function(b) {
            this.running ? this.newGameClass = b : this.setGameNow(b)
        },
        setGameNow: function(b) {
            ig.game = new b;
            ig.system.setDelegate(ig.game)
        },
        setDelegate: function(b) {
            if ("function" == typeof b.run)
                this.delegate = b,
                this.startRunLoop();
            else
                throw "System.setDelegate: No run() function in object";
        },
        stopRunLoop: function() {
            ig.clearAnimation(this.animationId);
            this.running = !1
        },
        startRunLoop: function() {
            this.stopRunLoop();
            this.animationId = ig.setAnimation(this.run.bind(this), this.canvas);
            this.running = !0
        },
        clear: function(b) {
            this.context.fillStyle = b;
            this.context.fillRect(0, 0, this.realWidth, this.realHeight)
        },
        run: function() {
            ig.Timer.step();
            this.tick = this.clock.tick();
            this.delegate.run();
            ig.input.clearPressed();
            this.newGameClass && (this.setGameNow(this.newGameClass),
            this.newGameClass = null)
        },
        getDrawPos: null
    });
    ig.System.DRAW = {
        AUTHENTIC: function(b) {
            return Math.round(b) * this.scale
        },
        SMOOTH: function(b) {
            return Math.round(b * this.scale)
        },
        SUBPIXEL: function(b) {
            return b * this.scale
        }
    };
    ig.System.drawMode = ig.System.DRAW.SMOOTH;
    ig.System.SCALE = {
        CRISP: function(b, c) {
            ig.setVendorAttribute(c, "imageSmoothingEnabled", !1);
            b.style.imageRendering = "-moz-crisp-edges";
            b.style.imageRendering = "-o-crisp-edges";
            b.style.imageRendering = "-webkit-optimize-contrast";
            b.style.imageRendering = "crisp-edges";
            b.style.msInterpolationMode = "nearest-neighbor"
        },
        SMOOTH: function(b, c) {
            ig.setVendorAttribute(c, "imageSmoothingEnabled", !0);
            b.style.imageRendering = "";
            b.style.msInterpolationMode = ""
        }
    };
    ig.System.scaleMode = ig.System.SCALE.SMOOTH});
ig.module("impact.input")
  .defines(function() {
    ig.KEY = {
        MOUSE1: -1,
        MOUSE2: -3,
        MWHEEL_UP: -4,
        MWHEEL_DOWN: -5,
        BACKSPACE: 8,
        TAB: 9,
        ENTER: 13,
        PAUSE: 19,
        CAPS: 20,
        ESC: 27,
        SPACE: 32,
        PAGE_UP: 33,
        PAGE_DOWN: 34,
        END: 35,
        HOME: 36,
        LEFT_ARROW: 37,
        UP_ARROW: 38,
        RIGHT_ARROW: 39,
        DOWN_ARROW: 40,
        INSERT: 45,
        DELETE: 46,
        _0: 48,
        _1: 49,
        _2: 50,
        _3: 51,
        _4: 52,
        _5: 53,
        _6: 54,
        _7: 55,
        _8: 56,
        _9: 57,
        A: 65,
        B: 66,
        C: 67,
        D: 68,
        E: 69,
        F: 70,
        G: 71,
        H: 72,
        I: 73,
        J: 74,
        K: 75,
        L: 76,
        M: 77,
        N: 78,
        O: 79,
        P: 80,
        Q: 81,
        R: 82,
        S: 83,
        T: 84,
        U: 85,
        V: 86,
        W: 87,
        X: 88,
        Y: 89,
        Z: 90,
        NUMPAD_0: 96,
        NUMPAD_1: 97,
        NUMPAD_2: 98,
        NUMPAD_3: 99,
        NUMPAD_4: 100,
        NUMPAD_5: 101,
        NUMPAD_6: 102,
        NUMPAD_7: 103,
        NUMPAD_8: 104,
        NUMPAD_9: 105,
        MULTIPLY: 106,
        ADD: 107,
        SUBSTRACT: 109,
        DECIMAL: 110,
        DIVIDE: 111,
        F1: 112,
        F2: 113,
        F3: 114,
        F4: 115,
        F5: 116,
        F6: 117,
        F7: 118,
        F8: 119,
        F9: 120,
        F10: 121,
        F11: 122,
        F12: 123,
        SHIFT: 16,
        CTRL: 17,
        ALT: 18,
        PLUS: 187,
        COMMA: 188,
        MINUS: 189,
        PERIOD: 190
    };
    ig.Input = ig.Class.extend({
        bindings: {},
        actions: {},
        presses: {},
        locks: {},
        delayedKeyup: {},
        isUsingMouse: !1,
        isUsingKeyboard: !1,
        isUsingAccelerometer: !1,
        mouse: {
            x: 0,
            y: 0
        },
        accel: {
            x: 0,
            y: 0,
            z: 0
        },
        initMouse: function() {
            if (!this.isUsingMouse) {
                this.isUsingMouse = !0;
                var b = this.mousewheel.bind(this);
                ig.system.canvas.addEventListener("mousewheel", b, !1);
                ig.system.canvas.addEventListener("DOMMouseScroll", b, !1);
                ig.system.canvas.addEventListener("contextmenu", this.contextmenu.bind(this), !1);
                ig.system.canvas.addEventListener("mousedown", this.keydown.bind(this), !1);
                ig.system.canvas.addEventListener("mouseup", this.keyup.bind(this), !1);
                ig.system.canvas.addEventListener("mousemove", this.mousemove.bind(this), !1);
                ig.ua.touchDevice && (ig.system.canvas.addEventListener("touchstart", this.keydown.bind(this), !1),
                ig.system.canvas.addEventListener("touchend", this.keyup.bind(this), !1),
                ig.system.canvas.addEventListener("touchmove", this.mousemove.bind(this), !1),
                ig.system.canvas.addEventListener("MSPointerDown", this.keydown.bind(this), !1),
                ig.system.canvas.addEventListener("MSPointerUp", this.keyup.bind(this), !1),
                ig.system.canvas.addEventListener("MSPointerMove", this.mousemove.bind(this), !1),
                ig.system.canvas.style.msTouchAction = "none")
            }
        },
        initKeyboard: function() {
            this.isUsingKeyboard || (this.isUsingKeyboard = !0,
            window.addEventListener("keydown", this.keydown.bind(this), !1),
            window.addEventListener("keyup", this.keyup.bind(this), !1))
        },
        initAccelerometer: function() {
            this.isUsingAccelerometer || window.addEventListener("devicemotion", this.devicemotion.bind(this), !1)
        },
        mousewheel: function(b) {
            var c = this.bindings[0 < (b.wheelDelta ? b.wheelDelta : -1 * b.detail) ? ig.KEY.MWHEEL_UP : ig.KEY.MWHEEL_DOWN];
            c && (this.actions[c] = !0,
            this.presses[c] = !0,
            this.delayedKeyup[c] = !0,
            b.stopPropagation(),
            b.preventDefault())
        },
        mousemove: function(b) {
            var c = parseInt(ig.system.canvas.offsetWidth) || ig.system.realWidth;
            ig.ua.mobile && (c = ig.system.realWidth);
            var c = ig.system.scale * (c / ig.system.realWidth)
              , d = {
                left: 0,
                top: 0
            };
            ig.system.canvas.getBoundingClientRect && (d = ig.system.canvas.getBoundingClientRect());
            b = b.touches ? b.touches[0] : b;
            this.mouse.x = (b.clientX - d.left) / c;
            this.mouse.y = (b.clientY - d.top) / c
        },
        contextmenu: function(b) {
            this.bindings[ig.KEY.MOUSE2] && (b.stopPropagation(),
            b.preventDefault())
        },
        keydown: function(b) {
            var c = b.target.tagName;
            if (!("INPUT" == c || "TEXTAREA" == c))
                if (
                	c = "keydown" == b.type ? 
                			b.keyCode 
                			: 2 == b.button ? 
                				ig.KEY.MOUSE2 
                				: ig.KEY.MOUSE1,
                				  0 > c 
                				  && window.focus(),
                				  ("touchstart" == b.type || "mousedown" == b.type) 
                				  && this.mousemove(b),
                				  c = this.bindings[c]
                )
                    this.actions[c] = !0,
                //MYO should add presses[37] for left
                //MYO should add presses[39] for right
                    this.locks[c] || (this.presses[c] = !0,
                    this.locks[c] = !0),
                    b.stopPropagation(),
                    b.preventDefault()
        },
        keyup: function(b) {
            var c = b.target.tagName;
            if (!("INPUT" == c || "TEXTAREA" == c))
                if (c = this.bindings["keyup" == b.type ? 
                	b.keyCode 
                	: 2 == b.button ? ig.KEY.MOUSE2 : ig.KEY.MOUSE1])
                    this.delayedKeyup[c] = !0,
                    b.stopPropagation(),
                    b.preventDefault()
        },
        devicemotion: function(b) {
            this.accel = b.accelerationIncludingGravity
        },
        bind: function(b, c) {
            0 > b ? this.initMouse() : 0 < b && this.initKeyboard();
            this.bindings[b] = c
        },
        bindTouch: function(b, c) {
            var d = ig.$(b)
              , f = this;
            d.addEventListener("touchstart", function(b) {
                f.touchStart(b, c)
            }, !1);
            d.addEventListener("touchend", function(b) {
                f.touchEnd(b, c)
            }, !1);
            d.addEventListener("MSPointerDown", function(b) {
                f.touchStart(b, c)
            }, !1);
            d.addEventListener("MSPointerUp", function(b) {
                f.touchEnd(b, c)
            }, !1)
        },
        unbind: function(b) {
            this.delayedKeyup[this.bindings[b]] = !0;
            this.bindings[b] = null
        },
        unbindAll: function() {
            this.bindings = {};
            this.actions = {};
            this.presses = {};
            this.locks = {};
            this.delayedKeyup = {}
        },
        state: function(b) {
            return this.actions[b]
        },
        pressed: function(b) {
            return this.presses[b]
        },
        released: function(b) {
            return !!this.delayedKeyup[b]
        },
        clearPressed: function() {
            for (var b in this.delayedKeyup)
                this.actions[b] = !1,
                this.locks[b] = !1;
            this.delayedKeyup = {};
            this.presses = {}
        },
        touchStart: function(b, c) {
            this.actions[c] = !0;
            this.presses[c] = !0;
            b.stopPropagation();
            b.preventDefault();
            return !1
        },
        touchEnd: function(b, c) {
            this.delayedKeyup[c] = !0;
            b.stopPropagation();
            b.preventDefault();
            return !1
        }
    })});
ig.module("impact.sound-handler")
  .defines(function() {
    ig.SoundHandler = ig.Class.extend({
        formats: {
            ogg: ".ogg",
            mp3: ".mp3"
        },
        jukebox: null,
        pausePosition: null,
        globalMute: !1,
        forceMuted: !1,
        muted: !1,
        bgmStarted: !1,
        bgmPlaying: !1,
        soundPlaying: !1,
        currentSoundPlaying: null,
        soundBuffer: [],
        voSoundLoaded: [],
        sfxSoundLoaded: [],
        SOUNDID: {},
        voSoundsToLoad: [],
        sfxSoundsToLoad: [{
            name: "staticSound",
            path: "media/audio/play/static"
        }, {
            name: "openingSound",
            path: "media/audio/opening/opening"
        }, {
            name: "kittyopeningSound",
            path: "media/audio/opening/kittyopening"
        }, {
            name: "bellStartSound",
            path: "media/audio/bell-start"
        }, {
            name: "jabSound",
            path: "media/audio/jab"
        }, {
            name: "hookLeftSound",
            path: "media/audio/hook-left"
        }, {
            name: "hookRightSound",
            path: "media/audio/hook-right"
        }, {
            name: "upperCutSound",
            path: "media/audio/upper-cut"
        }, {
            name: "roundOneSound",
            path: "media/audio/round-one"
        }, {
            name: "roundTwoSound",
            path: "media/audio/round-two"
        }, {
            name: "roundThreeSound",
            path: "media/audio/round-three"
        }, {
            name: "fightSound",
            path: "media/audio/fight"
        }, {
            name: "ringSound",
            path: "media/audio/ring"
        }, {
            name: "fallSound",
            path: "media/audio/fall"
        }, {
            name: "cheerSound",
            path: "media/audio/cheer"
        }, {
            name: "buttonSound",
            path: "media/audio/button"
        }, {
            name: "powerUpSound",
            path: "media/audio/power-up"
        }, {
            name: "countOneSound",
            path: "media/audio/count-one"
        }, {
            name: "countTwoSound",
            path: "media/audio/count-two"
        }, {
            name: "countThreeSound",
            path: "media/audio/count-three"
        }, {
            name: "countFourSound",
            path: "media/audio/count-four"
        }, {
            name: "countFiveSound",
            path: "media/audio/count-five"
        }],
        debug: !1,
        init: function() {
            this.initSfx();
            this.setupWindowHandler()
        },
        allVoSoundLoaded: function() {
            if (this.voSoundLoaded.length >= this.voSoundsToLoad.length) {
                this.debug && console.log("Vo ready");
                for (index = 0; index < this.voSoundLoaded.length; index++)
                    this.voSoundLoaded[index].on("end", function(b) {
                        b.isPlaying = !1;
                        this.soundBuffer.pop()
                    }
                    .bind(this, this.voSoundLoaded[index])),
                    this.voSoundLoaded[index].on("play", function(b) {
                        b.isPlaying = !0
                    }
                    .bind(this, this.voSoundLoaded[index]));
                return !0
            }
            return !1
        },
        allSfxSoundLoaded: function() {
            return this.sfxSoundLoaded.length >= this.sfxSoundsToLoad.length ? !0 : !1
        },
        stopBackgroundMusic: function() {
            ig.ua.mobile ? this.pausePosition = this.jukebox.player.pause() : ig.music.pause();
            this.bgmPlaying = !1
        },
        playBackgroundMusic: function() {
            this.bgmPlaying || (this.bgmStarted = !0,
            ig.ua.mobile ? this.pausePosition ? this.jukebox.player.resume(this.pausePosition) : this.jukebox.player.play(this.jukebox.player.settings.spritemap.music.start, !0) : ig.music.play(),
            this._unMuteBackgroundMusic(),
            this.bgmPlaying = !0)
        },
        playSound: function(b) {
            if ((b = this[b]) && (!this.forceMuted || !this.muted) && !b.isPlaying)
                this.soundBuffer.push(b),
                b.play()
        },
        stopAllAndPlaySound: function(b) {
            this.stopAllSounds();
            this.playSound(b)
        },
        stopAllSounds: function() {
            for (index = 0; index < this.soundBuffer.length; index++)
                this.soundBuffer[index].isPlaying = !1,
                this.soundBuffer.splice(0, 1)[0].stop()
        },
        addSound: function(b, c, d) {
            var f = c + this.formats.ogg;
            c += this.formats.mp3;
            this.SOUNDID[b] = b;
            this[b] = d ? new Howl({
                urls: [f, c],
                onload: d
            }) : new Howl({
                urls: [f, c]
            })
        },
        _muteSounds: function() {
            for (i = 0; i < ig.resources.length; i++)
                ig.resources[i].multiChannel && ig.resources[i].stop();
            Howler.mute();
            this.debug && console.log("Sounds muted")
        },
        _unMuteSounds: function() {
            Howler.unmute();
            ig.Sound.enabled = !0;
            this.debug && console.log("Sounds can play")
        },
        _muteBackgroundMusic: function() {
            ig.ua.mobile ? (this.stopBackgroundMusic(),
            this.jukebox.player.setVolume(0)) : ig.music.volume = 0;
            this.debug && console.log("BGM muted");
            this.bgmPlaying = !1
        },
        _unMuteBackgroundMusic: function() {
            this.bgmStarted && (ig.ua.mobile ? (this.pausePosition ? this.jukebox.player.resume(this.pausePosition) : this.jukebox.player.play(this.jukebox.player.settings.spritemap.music.start, !0),
            this.jukebox.player.setVolume(1)) : ig.music.volume = 1,
            this.debug && console.log("BGM can play"),
            this.bgmPlaying = !0)
        },
        focusBlurMute: function() {
            ig && ig.game && ig.game.pauseGame();
            this.forceMuted || this.mute()
        },
        focusBlurUnmute: function() {
            this.forceMuted || this.unmute();
            ig && ig.game && ig.game.resumeGame()
        },
        setForceMuted: function(b) {
            this.forceMuted = b
        },
        mute: function() {
            this.muted || (this._muteSounds(),
            this._muteBackgroundMusic(),
            this.muted = !0)
        },
        unmute: function() {
            this.muted && (this._unMuteSounds(),
            this._unMuteBackgroundMusic(),
            this.muted = !1)
        },
        setupWindowHandler: function() {
            "true" === getQueryVariable("webview") ? ($(window).focus(function() {
                ig.ua.mobile && ig.game && ig.game.resumeGame();
                ig.soundHandler && ig.soundHandler.focusBlurUnmute()
            }),
            $(window).blur(function() {
                ig.soundHandler && ig.soundHandler.focusBlurMute()
            })) : (window.onfocus = function() {
                ig.ua.mobile && ig.game && ig.game.resumeGame();
                ig.soundHandler && ig.soundHandler.focusBlurUnmute()
            }
            ,
            window.onblur = function() {
                ig.soundHandler && ig.soundHandler.focusBlurMute()
            }
            )
        },
        initSfx: function() {
            for (index = 0; index < this.sfxSoundsToLoad.length; index++) {
                var b = function(b) {
                    this.sfxSoundLoaded.push(this[b])
                }
                .bind(this, this.sfxSoundsToLoad[index].name);
                this.addSound(this.sfxSoundsToLoad[index].name, this.sfxSoundsToLoad[index].path, b)
            }
        },
        initVoSfx: function() {
            for (index = 0; index < this.voSoundsToLoad.length; index++) {
                var b = function(b) {
                    this.voSoundLoaded.push(this[b])
                }
                .bind(this, this.voSoundsToLoad[index].name);
                this.addSound(this.voSoundsToLoad[index].name, this.voSoundsToLoad[index].path, b)
            }
        },
        setupDesktopMusic: function() {
            ig.music.add("media/audio/background.*", "background")
        },
        setupJukebox: function() {
            ig.ua.mobile && (this.jukebox = new ig.Jukebox,
            this.pausePosition = this.jukebox.player.settings.spritemap.music.start)
        },
        forceLoopBGM: function() {
            if (ig.ua.winPhone && !this.forceMuted && this.bgmPlaying && this.jukebox && this.jukebox.player && this.jukebox.player.settings.spritemap.music && this.jukebox.player.settings.spritemap.music.loop) {
                if (0 <= this.prevTime)
                    if (this.jukebox.player.getCurrentTime() === this.prevTime) {
                        if (this.silentCounter || (this.silentCounter = 0),
                        this.silentCounter++,
                        this.jukebox.player.getCurrentTime() >= this.jukebox.player.settings.spritemap.music.end || this.silentCounter > 0.0010 * ig.soundHandler.jukebox.player.settings.timeout * ig.system.fps)
                            this.jukebox.player.pause(),
                            this.jukebox.player.play(this.jukebox.player.settings.spritemap.music.start, !0),
                            this.silentCounter = null
                    } else
                        this.silentCounter = null;
                this.prevTime = this.jukebox.player.getCurrentTime()
            }
        }
    })});
ig.module("impact.impact")
  .requires("dom.ready", "impact.loader", "impact.system", "impact.input", "impact.sound", "impact.sound-handler")
  .defines(function() {
    ig.main = function(b, c, d, f, g, p, x) {
        ig.system = new ig.System(b,d,f,g,p || 1);
        ig.input = new ig.Input;
        ig.soundManager = new ig.SoundManager;
        ig.music = new ig.Music;
        ig.ready = !0;
        ig.soundHandler = new ig.SoundHandler;
        (new (x || ig.Loader)(c,ig.resources)).load()
    }});
ig.module("impact.animation")
  .requires("impact.timer", "impact.image")
  .defines(function() {
    ig.AnimationSheet = ig.Class.extend({
        width: 8,
        height: 8,
        image: null,
        init: function(b, c, d) {
            this.width = c;
            this.height = d;
            this.image = new ig.Image(b)
        }
    });
    ig.Animation = ig.Class.extend({
        sheet: null,
        timer: null,
        sequence: [],
        flip: {
            x: !1,
            y: !1
        },
        pivot: {
            x: 0,
            y: 0
        },
        frame: 0,
        tile: 0,
        loopCount: 0,
        alpha: 1,
        angle: 0,
        init: function(b, c, d, f) {
            this.sheet = b;
            this.pivot = {
                x: b.width / 2,
                y: b.height / 2
            };
            this.timer = new ig.Timer;
            this.frameTime = c;
            this.sequence = d;
            this.stop = !!f;
            this.tile = this.sequence[0]
        },
        rewind: function() {
            this.timer.set();
            this.frame = this.loopCount = 0;
            this.tile = this.sequence[0];
            return this
        },
        gotoFrame: function(b) {
            this.timer.set(this.frameTime * -b - 1E-4);
            this.update()
        },
        gotoRandomFrame: function() {
            this.gotoFrame(Math.floor(Math.random() * this.sequence.length))
        },
        update: function() {
            var b = Math.floor(this.timer.delta() / this.frameTime);
            this.loopCount = Math.floor(b / this.sequence.length);
            this.frame = this.stop && 0 < this.loopCount ? this.sequence.length - 1 : b % this.sequence.length;
            this.tile = this.sequence[this.frame]
        },
        draw: function(b, c) {
            var d = Math.max(this.sheet.width, this.sheet.height);
            b > ig.system.width || c > ig.system.height || (0 > b + d || 0 > c + d) || (1 != this.alpha && (ig.system.context.globalAlpha = this.alpha),
            0 == this.angle ? this.sheet.image.drawTile(b, c, this.tile, this.sheet.width, this.sheet.height, this.flip.x, this.flip.y) : (ig.system.context.save(),
            ig.system.context.translate(ig.system.getDrawPos(b + this.pivot.x), ig.system.getDrawPos(c + this.pivot.y)),
            ig.system.context.rotate(this.angle),
            this.sheet.image.drawTile(-this.pivot.x, -this.pivot.y, this.tile, this.sheet.width, this.sheet.height, this.flip.x, this.flip.y),
            ig.system.context.restore()),
            1 != this.alpha && (ig.system.context.globalAlpha = 1))
        }
    })});
ig.module("impact.entity")
  .requires("impact.animation", "impact.impact")
  .defines(function() {
    ig.Entity = ig.Class.extend({
        id: 0,
        settings: {},
        size: {
            x: 16,
            y: 16
        },
        offset: {
            x: 0,
            y: 0
        },
        pos: {
            x: 0,
            y: 0
        },
        last: {
            x: 0,
            y: 0
        },
        vel: {
            x: 0,
            y: 0
        },
        accel: {
            x: 0,
            y: 0
        },
        friction: {
            x: 0,
            y: 0
        },
        maxVel: {
            x: 100,
            y: 100
        },
        zIndex: 0,
        gravityFactor: 1,
        standing: !1,
        bounciness: 0,
        minBounceVelocity: 40,
        anims: {},
        animSheet: null,
        currentAnim: null,
        health: 10,
        type: 0,
        checkAgainst: 0,
        collides: 0,
        _killed: !1,
        slopeStanding: {
            min: (44).toRad(),
            max: (136).toRad()
        },
        init: function(b, c, d) {
            this.id = ++ig.Entity._lastId;
            this.pos.x = this.last.x = b;
            this.pos.y = this.last.y = c;
            ig.merge(this, d)
        },
        reset: function(b, c, d) {
            var f = this.constructor.prototype;
            this.pos.x = b;
            this.pos.y = c;
            this.last.x = b;
            this.last.y = c;
            this.vel.x = f.vel.x;
            this.vel.y = f.vel.y;
            this.accel.x = f.accel.x;
            this.accel.y = f.accel.y;
            this.health = f.health;
            this._killed = f._killed;
            this.standing = f.standing;
            this.type = f.type;
            this.checkAgainst = f.checkAgainst;
            this.collides = f.collides;
            ig.merge(this, d)
        },
        addAnim: function(b, c, d, f) {
            if (!this.animSheet)
                throw "No animSheet to add the animation " + b + " to.";
            c = new ig.Animation(this.animSheet,c,d,f);
            this.anims[b] = c;
            this.currentAnim || (this.currentAnim = c);
            return c
        },
        update: function() {
            this.last.x = this.pos.x;
            this.last.y = this.pos.y;
            this.vel.y += ig.game.gravity * ig.system.tick * this.gravityFactor;
            this.vel.x = this.getNewVelocity(this.vel.x, this.accel.x, this.friction.x, this.maxVel.x);
            this.vel.y = this.getNewVelocity(this.vel.y, this.accel.y, this.friction.y, this.maxVel.y);
            var b = ig.game.collisionMap.trace(this.pos.x, this.pos.y, this.vel.x * ig.system.tick, this.vel.y * ig.system.tick, this.size.x, this.size.y);
            this.handleMovementTrace(b);
            this.currentAnim && this.currentAnim.update()
        },
        getNewVelocity: function(b, c, d, f) {
            return c ? (b + c * ig.system.tick).limit(-f, f) : d ? (c = d * ig.system.tick,
            0 < b - c ? b - c : 0 > b + c ? b + c : 0) : b.limit(-f, f)
        },
        handleMovementTrace: function(b) {
            this.standing = !1;
            b.collision.y && (0 < this.bounciness && Math.abs(this.vel.y) > this.minBounceVelocity ? this.vel.y *= -this.bounciness : (0 < this.vel.y && (this.standing = !0),
            this.vel.y = 0));
            b.collision.x && (this.vel.x = 0 < this.bounciness && Math.abs(this.vel.x) > this.minBounceVelocity ? this.vel.x * -this.bounciness : 0);
            if (b.collision.slope) {
                var c = b.collision.slope;
                if (0 < this.bounciness) {
                    var d = this.vel.x * c.nx + this.vel.y * c.ny;
                    this.vel.x = (this.vel.x - 2 * c.nx * d) * this.bounciness;
                    this.vel.y = (this.vel.y - 2 * c.ny * d) * this.bounciness
                } else
                    d = (this.vel.x * c.x + this.vel.y * c.y) / (c.x * c.x + c.y * c.y),
                    this.vel.x = c.x * d,
                    this.vel.y = c.y * d,
                    c = Math.atan2(c.x, c.y),
                    c > this.slopeStanding.min && c < this.slopeStanding.max && (this.standing = !0)
            }
            this.pos = b.pos
        },
        draw: function() {
            this.currentAnim && this.currentAnim.draw(this.pos.x - this.offset.x - ig.game._rscreen.x, this.pos.y - this.offset.y - ig.game._rscreen.y)
        },
        kill: function() {
            ig.game.removeEntity(this)
        },
        receiveDamage: function(b) {
            this.health -= b;
            0 >= this.health && this.kill()
        },
        touches: function(b) {
            return !(this.pos.x >= b.pos.x + b.size.x || this.pos.x + this.size.x <= b.pos.x || this.pos.y >= b.pos.y + b.size.y || this.pos.y + this.size.y <= b.pos.y)
        },
        distanceTo: function(b) {
            var c = this.pos.x + this.size.x / 2 - (b.pos.x + b.size.x / 2);
            b = this.pos.y + this.size.y / 2 - (b.pos.y + b.size.y / 2);
            return Math.sqrt(c * c + b * b)
        },
        angleTo: function(b) {
            return Math.atan2(b.pos.y + b.size.y / 2 - (this.pos.y + this.size.y / 2), b.pos.x + b.size.x / 2 - (this.pos.x + this.size.x / 2))
        },
        check: function() {},
        collideWith: function() {},
        ready: function() {},
        erase: function() {}
    });
    ig.Entity._lastId = 0;
    ig.Entity.COLLIDES = {
        NEVER: 0,
        LITE: 1,
        PASSIVE: 2,
        ACTIVE: 4,
        FIXED: 8
    };
    ig.Entity.TYPE = {
        NONE: 0,
        A: 1,
        B: 2,
        BOTH: 3
    };
    ig.Entity.checkPair = function(b, c) {
        b.checkAgainst & c.type && b.check(c);
        c.checkAgainst & b.type && c.check(b);
        b.collides && c.collides && b.collides + c.collides > ig.Entity.COLLIDES.ACTIVE && ig.Entity.solveCollision(b, c)
    };
    ig.Entity.solveCollision = function(b, c) {
        var d = null;
        if (b.collides == ig.Entity.COLLIDES.LITE || c.collides == ig.Entity.COLLIDES.FIXED)
            d = b;
        else if (c.collides == ig.Entity.COLLIDES.LITE || b.collides == ig.Entity.COLLIDES.FIXED)
            d = c;
        b.last.x + b.size.x > c.last.x && b.last.x < c.last.x + c.size.x ? (b.last.y < c.last.y ? ig.Entity.seperateOnYAxis(b, c, d) : ig.Entity.seperateOnYAxis(c, b, d),
        b.collideWith(c, "y"),
        c.collideWith(b, "y")) : b.last.y + b.size.y > c.last.y && b.last.y < c.last.y + c.size.y && (b.last.x < c.last.x ? ig.Entity.seperateOnXAxis(b, c, d) : ig.Entity.seperateOnXAxis(c, b, d),
        b.collideWith(c, "x"),
        c.collideWith(b, "x"))
    };
    ig.Entity.seperateOnXAxis = function(b, c, d) {
        var f = b.pos.x + b.size.x - c.pos.x;
        d ? (d.vel.x = -d.vel.x * d.bounciness + (b === d ? c : b).vel.x,
        c = ig.game.collisionMap.trace(d.pos.x, d.pos.y, d == b ? -f : f, 0, d.size.x, d.size.y),
        d.pos.x = c.pos.x) : (d = (b.vel.x - c.vel.x) / 2,
        b.vel.x = -d,
        c.vel.x = d,
        d = ig.game.collisionMap.trace(b.pos.x, b.pos.y, -f / 2, 0, b.size.x, b.size.y),
        b.pos.x = Math.floor(d.pos.x),
        b = ig.game.collisionMap.trace(c.pos.x, c.pos.y, f / 2, 0, c.size.x, c.size.y),
        c.pos.x = Math.ceil(b.pos.x))
    };
    ig.Entity.seperateOnYAxis = function(b, c, d) {
        var f = b.pos.y + b.size.y - c.pos.y;
        if (d) {
            c = b === d ? c : b;
            d.vel.y = -d.vel.y * d.bounciness + c.vel.y;
            var g = 0;
            d == b && Math.abs(d.vel.y - c.vel.y) < d.minBounceVelocity && (d.standing = !0,
            g = c.vel.x * ig.system.tick);
            b = ig.game.collisionMap.trace(d.pos.x, d.pos.y, g, d == b ? -f : f, d.size.x, d.size.y);
            d.pos.y = b.pos.y;
            d.pos.x = b.pos.x
        } else
            ig.game.gravity && (c.standing || 0 < b.vel.y) ? (d = ig.game.collisionMap.trace(b.pos.x, b.pos.y, 0, -(b.pos.y + b.size.y - c.pos.y), b.size.x, b.size.y),
            b.pos.y = d.pos.y,
            0 < b.bounciness && b.vel.y > b.minBounceVelocity ? b.vel.y *= -b.bounciness : (b.standing = !0,
            b.vel.y = 0)) : (d = (b.vel.y - c.vel.y) / 2,
            b.vel.y = -d,
            c.vel.y = d,
            g = c.vel.x * ig.system.tick,
            d = ig.game.collisionMap.trace(b.pos.x, b.pos.y, g, -f / 2, b.size.x, b.size.y),
            b.pos.y = d.pos.y,
            b = ig.game.collisionMap.trace(c.pos.x, c.pos.y, 0, f / 2, c.size.x, c.size.y),
            c.pos.y = b.pos.y)
    }});
ig.module("impact.map")
  .defines(function() {
    ig.Map = ig.Class.extend({
        tilesize: 8,
        width: 1,
        height: 1,
        data: [[]],
        name: null,
        init: function(b, c) {
            this.tilesize = b;
            this.data = c;
            this.height = c.length;
            this.width = c[0].length;
            this.pxWidth = this.width * this.tilesize;
            this.pxHeight = this.height * this.tilesize
        },
        getTile: function(b, c) {
            var d = Math.floor(b / this.tilesize)
              , f = Math.floor(c / this.tilesize);
            return 0 <= d && d < this.width && 0 <= f && f < this.height ? this.data[f][d] : 0
        },
        setTile: function(b, c, d) {
            b = Math.floor(b / this.tilesize);
            c = Math.floor(c / this.tilesize);
            0 <= b && b < this.width && 0 <= c && c < this.height && (this.data[c][b] = d)
        }
    })});
ig.module("impact.collision-map")
  .requires("impact.map")
  .defines(function() {
    ig.CollisionMap = ig.Map.extend({
        lastSlope: 1,
        tiledef: null,
        init: function(b, c, g) {
            this.parent(b, c);
            this.tiledef = g || ig.CollisionMap.defaultTileDef;
            for (var p in this.tiledef)
                p | 0 > this.lastSlope && (this.lastSlope = p | 0)
        },
        trace: function(b, c, g, p, x, t) {
            var y = {
                collision: {
                    x: !1,
                    y: !1,
                    slope: !1
                },
                pos: {
                    x: b,
                    y: c
                },
                tile: {
                    x: 0,
                    y: 0
                }
            }
              , A = Math.ceil(Math.max(Math.abs(g), Math.abs(p)) / this.tilesize);
            if (1 < A)
                for (
                	var B = g / A, l = p / A, s = 0; 
                	s < A && (B || l) && !(this._traceStep(y, b, c, B, l, x, t, g, p, s),
                b = y.pos.x,
                c = y.pos.y,
                y.collision.x && (g = B = 0),
                y.collision.y && (p = l = 0),
                y.collision.slope); s++)
                    ;
            else
                this._traceStep(y, b, c, g, p, x, t, g, p, 0);
            return y
        },
        _traceStep: function(b, c, g, p, x, t, y, A, B, l) {
            b.pos.x += p;
            b.pos.y += x;
            var s = 0;
            if (p) {
                var u = 0 < p ? t : 0
                  , z = 0 > p ? this.tilesize : 0
                  , s = Math.max(Math.floor(g / this.tilesize), 0)
                  , L = Math.min(Math.ceil((g + y) / this.tilesize), this.height);
                p = Math.floor((b.pos.x + u) / this.tilesize);
                var K = Math.floor((c + u) / this.tilesize);
                if (0 < l || p == K || 0 > K || K >= this.width)
                    K = -1;
                if (0 <= p && p < this.width)
                    for (var D = s; D < L && !(-1 != K && (s = this.data[D][K],
                    1 < s && s <= this.lastSlope && this._checkTileDef(b, s, c, g, A, B, t, y, K, D))); D++)
                        if (s = this.data[D][p],
                        1 == s || s > this.lastSlope || 1 < s && this._checkTileDef(b, s, c, g, A, B, t, y, p, D)) {
                            if (1 < s && s <= this.lastSlope && b.collision.slope)
                                break;
                            b.collision.x = !0;
                            b.tile.x = s;
                            c = b.pos.x = p * this.tilesize - u + z;
                            A = 0;
                            break
                        }
            }
            if (x) {
                u = 0 < x ? y : 0;
                x = 0 > x ? this.tilesize : 0;
                s = Math.max(Math.floor(b.pos.x / this.tilesize), 0);
                z = Math.min(Math.ceil((b.pos.x + t) / this.tilesize), this.width);
                D = Math.floor((b.pos.y + u) / this.tilesize);
                L = Math.floor((g + u) / this.tilesize);
                if (0 < l || D == L || 0 > L || L >= this.height)
                    L = -1;
                if (0 <= D && D < this.height)
                    for (p = s; p < z && !(-1 != L && (s = this.data[L][p],
                    1 < s && s <= this.lastSlope && this._checkTileDef(b, s, c, g, A, B, t, y, p, L))); p++)
                        if (s = this.data[D][p],
                        1 == s || s > this.lastSlope || 1 < s && this._checkTileDef(b, s, c, g, A, B, t, y, p, D)) {
                            if (1 < s && s <= this.lastSlope && b.collision.slope)
                                break;
                            b.collision.y = !0;
                            b.tile.y = s;
                            b.pos.y = D * this.tilesize - u + x;
                            break
                        }
            }
        },
        _checkTileDef: function(b, c, g, p, x, t, y, A, B, l) {
            var s = this.tiledef[c];
            if (!s)
                return !1;
            c = (s[2] - s[0]) * this.tilesize;
            var u = (s[3] - s[1]) * this.tilesize
              , z = s[4];
            y = g + x + (0 > u ? y : 0) - (B + s[0]) * this.tilesize;
            A = p + t + (0 < c ? A : 0) - (l + s[1]) * this.tilesize;
            if (0 < c * A - u * y) {
                if (0 > x * -u + t * c)
                    return z;
                B = Math.sqrt(c * c + u * u);
                l = u / B;
                B = -c / B;
                var L = y * l + A * B
                  , s = l * L
                  , L = B * L;
                if (s * s + L * L >= x * x + t * t)
                    return z || 0.5 > c * (A - t) - u * (y - x);
                b.pos.x = g + x - s;
                b.pos.y = p + t - L;
                b.collision.slope = {
                    x: c,
                    y: u,
                    nx: l,
                    ny: B
                };
                return !0
            }
            return !1
        }
    });
    var b = 1 / 3
      , c = 2 / 3;
    ig.CollisionMap.defaultTileDef = {
        5: [0, 1, 1, c, !0],
        6: [0, c, 1, b, !0],
        7: [0, b, 1, 0, !0],
        3: [0, 1, 1, 0.5, !0],
        4: [0, 0.5, 1, 0, !0],
        2: [0, 1, 1, 0, !0],
        10: [0.5, 1, 1, 0, !0],
        21: [0, 1, 0.5, 0, !0],
        32: [c, 1, 1, 0, !0],
        43: [b, 1, c, 0, !0],
        54: [0, 1, b, 0, !0],
        27: [0, 0, 1, b, !0],
        28: [0, b, 1, c, !0],
        29: [0, c, 1, 1, !0],
        25: [0, 0, 1, 0.5, !0],
        26: [0, 0.5, 1, 1, !0],
        24: [0, 0, 1, 1, !0],
        11: [0, 0, 0.5, 1, !0],
        22: [0.5, 0, 1, 1, !0],
        33: [0, 0, b, 1, !0],
        44: [b, 0, c, 1, !0],
        55: [c, 0, 1, 1, !0],
        16: [1, b, 0, 0, !0],
        17: [1, c, 0, b, !0],
        18: [1, 1, 0, c, !0],
        14: [1, 0.5, 0, 0, !0],
        15: [1, 1, 0, 0.5, !0],
        13: [1, 1, 0, 0, !0],
        8: [0.5, 1, 0, 0, !0],
        19: [1, 1, 0.5, 0, !0],
        30: [b, 1, 0, 0, !0],
        41: [c, 1, b, 0, !0],
        52: [1, 1, c, 0, !0],
        38: [1, c, 0, 1, !0],
        39: [1, b, 0, c, !0],
        40: [1, 0, 0, b, !0],
        36: [1, 0.5, 0, 1, !0],
        37: [1, 0, 0, 0.5, !0],
        35: [1, 0, 0, 1, !0],
        9: [1, 0, 0.5, 1, !0],
        20: [0.5, 0, 0, 1, !0],
        31: [1, 0, c, 1, !0],
        42: [c, 0, b, 1, !0],
        53: [b, 0, 0, 1, !0],
        12: [0, 0, 1, 0, !1],
        23: [1, 1, 0, 1, !1],
        34: [1, 0, 1, 1, !1],
        45: [0, 1, 0, 0, !1]
    };
    ig.CollisionMap.staticNoCollision = {
        trace: function(b, c, g, p) {
            return {
                collision: {
                    x: !1,
                    y: !1,
                    slope: !1
                },
                pos: {
                    x: b + g,
                    y: c + p
                },
                tile: {
                    x: 0,
                    y: 0
                }
            }
        }
    }});
ig.module("impact.background-map")
  .requires("impact.map", "impact.image")
  .defines(function() {
    ig.BackgroundMap = ig.Map.extend({
        tiles: null,
        scroll: {
            x: 0,
            y: 0
        },
        distance: 1,
        repeat: !1,
        tilesetName: "",
        foreground: !1,
        enabled: !0,
        preRender: !1,
        preRenderedChunks: null,
        chunkSize: 512,
        debugChunks: !1,
        anims: {},
        init: function(b, c, d) {
            this.parent(b, c);
            this.setTileset(d)
        },
        setTileset: function(b) {
            this.tilesetName = b instanceof ig.Image ? b.path : b;
            this.tiles = new ig.Image(this.tilesetName);
            this.preRenderedChunks = null
        },
        setScreenPos: function(b, c) {
            this.scroll.x = b / this.distance;
            this.scroll.y = c / this.distance
        },
        preRenderMapToChunks: function() {
            var b = this.width * this.tilesize * ig.system.scale
              , c = this.height * this.tilesize * ig.system.scale;
            this.chunkSize = Math.min(Math.max(b, c), this.chunkSize);
            var d = Math.ceil(b / this.chunkSize)
              , f = Math.ceil(c / this.chunkSize);
            this.preRenderedChunks = [];
            for (var g = 0; g < f; g++) {
                this.preRenderedChunks[g] = [];
                for (var p = 0; p < d; p++)
                    this.preRenderedChunks[g][p] = this.preRenderChunk(p, g, p == d - 1 ? b - p * this.chunkSize : this.chunkSize, g == f - 1 ? c - g * this.chunkSize : this.chunkSize)
            }
        },
        preRenderChunk: function(b, c, d, f) {
            var g = d / this.tilesize / ig.system.scale + 1
              , p = f / this.tilesize / ig.system.scale + 1
              , x = b * this.chunkSize / ig.system.scale % this.tilesize
              , t = c * this.chunkSize / ig.system.scale % this.tilesize;
            b = Math.floor(b * this.chunkSize / this.tilesize / ig.system.scale);
            c = Math.floor(c * this.chunkSize / this.tilesize / ig.system.scale);
            var y = ig.$new("canvas");
            y.width = d;
            y.height = f;
            y.retinaResolutionEnabled = !1;
            f = y.getContext("2d");
            ig.System.scaleMode(y, f);
            d = ig.system.context;
            ig.system.context = f;
            for (f = 0; f < g; f++)
                for (var A = 0; A < p; A++)
                    if (f + b < this.width && A + c < this.height) {
                        var B = this.data[A + c][f + b];
                        B && this.tiles.drawTile(f * this.tilesize - x, A * this.tilesize - t, B - 1, this.tilesize)
                    }
            ig.system.context = d;
            return y
        },
        draw: function() {
            this.tiles.loaded && this.enabled && (this.preRender ? this.drawPreRendered() : this.drawTiled())
        },
        drawPreRendered: function() {
            this.preRenderedChunks || this.preRenderMapToChunks();
            var b = ig.system.getDrawPos(this.scroll.x)
              , c = ig.system.getDrawPos(this.scroll.y);
            if (this.repeat)
                var d = this.width * this.tilesize * ig.system.scale
                  , b = (b % d + d) % d
                  , d = this.height * this.tilesize * ig.system.scale
                  , c = (c % d + d) % d;
            var d = Math.max(Math.floor(b / this.chunkSize), 0)
              , f = Math.max(Math.floor(c / this.chunkSize), 0)
              , g = Math.ceil((b + ig.system.realWidth) / this.chunkSize)
              , p = Math.ceil((c + ig.system.realHeight) / this.chunkSize)
              , x = this.preRenderedChunks[0].length
              , t = this.preRenderedChunks.length;
            this.repeat || (g = Math.min(g, x),
            p = Math.min(p, t));
            for (var y = 0; f < p; f++) {
                for (var A = 0, B = d; B < g; B++) {
                    var l = this.preRenderedChunks[f % t][B % x]
                      , s = -b + B * this.chunkSize - A
                      , u = -c + f * this.chunkSize - y;
                    ig.system.context.drawImage(l, s, u);
                    ig.Image.drawCount++;
                    this.debugChunks && (ig.system.context.strokeStyle = "#f0f",
                    ig.system.context.strokeRect(s, u, this.chunkSize, this.chunkSize));
                    this.repeat && l.width < this.chunkSize && s + l.width < ig.system.realWidth && (A += this.chunkSize - l.width,
                    g++)
                }
                this.repeat && l.height < this.chunkSize && u + l.height < ig.system.realHeight && (y += this.chunkSize - l.height,
                p++)
            }
        },
        drawTiled: function() {
            for (var b = 0, c = null, d = (this.scroll.x / this.tilesize).toInt(), f = (this.scroll.y / this.tilesize).toInt(), g = this.scroll.x % this.tilesize, p = this.scroll.y % this.tilesize, x = -g - this.tilesize, g = ig.system.width + this.tilesize - g, t = ig.system.height + this.tilesize - p, y = -1, p = -p - this.tilesize; p < t; y++,
            p += this.tilesize) {
                var A = y + f;
                if (A >= this.height || 0 > A) {
                    if (!this.repeat)
                        continue;
                    A = (A % this.height + this.height) % this.height
                }
                for (var B = -1, l = x; l < g; B++,
                l += this.tilesize) {
                    b = B + d;
                    if (b >= this.width || 0 > b) {
                        if (!this.repeat)
                            continue;
                        b = (b % this.width + this.width) % this.width
                    }
                    if (b = this.data[A][b])
                        (c = this.anims[b - 1]) ? c.draw(l, p) : this.tiles.drawTile(l, p, b - 1, this.tilesize)
                }
            }
        }
    })});
ig.module("impact.game")
  .requires("impact.impact", "impact.entity", "impact.collision-map", "impact.background-map")
  .defines(function() {
    ig.Game = ig.Class.extend({
        clearColor: "#000000",
        gravity: 0,
        screen: {
            x: 0,
            y: 0
        },
        _rscreen: {
            x: 0,
            y: 0
        },
        entities: [],
        namedEntities: {},
        collisionMap: ig.CollisionMap.staticNoCollision,
        backgroundMaps: [],
        backgroundAnims: {},
        autoSort: !1,
        sortBy: null,
        cellSize: 64,
        _deferredKill: [],
        _levelToLoad: null,
        _doSortEntities: !1,
        staticInstantiate: function() {
            this.sortBy = this.sortBy || ig.Game.SORT.Z_INDEX;
            ig.game = this;
            return null
        },
        loadLevel: function(b) {
            this.screen = {
                x: 0,
                y: 0
            };
            this.entities = [];
            this.namedEntities = {};
            for (var c = 0; c < b.entities.length; c++) {
                var d = b.entities[c];
                this.spawnEntity(d.type, d.x, d.y, d.settings)
            }
            this.sortEntities();
            this.collisionMap = ig.CollisionMap.staticNoCollision;
            this.backgroundMaps = [];
            for (c = 0; c < b.layer.length; c++)
                if (d = b.layer[c],
                "collision" == d.name)
                    this.collisionMap = new ig.CollisionMap(d.tilesize,d.data);
                else {
                    var f = new ig.BackgroundMap(d.tilesize,d.data,d.tilesetName);
                    f.anims = this.backgroundAnims[d.tilesetName] || {};
                    f.repeat = d.repeat;
                    f.distance = d.distance;
                    f.foreground = !!d.foreground;
                    f.preRender = !!d.preRender;
                    f.name = d.name;
                    this.backgroundMaps.push(f)
                }
            for (c = 0; c < this.entities.length; c++)
                this.entities[c].ready()
        },
        loadLevelDeferred: function(b) {
            this._levelToLoad = b
        },
        getMapByName: function(b) {
            if ("collision" == b)
                return this.collisionMap;
            for (var c = 0; c < this.backgroundMaps.length; c++)
                if (this.backgroundMaps[c].name == b)
                    return this.backgroundMaps[c];
            return null
        },
        getEntityByName: function(b) {
            return this.namedEntities[b]
        },
        getEntitiesByType: function(b) {
            b = "string" === typeof b ? ig.global[b] : b;
            for (var c = [], d = 0; d < this.entities.length; d++) {
                var f = this.entities[d];
                f instanceof b && !f._killed && c.push(f)
            }
            return c
        },
        spawnEntity: function(b, c, d, f) {
            var g = "string" === typeof b ? ig.global[b] : b;
            if (!g)
                throw "Can't spawn entity of type " + b;
            b = new g(c,d,f || {});
            this.entities.push(b);
            b.name && (this.namedEntities[b.name] = b);
            return b
        },
        sortEntities: function() {
            this.entities.sort(this.sortBy)
        },
        sortEntitiesDeferred: function() {
            this._doSortEntities = !0
        },
        removeEntity: function(b) {
            b.name && delete this.namedEntities[b.name];
            b._killed = !0;
            b.type = ig.Entity.TYPE.NONE;
            b.checkAgainst = ig.Entity.TYPE.NONE;
            b.collides = ig.Entity.COLLIDES.NEVER;
            this._deferredKill.push(b)
        },
        run: function() {
            this.update();
            this.draw()
        },
        update: function() {
            this._levelToLoad && (this.loadLevel(this._levelToLoad),
            this._levelToLoad = null);
            this.updateEntities();
            this.checkEntities();
            for (var b = 0; b < this._deferredKill.length; b++)
                this._deferredKill[b].erase(),
                this.entities.erase(this._deferredKill[b]);
            this._deferredKill = [];
            if (this._doSortEntities || this.autoSort)
                this.sortEntities(),
                this._doSortEntities = !1;
            for (var c in this.backgroundAnims) {
                var b = this.backgroundAnims[c], d;
                for (d in b)
                    b[d].update()
            }
        },
        updateEntities: function() {
            for (var b = 0; b < this.entities.length; b++) {
                var c = this.entities[b];
                c._killed || c.update()
            }
        },
        draw: function() {
            this.clearColor && ig.system.clear(this.clearColor);
            this._rscreen.x = ig.system.getDrawPos(this.screen.x) / ig.system.scale;
            this._rscreen.y = ig.system.getDrawPos(this.screen.y) / ig.system.scale;
            var b;
            for (b = 0; b < this.backgroundMaps.length; b++) {
                var c = this.backgroundMaps[b];
                if (c.foreground)
                    break;
                c.setScreenPos(this.screen.x, this.screen.y);
                c.draw()
            }
            this.drawEntities();
            for (b; b < this.backgroundMaps.length; b++)
                c = this.backgroundMaps[b],
                c.setScreenPos(this.screen.x, this.screen.y),
                c.draw()
        },
        drawEntities: function() {
            for (var b = 0; b < this.entities.length; b++)
                this.entities[b].draw()
        },
        checkEntities: function() {
            for (var b = {}, c = 0; c < this.entities.length; c++) {
                var d = this.entities[c];
                if (!(d.type == ig.Entity.TYPE.NONE && d.checkAgainst == ig.Entity.TYPE.NONE && d.collides == ig.Entity.COLLIDES.NEVER))
                    for (var f = {}, g = Math.floor(d.pos.y / this.cellSize), p = Math.floor((d.pos.x + d.size.x) / this.cellSize) + 1, x = Math.floor((d.pos.y + d.size.y) / this.cellSize) + 1, t = Math.floor(d.pos.x / this.cellSize); t < p; t++)
                        for (var y = g; y < x; y++)
                            if (b[t])
                                if (b[t][y]) {
                                    for (var A = b[t][y], B = 0; B < A.length; B++)
                                        d.touches(A[B]) && !f[A[B].id] && (f[A[B].id] = !0,
                                        ig.Entity.checkPair(d, A[B]));
                                    A.push(d)
                                } else
                                    b[t][y] = [d];
                            else
                                b[t] = {},
                                b[t][y] = [d]
            }
        }
    });
    ig.Game.SORT = {
        Z_INDEX: function(b, c) {
            return b.zIndex - c.zIndex
        },
        POS_X: function(b, c) {
            return b.pos.x + b.size.x - (c.pos.x + c.size.x)
        },
        POS_Y: function(b, c) {
            return b.pos.y + b.size.y - (c.pos.y + c.size.y)
        }
    }});
ig.module("plugins.splash-loader")
  .requires("impact.loader", "impact.animation")
  .defines(function() {
    ig.SplashLoader = ig.Loader.extend({
        gravityFactor: 0,
        layers: [{
            image: new ig.Image("media/graphics/sprites/start_menu/audience.png"),
            pos: {
                x: 233,
                y: 244
            }
        }, {
            image: new ig.Image("media/graphics/sprites/start_menu/ring.png"),
            pos: {
                x: 240,
                y: 464
            }
        }],
        foreground: new ig.Image("media/graphics/sprites/start_menu/foreground.png"),
        title: {
            image: new ig.Image("media/graphics/sprites/start_menu/title.png"),
            pos: {
                x: 246,
                y: 132
            },
            scale: {
                x: 0.55,
                y: 0.55
            },
            alpha: 0.25,
            visible: !1
        },
        loading: {
            text: _STRINGS.Splash.Loading,
            textAlign: "center",
            textBaseline: "middle",
            fontStyle: {
                r: 128,
                g: 196,
                b: 16
            },
            _POS: {
                x: 0.5,
                y: 0.65
            },
            fontHeight: 0.045,
            fontFamily: "Arial",
            alpha: {
                min: 0.6,
                max: 1,
                cur: 0.8,
                inc: 0.01,
                dec: 0.0050,
                curRate: -0.02
            }
        },
        screenOffset: {
            x: 0,
            y: 640
        },
        screenTweening: !1,
        init: function(b, c) {
            this.parent(b, c);
            this.generateParticles(32);
            ig.ua.mobile && _SETTINGS.Ad.Mobile.Preroll.Enabled && MobileAdInGamePreroll.Initialize()
        },
        end: function() {
            this.parent()
        },
        generateParticles: function(b) {
            this.particles = [];
            this.particles.length = 3;
            for (var c = 0; c < this.particles.length; c++) {
                this.particles[c] = [];
                this.particles[c].length = Math.round(b * (c + 1) / 6);
                for (var d = 0; d < this.particles[c].length; d++)
                    this.particles[c][d] = {
                        pos: {
                            x: Math.random() * ig.system.width,
                            y: Math.random() * ig.system.height
                        },
                        rgba: {
                            r: Math.round(15 * Math.random() + 240),
                            g: Math.round(30 * Math.random() + 120),
                            b: Math.round(60 * Math.random() + 0),
                            a: 0.05 + 0.05 * Math.random()
                        },
                        radius: 3 * Math.random() + 1.5,
                        speed: 3 * Math.random() + 1.5,
                        angle: 0
                    }
            }
        },
        update: function() {
            this.title.image.loaded && (this.title.visible || (this.title.visible = !0),
            this.title.alpha = (this.title.alpha + 0.0075).limit(0, 1),
            this.title.scale.x = (this.title.scale.x + 0.01).limit(0, 1),
            this.title.scale.y = (this.title.scale.y + 0.01).limit(0, 1));
            this.loading && (this.loading.alpha.cur = (this.loading.alpha.cur + this.loading.alpha.curRate).limit(this.loading.alpha.min, this.loading.alpha.max),
            this.loading.alpha.cur <= this.loading.alpha.min && (this.loading.alpha.curRate = this.loading.alpha.inc),
            this.loading.alpha.cur >= this.loading.alpha.max && (this.loading.alpha.curRate = -this.loading.alpha.dec));
            this.screenOffset.y = (this.screenOffset.y - 1).limit(0, ig.system.height)
        },
        drawParticles: function(b) {
            if (this.particles && 0 <= b && b <= this.particles.length && this.particles[b].length) {
                ig.system.context.beginPath();
                for (var c = 0; c < this.particles[b].length; c++) {
                    var d = this.particles[b][c];
                    d.angle += 0.01 * Math.random();
                    d.pos.y -= Math.cos(d.angle + d.speed) + 1 + d.radius / 2;
                    d.pos.x -= 2 * Math.sin(d.angle);
                    if (0 >= d.rgba.a || 0 >= d.radius || d.pos.y < -d.radius)
                        d.rgba.r = Math.round(15 * Math.random() + 240),
                        d.rgba.g = Math.round(30 * Math.random() + 120),
                        d.rgba.b = Math.round(60 * Math.random() + 0),
                        d.rgba.a = 0.05 + 0.05 * Math.random(),
                        d.speed = 1.5 * Math.random() + 1.5,
                        d.radius = 1.5 * Math.random() + 1.5,
                        d.pos.x = Math.random() * ig.system.width,
                        d.pos.y = ig.system.height + d.radius;
                    ig.system.context.fillStyle = "rgba(" + d.rgba.r + ", " + d.rgba.g + ", " + d.rgba.b + ", " + d.rgba.a + ")";
                    ig.system.context.moveTo(d.pos.x, d.pos.y);
                    ig.system.context.arc(d.pos.x, d.pos.y, d.radius, 0, 2 * Math.PI, !0)
                }
                ig.system.context.fill();
                ig.system.context.globalCompositeOperation = "source-over"
            }
        },

        draw: function() {
            this._drawStatus = (this._drawStatus + (this.status - this._drawStatus) / 16).limit(0, 1);
            if (!ig.global.wm) {
                ig.system.context.fillStyle = "#161621";
                ig.system.context.fillRect(0, 0, ig.system.width, ig.system.height);
                this.drawParticles(0);
                for (var b = 0; b < this.layers.length; b++) {
                    var c = 0
                      , d = 0
                      , c = this.screenOffset.x
                      , c = c * (2.5 * (b + 1) / (this.layers.length + 1));
                    2 > b && (c = 0);
                    d = ig.system.height - this.screenOffset.y;
                    d *= 2.5 * (b + 1) / (this.layers.length + 1);
                    this.layers[b].image.draw(c + this.layers[b].pos.x - 0.5 * this.layers[b].image.width, d + this.layers[b].pos.y - 0.5 * this.layers[b].image.height)
                }
                ig.system.context.font = this.loading.fontHeight * ig.system.height + "px " + this.loading.fontFamily;
                ig.system.context.textAlign = this.loading.textAlign;
                ig.system.context.textBaseline = this.loading.textBaseline;
                ig.system.context.strokeStyle = "rgba(" + Math.floor(this.loading.fontStyle.r * (1 - this._drawStatus)) + "," + Math.floor(this.loading.fontStyle.g * this._drawStatus) + "," + this.loading.fontStyle.b + "," + this.loading.alpha.cur + ")";
                ig.system.context.lineWidth = 3;
                ig.system.context.strokeText(this.loading.text, this.loading._POS.x * ig.system.width, this.loading._POS.y * ig.system.height);
                ig.system.context.fillText(this.loading.text, this.loading._POS.x * ig.system.width, this.loading._POS.y * ig.system.height);
                ig.system.context.beginPath();
                ig.system.context.arc(this.loading._POS.x * ig.system.width, this.loading._POS.y * ig.system.height, 0.2 * ig.system.width, 0, 2 * Math.PI, !1);
                ig.system.context.closePath();
                ig.system.context.strokeStyle = "rgba(255,255,255,0.75)";
                ig.system.context.lineWidth = 0.5 * this.loading.fontHeight * ig.system.height + 3;
                ig.system.context.stroke();
                ig.system.context.strokeStyle = "#995703";
                ig.system.context.lineWidth = 0.5 * this.loading.fontHeight * ig.system.height;
                ig.system.context.stroke();
                ig.system.context.beginPath();
                ig.system.context.arc(this.loading._POS.x * ig.system.width, this.loading._POS.y * ig.system.height, 0.2 * ig.system.width, 1.5 * Math.PI, (1.5 + 2 * this._drawStatus) * Math.PI, !1);
                ig.system.context.strokeStyle = "#005703";
                ig.system.context.stroke();
                ig.system.context.closePath();
                this.drawParticles(1);
                this.title && this.title.visible && (ig.system.context.save(),
                ig.system.context.globalAlpha = this.title.alpha.limit(0, 1),
                this.foreground.draw(0, ig.system.height - this.foreground.height),
                ig.system.context.translate(this.title.pos.x, this.title.pos.y),
                ig.system.context.drawImage(this.title.image.data, -0.5 * this.title.scale.x * this.title.image.width, -0.5 * this.title.scale.y * this.title.image.height, this.title.scale.x * this.title.image.width, this.title.scale.y * this.title.image.height),
                ig.system.context.restore());
                this.drawParticles(2)
            }
        }
    })});
ig.module("plugins.tween")
  .requires("impact.entity")
  .defines(function() {
    Array.prototype.indexOf || (Array.prototype.indexOf = function(b) {
        for (var c = 0; c < this.length; ++c)
            if (this[c] === b)
                return c;
        return -1
    }
    );
    ig.Entity.prototype.tweens = [];
    ig.Entity.prototype._preTweenUpdate = ig.Entity.prototype.update;
    ig.Entity.prototype.update = function() {
        this._preTweenUpdate();
        if (0 < this.tweens.length) {
            for (var b = [], c = 0; c < this.tweens.length; c++)
                this.tweens[c].update(),
                this.tweens[c].complete || b.push(this.tweens[c]);
            this.tweens = b
        }
    };
    ig.Entity.prototype.tween = function(b, c, d) {
        b = new ig.Tween(this,b,c,d);
        this.tweens.push(b);
        return b
    };
    ig.Entity.prototype.pauseTweens = function() {
        for (var b = 0; b < this.tweens.length; b++)
            this.tweens[b].pause()
    };
    ig.Entity.prototype.resumeTweens = function() {
        for (var b = 0; b < this.tweens.length; b++)
            this.tweens[b].resume()
    };
    ig.Entity.prototype.stopTweens = function(b) {
        for (var c = 0; c < this.tweens.length; c++)
            this.tweens[c].stop(b)
    };
    ig.Tween = function(b, c, d, f) {
        var g = {}
          , p = {}
          , x = {}
          , t = 0
          , y = !1
          , A = !1
          , B = !1;
        this.duration = d;
        this.paused = this.complete = !1;
        this.easing = ig.Tween.Easing.Linear.EaseNone;
        this.onComplete = !1;
        this.loop = this.delay = 0;
        this.loopCount = -1;
        ig.merge(this, f);
        this.loopNum = this.loopCount;
        this.chain = function(b) {
            B = b
        }
        ;
        this.initEnd = function(b, c, d) {
            if ("object" !== typeof c[b])
                d[b] = c[b];
            else
                for (subprop in c[b])
                    d[b] || (d[b] = {}),
                    this.initEnd(subprop, c[b], d[b])
        }
        ;
        this.initStart = function(b, c, d, f) {
            if ("object" !== typeof d[b])
                "undefined" !== typeof c[b] && (f[b] = d[b]);
            else
                for (subprop in d[b])
                    f[b] || (f[b] = {}),
                    "undefined" !== typeof c[b] && this.initStart(subprop, c[b], d[b], f[b])
        }
        ;
        this.start = function() {
            this.paused = this.complete = !1;
            this.loopNum = this.loopCount;
            t = 0;
            -1 == b.tweens.indexOf(this) && b.tweens.push(this);
            A = !0;
            y = new ig.Timer;
            for (var d in c)
                this.initEnd(d, c, p);
            for (d in p)
                this.initStart(d, p, b, g),
                this.initDelta(d, x, b, p)
        }
        ;
        this.initDelta = function(b, c, d, f) {
            if ("object" !== typeof f[b])
                c[b] = f[b] - d[b];
            else
                for (subprop in f[b])
                    c[b] || (c[b] = {}),
                    this.initDelta(subprop, c[b], d[b], f[b])
        }
        ;
        this.propUpdate = function(b, c, d, f, g) {
            if ("object" !== typeof d[b])
                c[b] = "undefined" != typeof d[b] ? d[b] + f[b] * g : c[b];
            else
                for (subprop in d[b])
                    this.propUpdate(subprop, c[b], d[b], f[b], g)
        }
        ;
        this.propSet = function(b, c, d) {
            if ("object" !== typeof c[b])
                d[b] = c[b];
            else
                for (subprop in c[b])
                    d[b] || (d[b] = {}),
                    this.propSet(subprop, c[b], d[b])
        }
        ;
        this.update = function() {
            if (!A)
                return !1;
            if (this.delay) {
                if (y.delta() < this.delay)
                    return;
                this.delay = 0;
                y.reset()
            }
            if (this.paused || this.complete)
                return !1;
            var c = (y.delta() + t) / this.duration
              , c = 1 < c ? 1 : c
              , d = this.easing(c);
            for (property in x)
                this.propUpdate(property, b, g, x, d);
            if (1 <= c) {
                if (0 == this.loopNum || !this.loop) {
                    this.complete = !0;
                    if (this.onComplete)
                        this.onComplete();
                    B && B.start();
                    return !1
                }
                if (this.loop == ig.Tween.Loop.Revert) {
                    for (property in g)
                        this.propSet(property, g, b);
                    t = 0;
                    y.reset();
                    -1 != this.loopNum && this.loopNum--
                } else if (this.loop == ig.Tween.Loop.Reverse) {
                    c = {};
                    d = {};
                    ig.merge(c, p);
                    ig.merge(d, g);
                    ig.merge(g, c);
                    ig.merge(p, d);
                    for (property in p)
                        this.initDelta(property, x, b, p);
                    t = 0;
                    y.reset();
                    -1 != this.loopNum && this.loopNum--
                }
            }
        }
        ;
        this.pause = function() {
            this.paused = !0;
            t += y.delta()
        }
        ;
        this.resume = function() {
            this.paused = !1;
            y.reset()
        }
        ;
        this.stop = function(b) {
            b && (this.loop = this.complete = this.paused = !1,
            t += d,
            this.update());
            this.complete = !0
        }
    };
    ig.Tween.Loop = {
        Revert: 1,
        Reverse: 2
    };
    ig.Tween.Easing = {
        Linear: {},
        Quadratic: {},
        Cubic: {},
        Quartic: {},
        Quintic: {},
        Sinusoidal: {},
        Exponential: {},
        Circular: {},
        Elastic: {},
        Back: {},
        Bounce: {}
    };
    ig.Tween.Easing.Linear.EaseNone = function(b) {
        return b
    };
    ig.Tween.Easing.Quadratic.EaseIn = function(b) {
        return b * b
    };
    ig.Tween.Easing.Quadratic.EaseOut = function(b) {
        return -b * (b - 2)
    };
    ig.Tween.Easing.Quadratic.EaseInOut = function(b) {
        return 1 > (b *= 2) ? 0.5 * b * b : -0.5 * (--b * (b - 2) - 1)
    };
    ig.Tween.Easing.Cubic.EaseIn = function(b) {
        return b * b * b
    };
    ig.Tween.Easing.Cubic.EaseOut = function(b) {
        return --b * b * b + 1
    };
    ig.Tween.Easing.Cubic.EaseInOut = function(b) {
        return 1 > (b *= 2) ? 0.5 * b * b * b : 0.5 * ((b -= 2) * b * b + 2)
    };
    ig.Tween.Easing.Quartic.EaseIn = function(b) {
        return b * b * b * b
    };
    ig.Tween.Easing.Quartic.EaseOut = function(b) {
        return -(--b * b * b * b - 1)
    };
    ig.Tween.Easing.Quartic.EaseInOut = function(b) {
        return 1 > (b *= 2) ? 0.5 * b * b * b * b : -0.5 * ((b -= 2) * b * b * b - 2)
    };
    ig.Tween.Easing.Quintic.EaseIn = function(b) {
        return b * b * b * b * b
    };
    ig.Tween.Easing.Quintic.EaseOut = function(b) {
        return (b -= 1) * b * b * b * b + 1
    };
    ig.Tween.Easing.Quintic.EaseInOut = function(b) {
        return 1 > (b *= 2) ? 0.5 * b * b * b * b * b : 0.5 * ((b -= 2) * b * b * b * b + 2)
    };
    ig.Tween.Easing.Sinusoidal.EaseIn = function(b) {
        return -Math.cos(b * Math.PI / 2) + 1
    };
    ig.Tween.Easing.Sinusoidal.EaseOut = function(b) {
        return Math.sin(b * Math.PI / 2)
    };
    ig.Tween.Easing.Sinusoidal.EaseInOut = function(b) {
        return -0.5 * (Math.cos(Math.PI * b) - 1)
    };
    ig.Tween.Easing.Exponential.EaseIn = function(b) {
        return 0 == b ? 0 : Math.pow(2, 10 * (b - 1))
    };
    ig.Tween.Easing.Exponential.EaseOut = function(b) {
        return 1 == b ? 1 : -Math.pow(2, -10 * b) + 1
    };
    ig.Tween.Easing.Exponential.EaseInOut = function(b) {
        return 0 == b ? 0 : 1 == b ? 1 : 1 > (b *= 2) ? 0.5 * Math.pow(2, 10 * (b - 1)) : 0.5 * (-Math.pow(2, -10 * (b - 1)) + 2)
    };
    ig.Tween.Easing.Circular.EaseIn = function(b) {
        return -(Math.sqrt(1 - b * b) - 1)
    };
    ig.Tween.Easing.Circular.EaseOut = function(b) {
        return Math.sqrt(1 - --b * b)
    };
    ig.Tween.Easing.Circular.EaseInOut = function(b) {
        return 1 > (b /= 0.5) ? -0.5 * (Math.sqrt(1 - b * b) - 1) : 0.5 * (Math.sqrt(1 - (b -= 2) * b) + 1)
    };
    ig.Tween.Easing.Elastic.EaseIn = function(b) {
        var c, d = 0.1, f = 0.4;
        if (0 == b)
            return 0;
        if (1 == b)
            return 1;
        f || (f = 0.3);
        !d || 1 > d ? (d = 1,
        c = f / 4) : c = f / (2 * Math.PI) * Math.asin(1 / d);
        return -(d * Math.pow(2, 10 * (b -= 1)) * Math.sin(2 * (b - c) * Math.PI / f))
    };
    ig.Tween.Easing.Elastic.EaseOut = function(b) {
        var c, d = 0.1, f = 0.4;
        if (0 == b)
            return 0;
        if (1 == b)
            return 1;
        f || (f = 0.3);
        !d || 1 > d ? (d = 1,
        c = f / 4) : c = f / (2 * Math.PI) * Math.asin(1 / d);
        return d * Math.pow(2, -10 * b) * Math.sin(2 * (b - c) * Math.PI / f) + 1
    };
    ig.Tween.Easing.Elastic.EaseInOut = function(b) {
        var c, d = 0.1, f = 0.4;
        if (0 == b)
            return 0;
        if (1 == b)
            return 1;
        f || (f = 0.3);
        !d || 1 > d ? (d = 1,
        c = f / 4) : c = f / (2 * Math.PI) * Math.asin(1 / d);
        return 1 > (b *= 2) ? -0.5 * d * Math.pow(2, 10 * (b -= 1)) * Math.sin(2 * (b - c) * Math.PI / f) : 0.5 * d * Math.pow(2, -10 * (b -= 1)) * Math.sin(2 * (b - c) * Math.PI / f) + 1
    };
    ig.Tween.Easing.Back.EaseIn = function(b) {
        return b * b * (2.70158 * b - 1.70158)
    };
    ig.Tween.Easing.Back.EaseOut = function(b) {
        return (b -= 1) * b * (2.70158 * b + 1.70158) + 1
    };
    ig.Tween.Easing.Back.EaseInOut = function(b) {
        return 1 > (b *= 2) ? 0.5 * b * b * (3.5949095 * b - 2.5949095) : 0.5 * ((b -= 2) * b * (3.5949095 * b + 2.5949095) + 2)
    };
    ig.Tween.Easing.Bounce.EaseIn = function(b) {
        return 1 - ig.Tween.Easing.Bounce.EaseOut(1 - b)
    };
    ig.Tween.Easing.Bounce.EaseOut = function(b) {
        return (b /= 1) < 1 / 2.75 ? 7.5625 * b * b : b < 2 / 2.75 ? 7.5625 * (b -= 1.5 / 2.75) * b + 0.75 : b < 2.5 / 2.75 ? 7.5625 * (b -= 2.25 / 2.75) * b + 0.9375 : 7.5625 * (b -= 2.625 / 2.75) * b + 0.984375
    };
    ig.Tween.Easing.Bounce.EaseInOut = function(b) {
        return 0.5 > b ? 0.5 * ig.Tween.Easing.Bounce.EaseIn(2 * b) : 0.5 * ig.Tween.Easing.Bounce.EaseOut(2 * b - 1) + 0.5
    }});
ig.module("plugins.url-parameters")
  .defines(function() {
    ig.UrlParameters = ig.Class.extend({
        init: function() {
            switch (getQueryVariable("iphone")) {
            case "true":
                ig.ua.iPhone = !0,
                console.log("iPhone mode")
            }
            var b = getQueryVariable("webview");
            if (b)
                switch (b) {
                case "true":
                    ig.ua.is_uiwebview = !0,
                    console.log("webview mode")
                }
            if (b = getQueryVariable("debug"))
                switch (b) {
                case "true":
                    ig.game.showDebugMenu(),
                    console.log("debug mode")
                }
            switch (getQueryVariable("view")) {
            case "stats":
                ig.game.resetPlayerStats(),
                ig.game.endGame()
            }
            getQueryVariable("ad")
        }
    })});
ig.module("plugins.jukebox")
  .defines(function() {
    ig.Jukebox = ig.Class.extend({
        init: function() {
            this.player = new jukebox.Player({
                resources: ["media/audio/background.mp3", "media/audio/background.ogg"],
                autoplay: !1,
                spritemap: {
                    music: {
                        start: 0,
                        end: 84.689,
                        loop: !0
                    }
                },
                timeout: 1E3
            })
        }
    })});
ig.module("plugins.director")
  .requires("impact.impact")
  .defines(function() {
    ig.Director = ig.Class.extend({
        init: function(b, c) {
            this.game = b;
            this.levels = [];
            this.currentLevel = 0;
            this.append(c)
        },
        loadLevel: function(b) {
            for (key in dynamicClickableEntityDivs)
                ig.game.hideOverlay([key]);
            this.currentLevel = b;
            this.game.loadLevel(this.levels[b]);
            return !0
        },
        loadLevelWithoutEntities: function(b) {
            this.currentLevel = b;
            this.game.loadLevelWithoutEntities(this.levels[b]);
            return !0
        },
        append: function(b) {
            newLevels = [];
            return "object" === typeof b ? (b.constructor === [].constructor ? newLevels = b : newLevels[0] = b,
            this.levels = this.levels.concat(newLevels),
            !0) : !1
        },
        nextLevel: function() {
            return this.currentLevel + 1 < this.levels.length ? this.loadLevel(this.currentLevel + 1) : !1
        },
        previousLevel: function() {
            return 0 <= this.currentLevel - 1 ? this.loadLevel(this.currentLevel - 1) : !1
        },
        jumpTo: function(b) {
            var c = null;
            for (i = 0; i < this.levels.length; i++)
                this.levels[i] == b && (c = i);
            return 0 <= c ? this.loadLevel(c) : !1
        },
        firstLevel: function() {
            return this.loadLevel(0)
        },
        lastLevel: function() {
            return this.loadLevel(this.levels.length - 1)
        },
        reloadLevel: function() {
            return this.loadLevel(this.currentLevel)
        }
    })});
ig.module("plugins.impact-storage")
  .requires("impact.game")
  .defines(function() {
    ig.Storage = ig.Class.extend({
        staticInstantiate: function() {
            return !ig.Storage.instance ? null : ig.Storage.instance
        },
        init: function() {
            ig.Storage.instance = this
        },
        isCapable: function() {
            return "undefined" !== typeof window.localStorage
        },
        isSet: function(b) {
            return null !== this.get(b)
        },
        initUnset: function(b, c) {
            null === this.get(b) && this.set(b, c)
        },
        get: function(b) {
            if (!this.isCapable())
                return null;
            try {
                return JSON.parse(localStorage.getItem(b))
            } catch (c) {
                return window.localStorage.getItem(b)
            }
        },
        getInt: function(b) {
            return ~~this.get(b)
        },
        getFloat: function(b) {
            return parseFloat(this.get(b))
        },
        getBool: function(b) {
            return !!this.get(b)
        },
        key: function(b) {
            return this.isCapable() ? window.localStorage.key(b) : null
        },
        set: function(b, c) {
            if (!this.isCapable())
                return null;
            try {
                window.localStorage.setItem(b, JSON.stringify(c))
            } catch (d) {
                console.log(d)
            }
        },
        setHighest: function(b, c) {
            c > this.getFloat(b) && this.set(b, c)
        },
        remove: function(b) {
            if (!this.isCapable())
                return null;
            window.localStorage.removeItem(b)
        },
        clear: function() {
            if (!this.isCapable())
                return null;
            window.localStorage.clear()
        }
    })});
ig.module("plugins.branding.splash")
  .requires("impact.impact", "impact.entity")
  .defines(function() {
    ig.BrandingSplash = ig.Class.extend({
        init: function() {
            ig.game.spawnEntity(EntityBranding, 0, 0)
        }
    });
    EntityBranding = ig.Entity.extend({
        gravityFactor: 0,
        size: {
            x: 32,
            y: 32
        },
        splash: new ig.Image("branding/splash1.png"),
        init: function(b, c, d) {
            this.parent(b, c, d);
            320 >= ig.system.width ? (this.size.x = 320,
            this.size.y = 200) : (this.size.x = 480,
            this.size.y = 240);
            this.pos.x = (ig.system.width - this.size.x) / 2;
            this.pos.y = -this.size.y - 200;
            this.endPosY = (ig.system.height - this.size.y) / 2;
            b = this.tween({
                pos: {
                    y: this.endPosY
                }
            }, 0.5, {
                easing: ig.Tween.Easing.Bounce.EaseIn
            });
            c = this.tween({}, 2.5, {
                onComplete: function() {
                    ig.game.director.loadLevel(ig.game.director.currentLevel)
                }
            });
            b.chain(c);
            b.start();
            this.currentAnim = this.anims.idle
        },
        createClickableLayer: function() {
            console.log("Build clickable layer");
            this.checkClickableLayer("branding-splash", _SETTINGS.Branding.Logo.Link, _SETTINGS.Branding.Logo.NewWindow)
        },
        doesClickableLayerExist: function(b) {
            for (k in dynamicClickableEntityDivs)
                if (k == b)
                    return !0;
            return !1
        },
        checkClickableLayer: function(b, c, d) {
            "undefined" == typeof wm && (this.doesClickableLayerExist(b) ? (ig.game.showOverlay([b]),
            $("#" + b).find("[href]").attr("href", c)) : this.createClickableOutboundLayer(b, c, "media/graphics/misc/invisible.png", d))
        },
        createClickableOutboundLayer: function(b, c, d, f) {
            var g = ig.$new("div");
            g.id = b;
            document.body.appendChild(g);
            $("#" + g.id).css("float", "left");
            $("#" + g.id).css("position", "absolute");
            if (ig.ua.mobile) {
                var p = window.innerHeight / mobileHeight
                  , x = window.innerWidth / mobileWidth;
                $("#" + g.id).css("left", this.pos.x * x);
                $("#" + g.id).css("top", this.pos.y * p);
                $("#" + g.id).css("width", this.size.x * x);
                $("#" + g.id).css("height", this.size.y * p)
            } else
                p = w / 2 - destW / 2,
                x = h / 2 - destH / 2,
                console.log(p, x),
                $("#" + g.id).css("left", p + this.pos.x * multiplier),
                $("#" + g.id).css("top", x + this.pos.y * multiplier),
                $("#" + g.id).css("width", this.size.x * multiplier),
                $("#" + g.id).css("height", this.size.y * multiplier);
            f ? $("#" + g.id).html("<a target='_blank' href='" + c + "'><img style='width:100%;height:100%' src='" + d + "'></a>") : $("#" + g.id).html("<a href='" + c + "'><img style='width:100%;height:100%' src='" + d + "'></a>");
            dynamicClickableEntityDivs[b] = {};
            dynamicClickableEntityDivs[b].width = this.size.x * multiplier;
            dynamicClickableEntityDivs[b].height = this.size.y * multiplier;
            dynamicClickableEntityDivs[b].entity_pos_x = this.pos.x;
            dynamicClickableEntityDivs[b].entity_pos_y = this.pos.y
        },
        draw: function() {
            ig.system.context.fillStyle = "#ffffff";
            ig.system.context.fillRect(0, 0, ig.system.width, ig.system.height);
            ig.system.context.fillStyle = "#000";
            ig.system.context.font = "12px Arial";
            320 >= ig.system.width ? ig.system.context.fillText("powered by MarketJS.com", ig.system.width - 150, ig.system.height - 15) : ig.system.context.fillText("powered by MarketJS.com", ig.system.width - 160, ig.system.height - 15);
            this.parent();
            this.splash && ig.system.context.drawImage(this.splash.data, 0, 0, this.splash.data.width, this.splash.data.height, this.pos.x, this.pos.y, this.size.x, this.size.y)
        }
    })});
ig.module("game.entities.branding-logo-placeholder")
  .requires("impact.entity")
  .defines(function() {
    EntityBrandingLogoPlaceholder = ig.Entity.extend({
        gravityFactor: 0,
        size: {
            x: 32,
            y: 32
        },
        _wmDrawBox: !0,
        _wmBoxColor: "rgba(0, 0, 255, 0.7)",
        init: function(b, c, d) {
            this.parent(b, c, d);
            if (d)
                switch (console.log("settings found ... using that div layer name"),
                b = d.div_layer_name,
                console.log("settings.centralize:", d.centralize),
                d.centralize) {
                case "true":
                    console.log("centralize true");
                    centralize = !0;
                    break;
                case "false":
                    console.log("centralize false");
                    centralize = !1;
                    break;
                default:
                    console.log("default ... centralize false"),
                    centralize = !1
                }
            else
                b = "branding-logo",
                centralize = !1;
            if ("undefined" == typeof wm) {
                if (_SETTINGS.Branding.Logo.Enabled)
                    try {
                        ig.game.spawnEntity(EntityBrandingLogo, this.pos.x, this.pos.y, {
                            div_layer_name: b,
                            centralize: centralize
                        })
                    } catch (f) {
                        console.log(f)
                    }
                this.kill()
            }
        }
    })});
ig.module("game.entities.branding-logo")
  .requires("impact.entity")
  .defines(function() {
    EntityBrandingLogo = ig.Entity.extend({
        gravityFactor: 0,
        logo: new ig.AnimationSheet("branding/logo.png",_SETTINGS.Branding.Logo.Width,_SETTINGS.Branding.Logo.Height),
        size: {
            x: 32,
            y: 32
        },
        zIndex: 10001,
        init: function(b, c, d) {
            this.parent(b, c, d);
            "undefined" == typeof wm && (_SETTINGS.Branding.Logo.Enabled ? (this.size.x = _SETTINGS.Branding.Logo.Width,
            this.size.y = _SETTINGS.Branding.Logo.Height,
            d && d.centralize && (this.pos.x = ig.system.width / 2 - this.size.x / 2,
            console.log("centralize true ... centering branded logo ..."))) : this.kill());
            this.anims.idle = new ig.Animation(this.logo,0,[0],!0);
            this.currentAnim = this.anims.idle;
            d ? (console.log("branding settings found ... using that div layer name"),
            b = d.div_layer_name) : b = "branding-logo";
            _SETTINGS.Branding.Logo.LinkEnabled && (console.log("logo link enabled"),
            this.checkClickableLayer(b, _SETTINGS.Branding.Logo.Link, _SETTINGS.Branding.Logo.NewWindow));
            console.log("branding logo spawed ...")
        },
        doesClickableLayerExist: function(b) {
            for (k in dynamicClickableEntityDivs)
                if (k == b)
                    return !0;
            return !1
        },
        checkClickableLayer: function(b, c, d) {
            "undefined" == typeof wm && (this.doesClickableLayerExist(b) ? (ig.game.showOverlay([b]),
            $("#" + b).find("[href]").attr("href", c)) : this.createClickableOutboundLayer(b, c, "media/graphics/misc/invisible.png", d))
        },
        createClickableOutboundLayer: function(b, c, d, f) {
            var g = ig.$new("div");
            g.id = b;
            document.body.appendChild(g);
            $("#" + g.id).css("float", "left");
            $("#" + g.id).css("position", "absolute");
            if (ig.ua.mobile) {
                var p = window.innerHeight / mobileHeight
                  , x = window.innerWidth / mobileWidth;
                $("#" + g.id).css("left", this.pos.x * x);
                $("#" + g.id).css("top", this.pos.y * p);
                $("#" + g.id).css("width", this.size.x * x);
                $("#" + g.id).css("height", this.size.y * p)
            } else
                p = w / 2 - destW / 2,
                x = h / 2 - destH / 2,
                console.log(p, x),
                $("#" + g.id).css("left", p + this.pos.x * multiplier),
                $("#" + g.id).css("top", x + this.pos.y * multiplier),
                $("#" + g.id).css("width", this.size.x * multiplier),
                $("#" + g.id).css("height", this.size.y * multiplier);
            f ? $("#" + g.id).html("<a target='_blank' href='" + c + "'><img style='width:100%;height:100%' src='" + d + "'></a>") : $("#" + g.id).html("<a href='" + c + "'><img style='width:100%;height:100%' src='" + d + "'></a>");
            dynamicClickableEntityDivs[b] = {};
            dynamicClickableEntityDivs[b].width = this.size.x * multiplier;
            dynamicClickableEntityDivs[b].height = this.size.y * multiplier;
            dynamicClickableEntityDivs[b].entity_pos_x = this.pos.x;
            dynamicClickableEntityDivs[b].entity_pos_y = this.pos.y
        }
    })});
ig.module("game.entities.button")
  .requires("impact.entity")
  .defines(function() {
    EntityButton = ig.Entity.extend({
        type: ig.Entity.TYPE.B,
        zIndex: 100,
        gravityFactor: 0,
        scale: {
            x: 1,
            y: 1
        },
        minScale: {
            x: 1,
            y: 1
        },
        maxScale: {
            x: 1.2,
            y: 1.2
        },
        anchor: {
            x: 0.5,
            y: 0.5
        },
        locked: !1,
        spriteSheet: null,
        spriteID: null,
        init: function(b, c, d) {
            this.parent(b, c, d);
            ig.game.pointer = ig.game.getEntitiesByType(EntityPointer)[0];
            this.spriteSheet && this.spriteID && (this._POS = {
                x: this.pos.x,
                y: this.pos.y
            },
            this._SIZE = {
                x: _SPRITESHEETS_DATA[this.spriteSheet].texture[this.spriteID].w,
                y: _SPRITESHEETS_DATA[this.spriteSheet].texture[this.spriteID].h
            });
            this.updatePosSize()
        },
        idle: function() {
            ig.game.pointer.hoveringItem === this && (ig.game.pointer.hoveringItem = !1);
            this.clicking = ig.game.pointer.firstClick = !1
        },
        clicked: function() {
            this.locked || (this.clicking = !0)
        },
        released: function() {
            if (!this.locked && (this.clicking = !1,
            !(this instanceof EntityPowerup || this instanceof EntityButtonMoreGames)))
                try {
                    ig.soundHandler.playSound(ig.soundHandler.SOUNDID.buttonSound)
                } catch (b) {
                    console.log(b)
                }
        },
        updatePosSize: function() {
            this.clicking ? (this.scale.x = (this.scale.x + 0.01).limit(this.minScale.x, this.maxScale.x),
            this.scale.y = (this.scale.y + 0.01).limit(this.minScale.y, this.maxScale.y)) : (this.scale.x = (this.scale.x - 0.01).limit(this.minScale.x, this.maxScale.x),
            this.scale.y = (this.scale.y - 0.01).limit(this.minScale.y, this.maxScale.y));
            this._POS.x = this.pos.x + this.anchor.x * this.size.x;
            this._POS.y = this.pos.y + this.anchor.y * this.size.y;
            this.size.x = this.scale.x * this._SIZE.x;
            this.size.y = this.scale.y * this._SIZE.y;
            this.pos.x = this._POS.x - this.anchor.x * this.size.x;
            this.pos.y = this._POS.y - this.anchor.y * this.size.y
        },
        draw: function() {
            this.updatePosSize();
            this.spriteSheet && this.spriteID && ig.game.spriteSheets[this.spriteSheet] && ig.system.context.drawImage(ig.game.spriteSheets[this.spriteSheet].data, _SPRITESHEETS_DATA[this.spriteSheet].texture[this.spriteID].x, _SPRITESHEETS_DATA[this.spriteSheet].texture[this.spriteID].y, _SPRITESHEETS_DATA[this.spriteSheet].texture[this.spriteID].w, _SPRITESHEETS_DATA[this.spriteSheet].texture[this.spriteID].h, this.pos.x, this.pos.y, this.size.x, this.size.y)
        }
    });
    EntityButtonStart = EntityButton.extend({
        spriteSheet: "GUI",
        spriteID: "start-button",
        released: function() {
            this.parent();
            this.locked || (ig.game.win = !1,
            ig.game.round = 1,
            ig.game.score = 0,
            ig.game.totalScore = 0,
            this.control.demoTween.stop(),
            this.control.lockButtons(),
            ig.game.director.jumpTo(LevelBattle),
            ig.game.demo = !1)
        }
    });
    EntityButtonSFX = EntityButton.extend({
        spriteSheet: "GUI",
        spriteID: "sfx-button-on",
        init: function(b, c, d) {
            this.parent(b, c, d);
            this.updateSprite()
        },
        updateSprite: function() {
            this.spriteID = ig.game.playerStats.sfxMuted ? "sfx-button-off" : "sfx-button-on";
            ig.game.playerStats.sfxMuted ? (ig.soundHandler._muteSounds(),
            ig.soundHandler.setForceMuted(!0)) : (ig.soundHandler._unMuteSounds(),
            ig.soundHandler.setForceMuted(!1))
        },
        released: function() {
            this.parent();
            this.locked || (ig.game.playerStats.sfxMuted = !ig.game.playerStats.sfxMuted,
            ig.game.savePlayerStats(),
            this.updateSprite())
        }
    });
    EntityButtonBGM = EntityButton.extend({
        spriteSheet: "GUI",
        spriteID: "bgm-button-on",
        init: function(b, c, d) {
            this.parent(b, c, d);
            this.updateSprite()
        },
        updateSprite: function() {
            this.spriteID = ig.game.playerStats.bgmMuted ? "bgm-button-off" : "bgm-button-on";
            ig.game.playerStats.bgmMuted ? (ig.soundHandler._muteBackgroundMusic(),
            ig.soundHandler.setForceMuted(!0)) : (ig.soundHandler._unMuteBackgroundMusic(),
            ig.soundHandler.setForceMuted(!1))
        },
        released: function() {
            this.parent();
            this.locked || (ig.game.playerStats.bgmMuted = !ig.game.playerStats.bgmMuted,
            ig.game.savePlayerStats(),
            this.updateSprite())
        }
    });
    EntityButtonMainMenu = EntityButton.extend({
        spriteSheet: "GUI",
        spriteID: "main-menu-button",
        released: function() {
            this.parent();
            this.locked || (ig.game.win = !1,
            ig.game.round = 1,
            ig.game.score = 0,
            ig.game.totalScore = 0,
            ig.game.director.jumpTo(LevelStart),
            this.control.lockButtons())
        }
    });
    EntityButtonRetry = EntityButton.extend({
        spriteSheet: "GUI",
        spriteID: "retry-button",
        released: function() {
            this.parent();
            this.locked || (ig.game.win = !1,
            ig.game.round = 1,
            ig.game.score = 0,
            ig.game.totalScore = 0,
            this.control.lockButtons(),
            ig.game.director.jumpTo(LevelBattle),
            ig.game.demo = !1)
        }
    });
    EntityButtonNext = EntityButton.extend({
        spriteSheet: "GUI",
        spriteID: "next-button",
        released: function() {
            this.parent();
            this.locked || (ig.game.score = 0,
            ig.game.win ? ig.game.round < ig.game.maxRound ? (ig.game.win = !1,
            ig.game.round++,
            ig.game.director.jumpTo(LevelBattle),
            ig.game.demo = !1) : ig.game.director.jumpTo(LevelResult) : ig.game.director.jumpTo(LevelResult))
        }
    })});
ig.module("game.entities.button-more-games")
  .requires("impact.entity", "game.entities.button")
  .defines(function() {
    EntityButtonMoreGames = EntityButton.extend({
        gravityFactor: 0,
        spriteSheet: "btn_more_games",
        spriteID: "btn_more_games",
        zIndex: 750,
        scale: {
            x: 1.125,
            y: 0.125
        },
        minScale: {
            x: 0.9,
            y: 0.9
        },
        maxScale: {
            x: 1.125,
            y: 1.125
        },
        anchor: {
            x: 0.5,
            y: 0.5
        },
        init: function(b, c, d) {
            this.parent(b, c, d);
            "undefined" == typeof wm && (_SETTINGS.MoreGames.Enabled ? (d.div_layer_name ? (console.log("settings found ... using that this.div layer name"),
            this.div_layer_name = d.div_layer_name) : this.div_layer_name = "more-games",
            console.log("this.div_layer_name:", this.div_layer_name),
            this.checkClickableLayer(this.div_layer_name, _SETTINGS.MoreGames.Link, _SETTINGS.MoreGames.NewWindow)) : this.kill(),
            this.startTween())
        },
        stopTween: function() {
            this.stoppedTweening || (this.shrinkTween1 && this.shrinkTween1.stop(),
            this.expandTween1 && this.expandTween1.stop(),
            this.shrinkTween2 && this.shrinkTween2.stop(),
            this.expandTween2 && this.expandTween2.stop(),
            this.shrinkTween3 && this.shrinkTween3.stop(),
            this.expandTween3 && this.expandTween3.stop(),
            this.stoppedTweening = !0,
            this.startedTweening = !1)
        },
        startTween: function() {
            this.startedTweening || (this.shrinkTween1 = this.tween({
                scale: {
                    x: this.minScale.x - 0.1 + 0.1 * Math.random(),
                    y: this.minScale.y - 0.1 + 0.1 * Math.random()
                }
            }, 0.5),
            this.expandTween1 = this.tween({
                scale: {
                    x: this.minScale.x - 0.1 + 0.1 * Math.random(),
                    y: this.minScale.y - 0.1 + 0.1 * Math.random()
                }
            }, 2.5 / 6),
            this.shrinkTween2 = this.tween({
                scale: {
                    x: this.scale.x - 0.1 + 0.1 * Math.random(),
                    y: this.scale.y - 0.1 + 0.1 * Math.random()
                }
            }, 2 / 6),
            this.expandTween2 = this.tween({
                scale: {
                    x: this.scale.x - 0.1 + 0.1 * Math.random(),
                    y: this.scale.y - 0.1 + 0.1 * Math.random()
                }
            }, 0.25),
            this.shrinkTween3 = this.tween({
                scale: {
                    x: this.maxScale.x - 0.1 + 0.1 * Math.random(),
                    y: this.maxScale.y - 0.1 + 0.1 * Math.random()
                }
            }, 1 / 6),
            this.expandTween3 = this.tween({
                scale: {
                    x: this.maxScale.x - 0.1 + 0.1 * Math.random(),
                    y: this.maxScale.y - 0.1 + 0.1 * Math.random()
                }
            }, 0.5 / 6),
            this.shrinkTween1.chain(this.expandTween1),
            this.expandTween1.chain(this.shrinkTween2),
            this.shrinkTween2.chain(this.expandTween2),
            this.expandTween2.chain(this.shrinkTween3),
            this.shrinkTween3.chain(this.expandTween3),
            this.expandTween3.chain(this.shrinkTween1),
            this.shrinkTween1.start(),
            this.startedTweening = !0,
            this.stoppedTweening = !1)
        },
        doesClickableLayerExist: function(b) {
            for (k in dynamicClickableEntityDivs)
                if (k == b)
                    return console.log("clickable layer already exists ..."),
                    !0;
            console.log("doesnt exist yet ...");
            return !1
        },
        checkClickableLayer: function(b, c, d) {
            "undefined" == typeof wm && (this.divID = b,
            this.doesClickableLayerExist(this.divID) ? (ig.game.showOverlay([this.divID]),
            $("#" + this.divID).find("[href]").attr("href", c)) : this.createClickableOutboundLayer(this.divID, c, "media/graphics/misc/invisible.png", d))
        },
        updatePosSize: function() {
            this.clicking ? (this.stopTween(),
            this.scale.x = (this.scale.x + 0.1).limit(this.minScale.x, this.maxScale.x),
            this.scale.y = (this.scale.y + 0.1).limit(this.minScale.y, this.maxScale.y)) : (this.scale.x = (this.scale.x - 0.05).limit(this.minScale.x, this.maxScale.x),
            this.scale.y = (this.scale.y - 0.05).limit(this.minScale.y, this.maxScale.y),
            this.scale.x === this.minScale.x && this.scale.y === this.minScale.y && this.startTween());
            this._POS.x = this.pos.x + this.anchor.x * this.size.x;
            this._POS.y = this.pos.y + this.anchor.y * this.size.y;
            this.size.x = this.scale.x * this._SIZE.x;
            this.size.y = this.scale.y * this._SIZE.y;
            this.pos.x = this._POS.x - this.anchor.x * this.size.x;
            this.pos.y = this._POS.y - this.anchor.y * this.size.y;
            this._PREVIOUS && this.pos.x !== this._PREVIOUS.pos.x && (this.pos.y !== this._PREVIOUS.pos.y && this.size.x !== this._PREVIOUS.size.x && this.size.y !== this._PREVIOUS.size.y) && this.updateCSS();
            this._PREVIOUS = {
                size: {
                    x: this.size.x,
                    y: this.size.y
                },
                pos: {
                    x: this.pos.x,
                    y: this.pos.y
                }
            }
        },
        updateCSS: function() {
            if (this.div)
                if ($("#" + this.div.id).css("float", "left"),
                $("#" + this.div.id).css("position", "absolute"),
                ig.ua.mobile) {
                    var b = window.innerHeight / mobileHeight
                      , c = window.innerWidth / mobileWidth;
                    $("#" + this.div.id).css("left", this.pos.x * c);
                    $("#" + this.div.id).css("top", this.pos.y * b);
                    $("#" + this.div.id).css("width", this.size.x * c);
                    $("#" + this.div.id).css("height", this.size.y * b)
                } else
                    b = document.getElementById("game").offsetLeft,
                    c = document.getElementById("game").offsetTop,
                    $("#" + this.div.id).css("left", b + this.pos.x * multiplier),
                    $("#" + this.div.id).css("top", c + this.pos.y * multiplier),
                    $("#" + this.div.id).css("width", this.size.x * multiplier),
                    $("#" + this.div.id).css("height", this.size.y * multiplier)
        },
        addEventListeners: function() {
            this.div.addEventListener("mousedown", ig.input.keydown.bind(ig.input), !1);
            this.div.addEventListener("mouseup", ig.input.keyup.bind(ig.input), !1);
            this.div.addEventListener("mousemove", ig.input.mousemove.bind(ig.input), !1)
        },
        createClickableOutboundLayer: function(b, c, d, f) {
            this.div = ig.$new("div");
            this.div.id = b;
            document.body.appendChild(this.div);
            this.addEventListeners();
            this.updateCSS();
            f ? $("#" + this.div.id).html("<a target='_blank' href='" + c + "'><img style='width:100%;height:100%' src='" + d + "'></a>") : $("#" + this.div.id).html("<a href='" + c + "'><img style='width:100%;height:100%' src='" + d + "'></a>");
            dynamicClickableEntityDivs[b] = this
        }
    })});
ig.module("game.entities.opening-kitty")
  .requires("impact.entity")
  .defines(function() {
    EntityOpeningKitty = ig.Entity.extend({
        size: {
            x: 48,
            y: 48
        },
        kittyAnim: -1,
        kittyImage: new ig.Image("media/graphics/opening/kitty.png"),
        kittyTitleImage: new ig.Image("media/graphics/opening/kittytitle.png"),
        init: function(b, c, d) {
            this.parent(b, c, d)
        },
        ready: function() {
            if (!ig.wm)
                if (_SETTINGS.DeveloperBranding.Splash.Enabled) {
                    this.initTimer = new ig.Timer(0.1);
                    try {
                        // ig.soundHandler.playSound(
                        // 	ig.soundHandler.SOUNDID.kittyopeningSound
                        // )
                    } catch (b) {
                        console.log(b)
                    }
                } else
                    ig.game.director.nextLevel(),
                    ig.system.context.globalAlpha = 1,
                    this.kill()
        },
        update: function() {
            this.parent();
            this.updateKittyOpening()
        },
        draw: function() {
            this.parent();
            ig.global.wm || (this.nextLevelTimer 
            				 && 0 > this.nextLevelTimer.delta() 
            				 && (ig.system.context.globalAlpha = 
            				 	 -this.nextLevelTimer.delta())
            				 	 , this.drawKittyOpening())
        },
        updateKittyOpening: function() {
            this.initTimer 
            && 0 < this.initTimer.delta() 
            && (this.initTimer = null
            	, this.kittyTimer = new ig.Timer(0));

            this.kittyTimer 
            && 0 < this.kittyTimer.delta() 
            && (7 > this.kittyAnim ? 
            	(this.kittyAnim++, this.kittyTimer.reset()) 
            : (this.kittyTimer = null
            	, this.nextLevelTimer = new ig.Timer(0.1)
            ));
            
            this.nextLevelTimer 
            && 0 < this.nextLevelTimer.delta() 
            && (this.nextLevelTimer = null
                , ig.game.director.nextLevel()
                , ig.system.context.globalAlpha = 1)
        },
        drawKittyOpening: function() {
            var b = ig.system.context.createLinearGradient(0, 0, 0, ig.system.height);
            b.addColorStop(0, "#ffed94");
            b.addColorStop(1, "#ffcd85");
            ig.system.context.fillStyle = b;
            ig.system.context.fillRect(0, 0, ig.system.width, ig.system.height);
            // 0 <= this.kittyAnim 
            // && (this.kittyImage
            // 			.drawTile(ig.system.width / 2 - this.kittyImage.width / 8
				        //     , ig.system.height / 2 - this.kittyImage.height / 4
				        //     , this.kittyAnim, 218, 325
				        //   )
	           //  , this.kittyTitleImage
	           //  		.drawTile(ig.system.width / 2 - this.kittyTitleImage.width / 2
				        //     , ig.system.height / 2 + this.kittyImage.height / 4 + 10
				        //     , this.kittyAnim, 380, 37
				        //   )
	           //  );
            ig.system.context.globalAlpha = 1
        }
    })});
ig.module("game.entities.pointer")
  .requires("impact.entity")
  .defines(function() {
    EntityPointer = ig.Entity.extend({
        type: ig.Entity.TYPE.A,
        checkAgainst: ig.Entity.TYPE.B,
        isClicking: !1,
        isHovering: !1,
        firstClick: !1,
        isReleased: !1,
        hoveringItem: null,
        objectArray: [],
        ignorePause: !0,
        zIndex: 5E3,
        check: function(b) {
            this.objectArray.push(b)
        },
        clickObject: function(b) {
            this.isClicking && !this.firstClick && "function" == typeof b.clicked && (b.clicked(),
            this.firstClick = !0);
            this.firstClick && !this.isReleased && "function" == typeof b.clicking && b.clicking();
            this.firstClick && this.isReleased && "function" == typeof b.released && (b.released(),
            this.firstClick = !1)
        },
        update: function() {
            if (ig.ua.mobile) {
                var b = window.innerHeight / mobileHeight;
                this.pos.x = ig.game.screen.x + ig.input.mouse.x / (window.innerWidth / mobileWidth) - this.size.x / 2;
                this.pos.y = ig.game.screen.y + ig.input.mouse.y / b - this.size.y / 2
            } else
                this.pos.x = ig.game.screen.x + ig.input.mouse.x - this.size.x / 2,
                this.pos.y = ig.game.screen.y + ig.input.mouse.y - this.size.y / 2;
            var b = null
              , c = -1;
            for (a = this.objectArray.length - 1; -1 < a; a--)
                this.objectArray[a].zIndex > c && (c = this.objectArray[a].zIndex,
                b = this.objectArray[a]);
            if (null != b)
                "close" == b.name && console.log(b),
                null != this.hoveringItem && "function" == typeof this.hoveringItem.idle && this.hoveringItem != b && this.hoveringItem.idle(),
                this.hoveringItem = b,
                this.clickObject(b),
                this.objectArray = [];
            else if (
            	null != this.hoveringItem 
            	&& "function" == typeof this.hoveringItem.idle 
            	&& (this.hoveringItem.idle(),
	            this.hoveringItem = null),
	            b = this.pos.x + 0.5 * this.size.x,
	            c = ig.game.getEntityByName("player")
	        )
                this.isClicking && (b < ig.system.width / 3 ? 
                	c.punch("left") : 
                	b > 2 * ig.system.width / 3 ? c.punch("right") : c.block()),
                ig.input.state("click") && b >= ig.system.width / 3 && b <= 2 * ig.system.width / 3 && c.block(),
                this.isReleased && c.unblock();
            this.isClicking = ig.input.pressed("click");
            this.isReleased = ig.input.released("click")
        }
    })});
ig.module("game.entities.pointer-selector")
  .requires("game.entities.pointer")
  .defines(function() {
    EntityPointerSelector = EntityPointer.extend({
        zIndex: 1E3,
        _wmDrawBox: !0,
        _wmBoxColor: "rgba(0, 0, 255, 0.7)",
        size: {
            x: 20,
            y: 20
        },
        init: function(b, c, d) {
            if (!ig.global.wm)
                for (; ig.game.getEntitiesByType(EntityPointer).length; )
                    ig.game.getEntitiesByType(EntityPointer)[0].kill();
            this.parent(b, c, d);
            ig.game.pointer = this
        }
    })});
ig.module("game.entities.select")
  .requires("impact.entity")
  .defines(function() {
    EntitySelect = ig.Entity.extend({
        type: ig.Entity.TYPE.B,
        checkAgainst: ig.Entity.TYPE.A,
        collides: ig.Entity.COLLIDES.NEVER,
        canSelect: !1,
        canSelectTimerDuration: 0.35,
        zIndex: 99999,
        isHovering: !1,
        isSelected: !1,
        init: function(b, c, d) {
            this.parent(b, c, d);
            this.canSelectTimer = new ig.Timer(this.canSelectTimerDuration)
        },
        doesClickableLayerExist: function(b) {
            for (k in dynamicClickableEntityDivs)
                if (k == b)
                    return !0;
            return !1
        },
        checkClickableLayer: function(b, c, d) {
            "undefined" == typeof wm && (this.doesClickableLayerExist(b) ? (ig.game.showOverlay([b]),
            $("#" + b).find("[href]").attr("href", c)) : this.createClickableOutboundLayer(b, c, "media/graphics/misc/invisible.png", d))
        },
        createClickableOutboundLayer: function(b, c, d, f) {
            var g = ig.$new("div");
            g.id = b;
            document.body.appendChild(g);
            $("#" + g.id).css("float", "left");
            $("#" + g.id).css("width", this.size.x * multiplier);
            $("#" + g.id).css("height", this.size.y * multiplier);
            $("#" + g.id).css("position", "absolute");
            var p = w / 2 - destW / 2
              , x = h / 2 - destH / 2;
            w == mobileWidth ? ($("#" + g.id).css("left", this.pos.x),
            $("#" + g.id).css("top", this.pos.y)) : ($("#" + g.id).css("left", p + this.pos.x * multiplier),
            $("#" + g.id).css("top", x + this.pos.y * multiplier));
            f ? $("#" + g.id).html("<a target='_blank' href='" + c + "'><img style='width:100%;height:100%' src='" + d + "'></a>") : $("#" + g.id).html("<a href='" + c + "'><img style='width:100%;height:100%' src='" + d + "'></a>");
            dynamicClickableEntityDivs[b] = {};
            dynamicClickableEntityDivs[b].width = $("#" + g.id).width();
            dynamicClickableEntityDivs[b].height = $("#" + g.id).height();
            dynamicClickableEntityDivs[b].entity_pos_x = this.pos.x;
            dynamicClickableEntityDivs[b].entity_pos_y = this.pos.y
        },
        hovered: function() {
            this.isHovering = !0;
            this.dehoverOthers()
        },
        dehoverOthers: function() {
            var b = ig.game.getEntitiesByType(EntitySelect);
            for (i = 0; i < b.length; i++)
                b[i] != this && (b[i].isHovering = !1)
        },
        deselectOthers: function() {
            var b = ig.game.getEntitiesByType(EntitySelect);
            for (i = 0; i < b.length; i++)
                b[i] != this && (b[i].isSelected = !1)
        },
        update: function() {
            this.parent();
            this.canSelectTimer && 0 < this.canSelectTimer.delta() && (this.canSelect = !0,
            this.canSelectTimer = null)
        }
    })});
ig.module("game.levels.opening")
  .requires("impact.image", "game.entities.opening-kitty")
  .defines(function() {
    LevelOpening = {
        entities: [{
            type: "EntityOpeningKitty",
            x: 520,
            y: 212
        }],
        layer: []
    }});
ig.module("game.entities.start-control")
  .requires("impact.entity", "game.entities.button", "game.entities.button-more-games")
  .defines(function() {
    EntityStartControl = ig.Entity.extend({
        gravityFactor: 0,
        layers: [{
            image: new ig.Image("media/graphics/sprites/start_menu/audience.png"),
            pos: {
                x: 233,
                y: 244
            }
        }, {
            image: new ig.Image("media/graphics/sprites/start_menu/ring.png"),
            pos: {
                x: 240,
                y: 464
            }
        }, {
            image: new ig.Image("media/graphics/sprites/start_menu/enemy.png"),
            pos: {
                x: 229,
                y: 446
            }
        }, {
            image: new ig.Image("media/graphics/sprites/start_menu/player.png"),
            pos: {
                x: 128,
                y: 479
            }
        }],
        foreground: new ig.Image("media/graphics/sprites/start_menu/foreground.png"),
        title: {
            image: new ig.Image("media/graphics/sprites/start_menu/title.png"),
            pos: {
                x: 246,
                y: 132
            },
            scale: {
                x: 2,
                y: 2
            },
            alpha: 0.25,
            visible: !1
        },
        screenOffset: {
            x: 0,
            y: 0
        },
        screenTweening: !1,
        demoTimeOut: 10,
        init: function(b, c, d) {
            this.parent(b, c, d);
            ig.global.wm || (ig.game.pointer = ig.game.getEntitiesByType(EntityPointer)[0],
            this.startTween(),
            ig.game.sortEntitiesDeferred(),
            this.demoTween = this.tween({}, this.demoTimeOut, {
                onComplete: function() {
                    ig.game.demo = !0;
                    ig.game.round = (Math.random() * ig.game.maxRound).ceil();
                    ig.game.director.jumpTo(LevelBattle)
                }
            }),
            this.demoTween.start())
        },
        startTween: function() {
            this.screenTweening = !0;
            try {
                ig.soundHandler.playSound(ig.soundHandler.SOUNDID.cheerSound)
            } catch (b) {
                console.log(b)
            }
            this.rotateY = 0.5 <= Math.random() ? 90 : -90;
            this.screenTween = this.tween({
                rotateY: 0,
                screenOffset: {
                    y: ig.system.height
                }
            }, 1.25, {
                easing: ig.Tween.Easing.Cubic.EaseOut,
                onComplete: function() {
                    this.screenTweening = !1
                }
                .bind(this)
            });
            this.titleTween1 = this.tween({}, 0.5, {
                easing: ig.Tween.Easing.Cubic.EaseOut,
                onComplete: function() {
                    this.title.visible = !0
                }
                .bind(this)
            });
            this.titleTween2 = this.tween({
                title: {
                    scale: {
                        x: 1,
                        y: 1
                    },
                    alpha: 1
                }
            }, 0.5, {
                easing: ig.Tween.Easing.Cubic.EaseOut,
                onComplete: function() {
                    this.spawnButtons()
                }
                .bind(this)
            });
            this.titleTween3 = this.tween({
                title: {
                    scale: {
                        x: 1.1,
                        y: 1.1
                    }
                }
            }, 6);
            this.titleTween4 = this.tween({
                title: {
                    scale: {
                        x: 1,
                        y: 1
                    }
                }
            }, 3);
            this.generateParticles(32);
            this.screenTween.start();
            this.titleTween1.chain(this.titleTween2);
            this.titleTween2.chain(this.titleTween3);
            this.titleTween3.chain(this.titleTween4);
            this.titleTween4.chain(this.titleTween3);
            this.titleTween1.start();
            this.enemyLayer = this.layers[2];
            this.playerLayer = this.layers[3];
            this.enemyTween1 = this.tween({
                enemyLayer: {
                    pos: {
                        y: this.enemyLayer.pos.y + 12
                    }
                }
            }, 0.6, {
                delay: 0.7
            });
            this.enemyTween2 = this.tween({
                enemyLayer: {
                    pos: {
                        y: this.enemyLayer.pos.y
                    }
                }
            }, 0.8);
            this.enemyTween1.chain(this.enemyTween2);
            this.enemyTween2.chain(this.enemyTween1);
            this.enemyTween1.start();
            this.playerTween1 = this.tween({
                playerLayer: {
                    pos: {
                        y: this.playerLayer.pos.y + 10
                    }
                }
            }, 0.4, {
                delay: 0.5
            });
            this.playerTween2 = this.tween({
                playerLayer: {
                    pos: {
                        y: this.playerLayer.pos.y
                    }
                }
            }, 0.6);
            this.playerTween1.chain(this.playerTween2);
            this.playerTween2.chain(this.playerTween1);
            this.playerTween1.start()
        },
        spawnButtons: function() {
            this.buttons || (this.buttons = []);
            this.buttons.push(ig.game.spawnEntity(EntityButtonStart, 0.49 * ig.system.width, 0.65 * ig.system.height, {
                control: this,
                scale: {
                    x: 1.2,
                    y: 1.2
                }
            }));
            this.buttons.push(ig.game.spawnEntity(EntityButtonSFX, 0.49 * ig.system.width, 0.77 * ig.system.height, {
                control: this,
                scale: {
                    x: 1.1,
                    y: 1.1
                },
                maxScale: {
                    x: 1.1,
                    y: 1.1
                }
            }));
            _SETTINGS.MoreGames.Enabled && ig.game.spawnEntity(EntityButtonMoreGames, 0.485 * ig.system.width, 0.9 * ig.system.height);
            this.unlockButtons()
        },
        lockButtons: function() {
            if (this.buttons && this.buttons.length)
                for (var b = 0; b < this.buttons.length; b++)
                    this.buttons[b].locked = !0
        },
        unlockButtons: function() {
            if (this.buttons && this.buttons.length)
                for (var b = 0; b < this.buttons.length; b++)
                    this.buttons[b].locked = !1
        },
        update: function() {
            this.parent();
            ig.global.wm || (this.screenTweening && (isNaN(this.rotateX) && (this.rotateX = 0),
            isNaN(this.rotateY) && (this.rotateY = 0),
            isNaN(this.rotateZ) && (this.rotateZ = 0),
            ig.system.canvas.style["-webkit-transform"] = "rotateX(" + this.rotateX + "deg) rotateY(" + this.rotateY + "deg)  rotateZ(" + this.rotateZ + "deg)",
            ig.system.canvas.style.transform = "rotateX(" + this.rotateX + "deg) rotateY(" + this.rotateY + "deg)  rotateZ(" + this.rotateZ + "deg)"),
            ig.input.released("click") && this.demoTween.stop())
        },
        generateParticles: function(b) {
            this.particles = [];
            this.particles.length = 3;
            for (var c = 0; c < this.particles.length; c++) {
                this.particles[c] = [];
                this.particles[c].length = Math.round(b * (c + 1) / 6);
                for (var d = 0; d < this.particles[c].length; d++)
                    this.particles[c][d] = {
                        pos: {
                            x: Math.random() * ig.system.width,
                            y: Math.random() * ig.system.height
                        },
                        rgba: {
                            r: Math.round(15 * Math.random() + 240),
                            g: Math.round(30 * Math.random() + 120),
                            b: Math.round(60 * Math.random() + 0),
                            a: 0.05 + 0.05 * Math.random()
                        },
                        radius: 1.5 * Math.random() + 1.5,
                        speed: 1.5 * Math.random() + 1.5,
                        angle: 0
                    }
            }
        },
        drawParticles: function(b) {
            if (this.particles && 0 <= b && b <= this.particles.length && this.particles[b].length) {
                ig.system.context.globalCompositeOperation = b % 2 ? "lighter" : "darken";
                for (var c = 0; c < this.particles[b].length; c++) {
                    var d = this.particles[b][c];
                    d.angle += 0.01 * Math.random();
                    d.pos.y -= Math.cos(d.angle + d.speed) + 1 + d.radius / 2;
                    d.pos.x -= 2 * Math.sin(d.angle);
                    if (0 >= d.rgba.a || 0 >= d.radius || d.pos.y < -d.radius)
                        d.rgba.r = Math.round(15 * Math.random() + 240),
                        d.rgba.g = Math.round(30 * Math.random() + 120),
                        d.rgba.b = Math.round(60 * Math.random() + 0),
                        d.rgba.a = 0.05 + 0.05 * Math.random(),
                        d.speed = 1.5 * Math.random() + 1.5,
                        d.radius = 1.5 * Math.random() + 1.5,
                        d.pos.x = Math.random() * ig.system.width,
                        d.pos.y = ig.system.height + d.radius;
                    ig.system.context.beginPath();
                    ig.system.context.fillStyle = "rgba(" + d.rgba.r + ", " + d.rgba.g + ", " + d.rgba.b + ", " + d.rgba.a + ")";
                    ig.system.context.moveTo(d.pos.x, d.pos.y);
                    ig.system.context.arc(d.pos.x, d.pos.y, d.radius, 0, 2 * Math.PI, !0);
                    ig.system.context.fill()
                }
                ig.system.context.globalCompositeOperation = "source-over"
            }
        },
        draw: function() {
            this.parent();
            if (!ig.global.wm) {
                ig.system.context.fillStyle = "#161621";
                ig.system.context.fillRect(0, 0, ig.system.width, ig.system.height);
                this.drawParticles(0);
                for (var b = 0; b < this.layers.length; b++) {
                    var c = 0
                      , d = 0
                      , c = this.screenOffset.x
                      , c = c * (2.5 * (b + 1) / (this.layers.length + 1));
                    2 > b && (c = 0);
                    d = ig.system.height - this.screenOffset.y;
                    d *= 2.5 * (b + 1) / (this.layers.length + 1);
                    this.layers[b].image.draw(c + this.layers[b].pos.x - 0.5 * this.layers[b].image.width, d + this.layers[b].pos.y - 0.5 * this.layers[b].image.height)
                }
                this.drawParticles(1);
                this.title && this.title.visible && (ig.system.context.save(),
                ig.system.context.globalAlpha = this.title.alpha.limit(0, 1),
                this.foreground.draw(0, ig.system.height - this.foreground.height),
                ig.system.context.translate(this.title.pos.x, this.title.pos.y),
                ig.system.context.drawImage(this.title.image.data, -0.5 * this.title.scale.x * this.title.image.width, -0.5 * this.title.scale.y * this.title.image.height, this.title.scale.x * this.title.image.width, this.title.scale.y * this.title.image.height),
                ig.system.context.restore());
                this.drawParticles(2)
            }
        }
    })});
ig.module("game.levels.start")
  .requires("impact.image", "game.entities.start-control", "game.entities.pointer-selector")
  .defines(function() {
    LevelStart = {
        entities: [{
            type: "EntityStartControl",
            x: -50,
            y: -50
        }, {
            type: "EntityPointerSelector",
            x: 0,
            y: 0
        }],
        layer: []
    }});
ig.module("game.entities.gui")
  .requires("impact.entity")
  .defines(function() {
    EntityGui = ig.Entity.extend({
        gravityFactor: 0,
        zIndex: 100,
        tutorialAlpha: 0,
        hintScale: {
            x: 1,
            y: 1
        },
        score: {
            spriteSheet: "GUI",
            spriteID: "your-score",
            buffer: null,
            scale: {
                x: 1,
                y: 1
            }
        },
        timeout: {
            spriteSheet: "GUI",
            spriteID: "timeout",
            _DELAY: 1,
            _DURATION: 3,
            timer: null
        },
        init: function(b, c, d) {
            this.parent(b, c, d)
        },
        initTutorial: function() {
            1 < ig.game.round ? this.hideTutorial() : this.showTutorial()
        },
        startTimeout: function() {
            this.timeout.timer || (this.timeout.timer = new ig.Timer(this.timeout._DURATION + this.timeout._DELAY))
        },
        stopTimeout: function() {
            this.timeout.timer && (this.timeout.timer = null)
        },
        showScore: function(b) {
            this.score.buffer = 0;
            this.scoreTween1 = this.tween({
                score: {
                    buffer: b
                }
            }, 0.3, {
                onComplete: function() {
                    this.score.buffer = b
                }
                .bind(this)
            });
            this.scoreTween2 = this.tween({
                score: {
                    scale: {
                        x: 0.93,
                        y: 1.04
                    }
                }
            }, 0.05);
            this.scoreTween3 = this.tween({
                score: {
                    scale: {
                        x: 1.05,
                        y: 0.72
                    }
                }
            }, 0.075);
            this.scoreTween4 = this.tween({
                score: {
                    scale: {
                        x: 0.88,
                        y: 1.06
                    }
                }
            }, 0.075);
            this.scoreTween5 = this.tween({
                score: {
                    scale: {
                        x: 1,
                        y: 1
                    }
                }
            }, 0.05);
            this.scoreTween2.chain(this.scoreTween3);
            this.scoreTween3.chain(this.scoreTween4);
            this.scoreTween4.chain(this.scoreTween5);
            this.scoreTween1.start();
            this.scoreTween2.start()
        },
        showTutorial: function() {
            this.tutorialTween1 = this.tween({
                tutorialAlpha: 0.8,
                hintScale: {
                    x: 0.95,
                    y: 0.95
                }
            }, 0.5);
            this.tutorialTween2 = this.tween({
                tutorialAlpha: 1,
                hintScale: {
                    x: 1,
                    y: 1
                }
            }, 0.25);
            this.tutorialTween3 = this.tween({
                tutorialAlpha: 0.9,
                hintScale: {
                    x: 0.9,
                    y: 0.9
                }
            }, 0.125);
            this.tutorialTween4 = this.tween({
                tutorialAlpha: 1,
                hintScale: {
                    x: 1,
                    y: 1
                }
            }, 0.25);
            this.tutorialTween5 = this.tween({
                tutorialAlpha: 1,
                hintScale: {
                    x: 1,
                    y: 1
                }
            }, 0.5);
            this.tutorialTween1.chain(this.tutorialTween2);
            this.tutorialTween2.chain(this.tutorialTween3);
            this.tutorialTween3.chain(this.tutorialTween4);
            this.tutorialTween4.chain(this.tutorialTween5);
            this.tutorialTween5.chain(this.tutorialTween1);
            this.tutorialTween1.start();
            this.hideTutorial(1, 10)
        },
        hideTutorial: function(b, c) {
            this.hiding || (0 <= b || (b = 0),
            0 <= c || (c = 0),
            this.tween({}, c, {
                onComplete: function() {
                    this.tutorialTween1 && this.tutorialTween1.stop();
                    this.tutorialTween1 = null;
                    this.tutorialTween2 && this.tutorialTween2.stop();
                    this.tutorialTween2 = null;
                    this.tutorialTween3 && this.tutorialTween3.stop();
                    this.tutorialTween3 = null;
                    this.tutorialTween4 && this.tutorialTween4.stop();
                    this.tutorialTween4 = null;
                    this.tutorialTween5 && this.tutorialTween5.stop();
                    this.tutorialTween5 = null;
                    this.hiding = !0;
                    this.hideTutorialTween || (this.hideTutorialTween = this.tween({
                        tutorialAlpha: 0.01
                    }, b, {
                        onComplete: function() {
                            ig.game.playerStats.playedTutorial = !0;
                            ig.game.savePlayerStats()
                        }
                        .bind(this)
                    }),
                    this.hideTutorialTween.start())
                }
                .bind(this)
            }).start())
        },
        update: function() {
            this.parent();
            this.timeout.timer ? 0 <= this.timeout.timer.delta() && (this.control.player.changeAnimation("breath"),
            this.control.player.canAction = !this.control.player.canAction,
            this.timeout.timer = this.control.player.canAction ? null : new ig.Timer(this.timeout._DURATION)) : this.control.player.canAction = !0
        },
        drawSprite: function(b, c, d, f, g, p) {
            b && c && ig.game.spriteSheets[b] && (g || (g = _SPRITESHEETS_DATA[b].texture[c].w),
            p || (p = _SPRITESHEETS_DATA[b].texture[c].h),
            ig.system.context.drawImage(ig.game.spriteSheets[b].data, _SPRITESHEETS_DATA[b].texture[c].x, _SPRITESHEETS_DATA[b].texture[c].y, _SPRITESHEETS_DATA[b].texture[c].w, _SPRITESHEETS_DATA[b].texture[c].h, d, f, g, p))
        },
        drawTweenText: function() {
            if (this.textSlot.length)
                for (var b = 0; b < this.textSlot.length; b++)
                    this.drawSprite("GUI", "number-set-" + this.textSlot[b].text, 0.5 * ig.system.width, 0.5 * ig.system.height)
        },
        drawScore: function(b, c, d) {
            for (var f = "", g = b.length - 1, p = 1; 0 <= g; g--,
            p++)
                f = b[g] + f,
                p && 0 === p % 3 && 0 < g && (f = "," + f);
            g = (this.score.buffer / ig.game.score).limit(0.01, 1);
            Math.round(this.score.buffer);
            0 >= ig.game.score && (g = 1);
            var p = _SPRITESHEETS_DATA[this.score.spriteSheet].texture[this.score.spriteID].w
              , x = _SPRITESHEETS_DATA[this.score.spriteSheet].texture[this.score.spriteID].h;
            this.drawSprite(this.score.spriteSheet, this.score.spriteID, c - 0.5 * p * g, d - 64.75 + x, p * g, x);
            f || (f = b.toString());
            for (g = 0; g < f.length; g++)
                p = _SPRITESHEETS_DATA[this.score.spriteSheet].texture["number-set-" + f[g]].w,
                x = _SPRITESHEETS_DATA[this.score.spriteSheet].texture["number-set-" + f[g]].h,
                this.drawSprite(this.score.spriteSheet, "number-set-" + f[g], c + 37 * (g - 0.5 * (f.length - 1)) - 0.5 * p, d + 46.25 - x, this.score.scale.x * p, this.score.scale.y * x)
        },
        draw: function() {
            this.parent();
            this.tutorialAlpha && (ig.system.context.globalAlpha = this.tutorialAlpha.limit(0, 1),
            this.drawSprite("GUI", "left-tap", 1 / 6 * ig.system.width - 0.5 * _SPRITESHEETS_DATA.GUI.texture["left-tap"].w * this.hintScale.x, 5 / 6 * ig.system.height - 0.5 * _SPRITESHEETS_DATA.GUI.texture["left-tap"].h * this.hintScale.y, _SPRITESHEETS_DATA.GUI.texture["left-tap"].w * this.hintScale.x, _SPRITESHEETS_DATA.GUI.texture["left-tap"].h * this.hintScale.y),
            this.drawSprite("GUI", "hold", 0.5 * ig.system.width - 0.5 * _SPRITESHEETS_DATA.GUI.texture.hold.w * this.hintScale.x, 5 / 6 * ig.system.height - 0 * _SPRITESHEETS_DATA.GUI.texture.hold.h * this.hintScale.y, _SPRITESHEETS_DATA.GUI.texture.hold.w * this.hintScale.x, _SPRITESHEETS_DATA.GUI.texture.hold.h * this.hintScale.y),
            this.drawSprite("GUI", "right-tap", 5 / 6 * ig.system.width - 0.5 * _SPRITESHEETS_DATA.GUI.texture["right-tap"].w * this.hintScale.x, 5 / 6 * ig.system.height - 0.5 * _SPRITESHEETS_DATA.GUI.texture["right-tap"].h * this.hintScale.y, _SPRITESHEETS_DATA.GUI.texture["right-tap"].w * this.hintScale.x, _SPRITESHEETS_DATA.GUI.texture["right-tap"].h * this.hintScale.y),
            ig.system.context.globalAlpha = 1);
            ig.system.context.font = "18px arial";
            ig.system.context.textAlign = "center";
            ig.system.context.textBaseline = "top";
            ig.system.context.fillStyle = "#666666";
            ig.system.context.fillText(_STRINGS.Game.Round + " " + ig.game.round, 0.5 * ig.system.width, 1 + 0.01 * ig.system.height);
            ig.system.context.fillStyle = "#FFFFFF";
            ig.system.context.fillText(_STRINGS.Game.Round + " " + ig.game.round, 0.5 * ig.system.width, 0.01 * ig.system.height);
            this.timerScale = ig.system.width / _SPRITESHEETS_DATA.GUI.texture.timer.w;
            this.timerData = {
                x: 0.5 * ig.system.width - 0.5 * this.timerScale * _SPRITESHEETS_DATA.GUI.texture.timer.w,
                y: 0.05 * ig.system.height,
                w: this.timerScale * _SPRITESHEETS_DATA.GUI.texture.timer.w,
                h: this.timerScale * _SPRITESHEETS_DATA.GUI.texture.timer.h
            };
            this.drawSprite("GUI", "timer", this.timerData.x, this.timerData.y, this.timerData.w, this.timerData.h);
            var b = (this.control.enemy.health / this.control.enemy.maxHealth).limit(0, 1)
              , c = (this.control.enemy.healthBuffer / this.control.enemy.maxHealth).limit(0, 1);
            this.enemyHealthBarData = {
                x: this.timerData.x + 0.578 * this.timerData.w,
                y: this.timerData.y + 0.25 * this.timerData.h,
                w: 0.39 * this.timerData.w,
                h: 0.48 * this.timerData.h
            };
            b && this.drawSprite("GUI", "hp01", this.enemyHealthBarData.x, this.enemyHealthBarData.y, this.enemyHealthBarData.w * b, this.enemyHealthBarData.h);
            c && ig.system.context.drawImage(ig.game.spriteSheets.GUI.data, _SPRITESHEETS_DATA.GUI.texture.hp02.x, _SPRITESHEETS_DATA.GUI.texture.hp02.y, _SPRITESHEETS_DATA.GUI.texture.hp02.w * c, _SPRITESHEETS_DATA.GUI.texture.hp02.h, this.enemyHealthBarData.x, this.enemyHealthBarData.y, this.enemyHealthBarData.w * c, this.enemyHealthBarData.h);
            b = (this.control.player.health / this.control.player.maxHealth).limit(0, 1);
            c = (this.control.player.healthBuffer / this.control.player.maxHealth).limit(0, 1);
            this.playerHealthBarData = {
                x: this.timerData.x + 0.026 * this.timerData.w,
                y: this.timerData.y + 0.25 * this.timerData.h,
                w: 0.39 * this.timerData.w,
                h: 0.48 * this.timerData.h
            };
            b && this.drawSprite("GUI", "hp03", this.playerHealthBarData.x + (1 - b) * this.playerHealthBarData.w, this.playerHealthBarData.y, this.playerHealthBarData.w * b, this.playerHealthBarData.h);
            c && ig.system.context.drawImage(ig.game.spriteSheets.GUI.data, _SPRITESHEETS_DATA.GUI.texture.hp04.x + (1 - c) * _SPRITESHEETS_DATA.GUI.texture.hp04.w, _SPRITESHEETS_DATA.GUI.texture.hp04.y, _SPRITESHEETS_DATA.GUI.texture.hp04.w * c, _SPRITESHEETS_DATA.GUI.texture.hp04.h, this.playerHealthBarData.x + (1 - c) * this.playerHealthBarData.w, this.playerHealthBarData.y, this.playerHealthBarData.w * c, this.playerHealthBarData.h);
            b = this.control.getGameTime();
            3 === b.length && (ig.system.context.font = "20px arial",
            ig.system.context.textAlign = "center",
            ig.system.context.textBaseline = "top",
            ig.system.context.fillStyle = "#666666",
            ig.system.context.fillText(b[0], this.timerData.x + 0.45 * this.timerData.w, 1 + this.timerData.y + 0.075 * this.timerData.h),
            ig.system.context.fillText(b[1], this.timerData.x + 0.51 * this.timerData.w, 1 + this.timerData.y + 0.075 * this.timerData.h),
            ig.system.context.fillText(b[2], this.timerData.x + 0.545 * this.timerData.w, 1 + this.timerData.y + 0.075 * this.timerData.h),
            ig.system.context.fillStyle = "#FFFFFF",
            ig.system.context.fillText(b[0], this.timerData.x + 0.45 * this.timerData.w, this.timerData.y + 0.075 * this.timerData.h),
            ig.system.context.fillText(b[1], this.timerData.x + 0.51 * this.timerData.w, this.timerData.y + 0.075 * this.timerData.h),
            ig.system.context.fillText(b[2], this.timerData.x + 0.545 * this.timerData.w, this.timerData.y + 0.075 * this.timerData.h));
            this.timeout.timer && this.timeout.timer.delta() >= -this.timeout._DURATION && (this.drawSprite(this.timeout.spriteSheet, this.timeout.spriteID, 0.5 * (ig.system.width - _SPRITESHEETS_DATA[this.timeout.spriteSheet].texture[this.timeout.spriteID].w + 0.5), 0.5 * (0.5 + ig.system.height - _SPRITESHEETS_DATA[this.timeout.spriteSheet].texture[this.timeout.spriteID].h)),
            b = Math.abs(this.timeout.timer.delta() + this.timeout._DURATION) / this.timeout._DURATION,
            this.control.player.canAction || (b = 1 - b),
            ig.system.context.fillStyle = "#42b4ab",
            ig.system.context.beginPath(),
            ig.system.context.moveTo(0.5 * ig.system.width, 0.5 * ig.system.height),
            ig.system.context.arc(0.5 * ig.system.width, 0.5 * ig.system.height, 0.38 * _SPRITESHEETS_DATA[this.timeout.spriteSheet].texture[this.timeout.spriteID].w, -0.5 * Math.PI, -0.5 * Math.PI + 2 * Math.PI * b),
            ig.system.context.fill());
            this.score && null !== this.score.buffer && 0 <= this.score.buffer && (b = Math.round(this.score.buffer).toString(),
            this.drawScore(b, 0.5 * ig.system.width, 0.5 * ig.system.height))
        }
    })});
ig.module("game.entities.boxing-ring")
  .requires("impact.entity")
  .defines(function() {
    EntityBoxingRing = ig.Entity.extend({
        gravityFactor: 0,
        zIndex: 1,
        scale: {
            x: 1,
            y: 1.5
        },
        name: "boxing-ring",
        "boxing-ring": {
            animations: {
                left: {
                    name: "left",
                    offset: {
                        x: 0,
                        y: 0
                    },
                    keyFrames: [10],
                    loop: !1,
                    nextAnimation: !1,
                    fps: 14,
                    frames: [new ig.Image("media/graphics/sprites/boxing_ring/frame_0000.png"), new ig.Image("media/graphics/sprites/boxing_ring/frame_0002.png"), new ig.Image("media/graphics/sprites/boxing_ring/frame_0004.png"), new ig.Image("media/graphics/sprites/boxing_ring/frame_0006.png"), new ig.Image("media/graphics/sprites/boxing_ring/frame_0008.png"), new ig.Image("media/graphics/sprites/boxing_ring/frame_0010.png"), new ig.Image("media/graphics/sprites/boxing_ring/frame_0012.png"), new ig.Image("media/graphics/sprites/boxing_ring/frame_0014.png"), new ig.Image("media/graphics/sprites/boxing_ring/frame_0016.png"), new ig.Image("media/graphics/sprites/boxing_ring/frame_0019.png"), new ig.Image("media/graphics/sprites/boxing_ring/frame_0021.png"), new ig.Image("media/graphics/sprites/boxing_ring/frame_0023.png"), new ig.Image("media/graphics/sprites/boxing_ring/frame_0025.png"), new ig.Image("media/graphics/sprites/boxing_ring/frame_0027.png"), new ig.Image("media/graphics/sprites/boxing_ring/frame_0029.png"), new ig.Image("media/graphics/sprites/boxing_ring/frame_0031.png"), new ig.Image("media/graphics/sprites/boxing_ring/frame_0033.png"), new ig.Image("media/graphics/sprites/boxing_ring/frame_0035.png")]
                },
                right: {
                    name: "right",
                    offset: {
                        x: 0,
                        y: 0
                    },
                    keyFrames: [10],
                    loop: !1,
                    nextAnimation: !1,
                    fps: 14,
                    frames: [new ig.Image("media/graphics/sprites/boxing_ring/frame_0035.png"), new ig.Image("media/graphics/sprites/boxing_ring/frame_0033.png"), new ig.Image("media/graphics/sprites/boxing_ring/frame_0031.png"), new ig.Image("media/graphics/sprites/boxing_ring/frame_0029.png"), new ig.Image("media/graphics/sprites/boxing_ring/frame_0027.png"), new ig.Image("media/graphics/sprites/boxing_ring/frame_0025.png"), new ig.Image("media/graphics/sprites/boxing_ring/frame_0023.png"), new ig.Image("media/graphics/sprites/boxing_ring/frame_0021.png"), new ig.Image("media/graphics/sprites/boxing_ring/frame_0019.png"), new ig.Image("media/graphics/sprites/boxing_ring/frame_0016.png"), new ig.Image("media/graphics/sprites/boxing_ring/frame_0014.png"), new ig.Image("media/graphics/sprites/boxing_ring/frame_0012.png"), new ig.Image("media/graphics/sprites/boxing_ring/frame_0010.png"), new ig.Image("media/graphics/sprites/boxing_ring/frame_0008.png"), new ig.Image("media/graphics/sprites/boxing_ring/frame_0006.png"), new ig.Image("media/graphics/sprites/boxing_ring/frame_0004.png"), new ig.Image("media/graphics/sprites/boxing_ring/frame_0002.png"), new ig.Image("media/graphics/sprites/boxing_ring/frame_0000.png")]
                }
            }
        },
        init: function(b, c, d) {
            this.parent(b, c, d);
            0.5 < Math.random() ? this.changeAnimation("left", this[this.name].animations.left.frames.length - 1, !1) : this.changeAnimation("right", this[this.name].animations.right.frames.length - 1, !1)
        },
        rotate: function() {
            if (!this.isRotating)
                switch (this.isRotating = !0,
                this.currentAnimation.name) {
                case "left":
                    this.changeAnimation("right", 0, !0);
                    break;
                case "right":
                    this.changeAnimation("left", 0, !0)
                }
        },
        takeAction: function() {
            this.isRotating = !1;
            this.control.enemy.stand()
        },
        changeAnimation: function(b, c, d) {
            b && this.name && b in this[this.name].animations && (this.currentAnimation = this[this.name].animations[b],
            c || (c = 0),
            c.limit(0, this.currentAnimation.frames.length),
            this.currentFrameKey = c,
            d && (this.animationTimer = new ig.Timer(1 / this.currentAnimation.fps)))
        },
        update: function() {
            this.parent();
            this.currentAnimation && this.animationTimer && 0 <= this.animationTimer.delta() && (this.currentAnimation.loop ? (this.currentFrameKey = (this.currentFrameKey + 1) % this.currentAnimation.frames.length,
            this.animationTimer.reset()) : (this.currentFrameKey < this.currentAnimation.frames.length && (this.currentFrameKey++,
            0 <= this.currentAnimation.keyFrames.indexOf(this.currentFrameKey) && this.takeAction(),
            this.animationTimer.reset()),
            this.currentFrameKey >= this.currentAnimation.frames.length && (this.currentAnimation.nextAnimation ? this.changeAnimation(this.currentAnimation.nextAnimation) : (this.currentFrameKey = this.currentAnimation.frames.length - 1,
            this.animationTimer = null))))
        },
        draw: function() {
            this.parent();
            ig.global.wm || this.currentAnimation && this.currentFrameKey < this.currentAnimation.frames.length && ig.system.context.drawImage(this.currentAnimation.frames[this.currentFrameKey].data, ig.game.screen.x + this.pos.x + this.currentAnimation.offset.x, ig.game.screen.y + this.pos.y + this.currentAnimation.offset.y, this.scale.x * this.currentAnimation.frames[this.currentFrameKey].width, this.scale.y * this.currentAnimation.frames[this.currentFrameKey].height)
        }
    })});
ig.module("game.entities.powerup")
  .requires("impact.entity", "game.entities.button")
  .defines(function() {
    EntityPowerup = EntityButton.extend({
        gravityFactor: 1,
        spriteSheet: "GUI",
        spriteID: "powerup",
        maxVel: {
            x: 1024,
            y: 1024
        },
        scale: {
            x: 1.23,
            y: 1.23
        },
        maxScale: {
            x: 2.5,
            y: 2.5
        },
        zIndex: 4,
        alpha: 1,
        init: function(b, c, d) {
            this.parent(b, c, d);
            this.vel.x = 0.5 > Math.random() ? this.vel.x - -0.2 * ig.game.gravity : -0.2 * ig.game.gravity;
            this.vel.y = -0.5 * ig.game.gravity
        },
        update: function() {
            this.parent();
            this.pos.y > ig.system.height && this.kill()
        },
        consume: function() {
            this.locked = !0;
            this.tween({
                scale: {
                    x: this.maxScale.x,
                    y: this.maxScale.y
                },
                alpha: 0.01
            }, 0.25, {
                onComplete: function() {
                    try {
                        ig.soundHandler.playSound(ig.soundHandler.SOUNDID.powerUpSound)
                    } catch (b) {
                        console.log(b)
                    }
                    this.player && this.player.specialAvailable && (this.player.specialAvailable = !1);
                    this.kill()
                }
                .bind(this)
            }).start()
        },
        clicked: function() {
            this.parent();
            if (!this.locked) {
                var b = "right";
                0 > this.vel.x && (b = "left");
                this.control.player.punch(b, this)
            }
        },
        draw: function() {
            ig.system.context.globalAlpha = this.alpha;
            this.parent();
            ig.system.context.globalAlpha = 1
        }
    })});
ig.module("game.entities.effect")
  .requires("impact.entity")
  .defines(function() {
    EntityEffect = ig.Entity.extend({
        zIndex: 50,
        fadingRate: 0.05,
        angle: 0,
        alpha: 1,
        anchor: {
            x: 0.5,
            y: 0.5
        },
        scale: {
            x: 1,
            y: 1
        },
        image: null,
        init: function(b, c, d) {
            this.parent(b, c, d);
            this.image && (this.size.x = this.image.width,
            this.size.y = this.image.height);
            this.pos.x -= this.anchor.x * this.size.x;
            this.pos.y -= this.anchor.y * this.size.y;
            ig.game.sortEntitiesDeferred()
        },
        draw: function() {
            this.image && (ig.system.context.save(),
            ig.system.context.translate(this.pos.x + this.anchor.x * this.size.x, this.pos.y + this.anchor.y * this.size.y),
            ig.system.context.rotate(this.angle),
            ig.system.context.globalAlpha = this.alpha,
            ig.system.context.drawImage(this.image.data, -this.anchor.x * this.image.width * this.scale.x, -this.anchor.y * this.image.height * this.scale.y, this.image.width * this.scale.x, this.image.height * this.scale.y),
            ig.system.context.restore())
        }
    });
    EntityEffectSmoke = EntityEffect.extend({
        zIndex: 3,
        images: [new ig.Image("media/graphics/sprites/effect/effect-smoke-1.png",291,343), new ig.Image("media/graphics/sprites/effect/effect-smoke-2.png",328,315)],
        effectDuration: 0.5,
        maxVel: {
            x: 32,
            y: 32
        },
        gravityFactor: -0.1,
        init: function(b, c, d) {
            this.imageID = Math.floor(this.images.length * Math.random());
            this.image = this.images[this.imageID];
            this.parent(b, c, d);
            this.alpha = 0.25 + 0.1 * Math.random();
            this.angle = (360 * Math.random()).toRad();
            this.scale.x = 0.5 + 0.1 * Math.random();
            1 === this.imageID && (this.scale.x *= 0.75);
            this.scale.y = this.scale.x;
            this.tween({
                angle: this.angle + (6 * (Math.random() - Math.random())).toRad(),
                alpha: 0.02,
                scale: {
                    x: this.scale.x + 0.11,
                    y: this.scale.y + 0.11
                }
            }, this.effectDuration, {
                onComplete: function() {
                    this.kill()
                }
                .bind(this)
            }).start()
        }
    })});
ig.module("game.entities.fighter")
  .requires("impact.entity", "game.entities.powerup", "game.entities.effect")
  .defines(function() {
    EntityFighter = ig.Entity.extend({
        gravityFactor: 0,
        name: "enemy",
        target: "player",
        scale: {
            x: 2.5,
            y: 2.5
        },
        enemy: {
            animations: {
                breath: {
                    name: "breath",
                    offset: {
                        x: 69,
                        y: 1
                    },
                    keyFrames: [],
                    loop: !0,
                    nextAnimation: !1,
                    fps: 16,
                    frames: [new ig.Image("media/graphics/sprites/black_fighter_action/enemy/breath/frame_0003.png"), new ig.Image("media/graphics/sprites/black_fighter_action/enemy/breath/frame_0005.png"), new ig.Image("media/graphics/sprites/black_fighter_action/enemy/breath/frame_0007.png"), new ig.Image("media/graphics/sprites/black_fighter_action/enemy/breath/frame_0009.png"), new ig.Image("media/graphics/sprites/black_fighter_action/enemy/breath/frame_0011.png"), new ig.Image("media/graphics/sprites/black_fighter_action/enemy/breath/frame_0013.png"), new ig.Image("media/graphics/sprites/black_fighter_action/enemy/breath/frame_0015.png"), new ig.Image("media/graphics/sprites/black_fighter_action/enemy/breath/frame_0017.png")]
                },
                block: {
                    name: "block",
                    offset: {
                        x: 69,
                        y: 1
                    },
                    keyFrames: [1, 2],
                    loop: !1,
                    nextAnimation: !1,
                    fps: 51,
                    frames: [new ig.Image("media/graphics/sprites/black_fighter_action/enemy/block/frame_0022.png"), new ig.Image("media/graphics/sprites/black_fighter_action/enemy/block/frame_0024.png"), new ig.Image("media/graphics/sprites/black_fighter_action/enemy/block/frame_0026.png")]
                },
                unblock: {
                    name: "unblock",
                    offset: {
                        x: 69,
                        y: 1
                    },
                    keyFrames: [1, 2, 3],
                    loop: !1,
                    nextAnimation: "breath",
                    fps: 17.5,
                    frames: [new ig.Image("media/graphics/sprites/black_fighter_action/enemy/block/frame_0038.png"), new ig.Image("media/graphics/sprites/black_fighter_action/enemy/block/frame_0040.png"), new ig.Image("media/graphics/sprites/black_fighter_action/enemy/block/frame_0042.png"), new ig.Image("media/graphics/sprites/black_fighter_action/enemy/block/frame_0044.png")]
                },
                hurt: {
                    name: "hurt",
                    offset: {
                        x: 83,
                        y: 0
                    },
                    keyFrames: [5],
                    loop: !1,
                    nextAnimation: "breath",
                    fps: 23,
                    frames: [new ig.Image("media/graphics/sprites/black_fighter_action/enemy/hurt/frame_0020.png"), new ig.Image("media/graphics/sprites/black_fighter_action/enemy/hurt/frame_0022.png"), new ig.Image("media/graphics/sprites/black_fighter_action/enemy/hurt/frame_0024.png"), new ig.Image("media/graphics/sprites/black_fighter_action/enemy/hurt/frame_0026.png"), new ig.Image("media/graphics/sprites/black_fighter_action/enemy/hurt/frame_0028.png"), new ig.Image("media/graphics/sprites/black_fighter_action/enemy/hurt/frame_0030.png"), new ig.Image("media/graphics/sprites/black_fighter_action/enemy/hurt/frame_0032.png"), new ig.Image("media/graphics/sprites/black_fighter_action/enemy/hurt/frame_0034.png"), new ig.Image("media/graphics/sprites/black_fighter_action/enemy/hurt/frame_0036.png"), new ig.Image("media/graphics/sprites/black_fighter_action/enemy/hurt/frame_0038.png"), new ig.Image("media/graphics/sprites/black_fighter_action/enemy/hurt/frame_0040.png")]
                },
                left: {
                    name: "left",
                    damage: {
                        min: 20,
                        max: 40
                    },
                    offset: {
                        x: 92,
                        y: 1
                    },
                    keyFrames: [4],
                    loop: !1,
                    nextAnimation: "breath",
                    fps: 17,
                    frames: [new ig.Image("media/graphics/sprites/black_fighter_action/enemy/left/frame_0020.png"), new ig.Image("media/graphics/sprites/black_fighter_action/enemy/left/frame_0022.png"), new ig.Image("media/graphics/sprites/black_fighter_action/enemy/left/frame_0024.png"), new ig.Image("media/graphics/sprites/black_fighter_action/enemy/left/frame_0026.png"), new ig.Image("media/graphics/sprites/black_fighter_action/enemy/left/frame_0028.png"), new ig.Image("media/graphics/sprites/black_fighter_action/enemy/left/frame_0030.png"), new ig.Image("media/graphics/sprites/black_fighter_action/enemy/left/frame_0032.png"), new ig.Image("media/graphics/sprites/black_fighter_action/enemy/left/frame_0034.png"), new ig.Image("media/graphics/sprites/black_fighter_action/enemy/left/frame_0036.png"), new ig.Image("media/graphics/sprites/black_fighter_action/enemy/left/frame_0038.png"), new ig.Image("media/graphics/sprites/black_fighter_action/enemy/left/frame_0040.png")]
                },
                right: {
                    name: "right",
                    damage: {
                        min: 40,
                        max: 60
                    },
                    offset: {
                        x: 50,
                        y: 1
                    },
                    keyFrames: [4],
                    loop: !1,
                    nextAnimation: "breath",
                    fps: 13,
                    frames: [new ig.Image("media/graphics/sprites/black_fighter_action/enemy/right/frame_0020.png"), new ig.Image("media/graphics/sprites/black_fighter_action/enemy/right/frame_0022.png"), new ig.Image("media/graphics/sprites/black_fighter_action/enemy/right/frame_0024.png"), new ig.Image("media/graphics/sprites/black_fighter_action/enemy/right/frame_0026.png"), new ig.Image("media/graphics/sprites/black_fighter_action/enemy/right/frame_0028.png"), new ig.Image("media/graphics/sprites/black_fighter_action/enemy/right/frame_0030.png"), new ig.Image("media/graphics/sprites/black_fighter_action/enemy/right/frame_0032.png"), new ig.Image("media/graphics/sprites/black_fighter_action/enemy/right/frame_0034.png"), new ig.Image("media/graphics/sprites/black_fighter_action/enemy/right/frame_0036.png"), new ig.Image("media/graphics/sprites/black_fighter_action/enemy/right/frame_0038.png"), new ig.Image("media/graphics/sprites/black_fighter_action/enemy/right/frame_0040.png")]
                }
            },
            enemyActionTimeout: [null, {
                min: 1,
                max: 1.5
            }, {
                min: 0.4,
                max: 1.1
            }, {
                min: 0.25,
                max: 0.5
            }]
        },
        player: {
            animations: {
                breath: {
                    name: "breath",
                    offset: {
                        x: 61,
                        y: 87
                    },
                    keyFrames: [],
                    loop: !0,
                    nextAnimation: !1,
                    fps: 16,
                    frames: [new ig.Image("media/graphics/sprites/white_fighter_action/player/breath/frame_0000.png"), new ig.Image("media/graphics/sprites/white_fighter_action/player/breath/frame_0002.png"), new ig.Image("media/graphics/sprites/white_fighter_action/player/breath/frame_0004.png"), new ig.Image("media/graphics/sprites/white_fighter_action/player/breath/frame_0006.png"), new ig.Image("media/graphics/sprites/white_fighter_action/player/breath/frame_0008.png"), new ig.Image("media/graphics/sprites/white_fighter_action/player/breath/frame_0010.png"), new ig.Image("media/graphics/sprites/white_fighter_action/player/breath/frame_0012.png"), new ig.Image("media/graphics/sprites/white_fighter_action/player/breath/frame_0014.png")]
                },
                block: {
                    name: "block",
                    offset: {
                        x: 61,
                        y: 87
                    },
                    keyFrames: [1, 2],
                    loop: !1,
                    nextAnimation: !1,
                    fps: 45,
                    frames: [new ig.Image("media/graphics/sprites/white_fighter_action/player/block/frame_0022.png"), new ig.Image("media/graphics/sprites/white_fighter_action/player/block/frame_0024.png"), new ig.Image("media/graphics/sprites/white_fighter_action/player/block/frame_0026.png")]
                },
                unblock: {
                    name: "unblock",
                    offset: {
                        x: 61,
                        y: 87
                    },
                    keyFrames: [1, 2, 3],
                    loop: !1,
                    nextAnimation: "breath",
                    fps: 45,
                    frames: [new ig.Image("media/graphics/sprites/white_fighter_action/player/block/frame_0038.png"), new ig.Image("media/graphics/sprites/white_fighter_action/player/block/frame_0040.png"), new ig.Image("media/graphics/sprites/white_fighter_action/player/block/frame_0042.png"), new ig.Image("media/graphics/sprites/white_fighter_action/player/block/frame_0044.png")]
                },
                hurt: {
                    name: "hurt",
                    offset: {
                        x: 0,
                        y: 77
                    },
                    keyFrames: [5],
                    loop: !1,
                    nextAnimation: "breath",
                    fps: 16,
                    frames: [new ig.Image("media/graphics/sprites/white_fighter_action/player/hurt/frame_0020.png"), new ig.Image("media/graphics/sprites/white_fighter_action/player/hurt/frame_0022.png"), new ig.Image("media/graphics/sprites/white_fighter_action/player/hurt/frame_0024.png"), new ig.Image("media/graphics/sprites/white_fighter_action/player/hurt/frame_0026.png"), new ig.Image("media/graphics/sprites/white_fighter_action/player/hurt/frame_0028.png"), new ig.Image("media/graphics/sprites/white_fighter_action/player/hurt/frame_0030.png"), new ig.Image("media/graphics/sprites/white_fighter_action/player/hurt/frame_0032.png"), new ig.Image("media/graphics/sprites/white_fighter_action/player/hurt/frame_0034.png"), new ig.Image("media/graphics/sprites/white_fighter_action/player/hurt/frame_0036.png"), new ig.Image("media/graphics/sprites/white_fighter_action/player/hurt/frame_0038.png"), new ig.Image("media/graphics/sprites/white_fighter_action/player/hurt/frame_0040.png")]
                },
                left: {
                    name: "left",
                    damage: {
                        min: 20,
                        max: 30
                    },
                    offset: {
                        x: 15,
                        y: 0
                    },
                    keyFrames: [4],
                    loop: !1,
                    nextAnimation: "breath",
                    fps: 17.5,
                    frames: [new ig.Image("media/graphics/sprites/white_fighter_action/player/left/frame_0020.png"), new ig.Image("media/graphics/sprites/white_fighter_action/player/left/frame_0022.png"), new ig.Image("media/graphics/sprites/white_fighter_action/player/left/frame_0024.png"), new ig.Image("media/graphics/sprites/white_fighter_action/player/left/frame_0026.png"), new ig.Image("media/graphics/sprites/white_fighter_action/player/left/frame_0028.png"), new ig.Image("media/graphics/sprites/white_fighter_action/player/left/frame_0030.png"), new ig.Image("media/graphics/sprites/white_fighter_action/player/left/frame_0032.png"), new ig.Image("media/graphics/sprites/white_fighter_action/player/left/frame_0034.png"), new ig.Image("media/graphics/sprites/white_fighter_action/player/left/frame_0034.png")]
                },
                right: {
                    name: "right",
                    damage: {
                        min: 75,
                        max: 100
                    },
                    offset: {
                        x: 43,
                        y: 19
                    },
                    keyFrames: [4],
                    loop: !1,
                    nextAnimation: "breath",
                    fps: 12.5,
                    frames: [new ig.Image("media/graphics/sprites/white_fighter_action/player/right/frame_0020.png"), new ig.Image("media/graphics/sprites/white_fighter_action/player/right/frame_0022.png"), new ig.Image("media/graphics/sprites/white_fighter_action/player/right/frame_0024.png"), new ig.Image("media/graphics/sprites/white_fighter_action/player/right/frame_0026.png"), new ig.Image("media/graphics/sprites/white_fighter_action/player/right/frame_0028.png"), new ig.Image("media/graphics/sprites/white_fighter_action/player/right/frame_0030.png"), new ig.Image("media/graphics/sprites/white_fighter_action/player/right/frame_0032.png"), new ig.Image("media/graphics/sprites/white_fighter_action/player/right/frame_0034.png"), new ig.Image("media/graphics/sprites/white_fighter_action/player/right/frame_0034.png")]
                }
            }
        },
        specialMultiplier: 1.5,
        comboCount: 0,
        maxComboCount: 4,
        knockDownCount: 0,
        maxKnockDownCount: 3,
        health: 255,
        maxHealth: 255,
        healthBuffer: 255,
        bufferDamage: 0,
        zIndex: 2,
        canAction: !0,
        fainted: !1,
        inputBuffer: [],
        maxInputBufferLength: 4,
        inputBufferShiftInterval: 1.75,
        KO: {
            count: 0,
            max: 3
        },
        fatigue: {
            min: 0,
            cur: 0,
            max: 0.0333666999,
            inc: 0.00369,
            dec: 0.0123
        },
        init: function(b, c, d) {
            this._POS = {
                x: b,
                y: c
            };
            this.parent(b, c, d);
            "enemy" === this.name && this.changeAnimation("breath");
            "player" === this.name && this.changeAnimation("breath");
            this.inputBufferShiftInterval && (this.inputBufferTimer = new ig.Timer(this.inputBufferShiftInterval))
        },
        resetCombo: function() {
            this.inputBuffer = [];
            this.comboCount = 0;
            this.fatigue.cur = this.fatigue.min
        },
        setActionTimer: function(b) {
            if (!b || 0 >= b)
                b = this[this.name].enemyActionTimeout[ig.game.round].min + Math.random() * (this[this.name].enemyActionTimeout[ig.game.round].max - this[this.name].enemyActionTimeout[ig.game.round].min);
            this.enemyActionTimer = new ig.Timer(b)
        },
        changeAnimation: function(b, c) {
            if (b && this.name && b in this[this.name].animations) {
                "player" === this.name && (this.control && this.control.gui && this.control.gui.stopTimeout(),
                0 > ["left", "right", "breath"].indexOf(b) && this.resetCombo());
                if ("hurt" === b && this.currentAnimation && ("left" === this.currentAnimation.name || "right" === this.currentAnimation.name) && 0 < this.currentFrameKey)
                    return this.currentFrameKey--,
                    this.changeAnimation(b, c);
                this.currentAnimation = this[this.name].animations[b];
                this.special = this.isBlocking = !1;
                c || (c = 0);
                c.limit(0, this.currentAnimation.frames.length);
                this.currentFrameKey = c;
                this.animationTimer = new ig.Timer(1 / this.currentAnimation.fps + this.fatigue.cur)
            }
        },
        dodge: function() {
            if ("player" !== this.name && this.canAction) {
                this.dodging = !0;
                this.unblock();
                var b = 168;
                "right" === this.control.ring.currentAnimation.name && (b *= -1);
                this.dodgeTween && this.dodgeTween.stop();
                this.dodgeTween = this.tween({
                    pos: {
                        x: this.pos.x + b
                    }
                }, 0.4 * this.control.ring.currentAnimation.frames.length / this.control.ring.currentAnimation.fps, {
                    onComplete: function() {}
                    .bind(this)
                });
                this.dodgeTween.start();
                this.control.ring.rotate()
            }
        },
        stand: function() {
            "player" !== this.name && this.canAction && (this.dodgeTween && this.dodgeTween.stop(),
            this.tween({}, 0.125 * this.control.ring.currentAnimation.frames.length / this.control.ring.currentAnimation.fps, {
                onComplete: function() {
                    this.dodging = !1
                }
                .bind(this)
            }).start(),
            this.dodgeTween = this.tween({
                pos: {
                    x: this._POS.x
                }
            }, 0.5 * this.control.ring.currentAnimation.frames.length / this.control.ring.currentAnimation.fps, {
                onComplete: function() {
                    this.dodging = !1
                }
                .bind(this)
            }),
            this.dodgeTween.start())
        },
        punch: function(b, c) {
            if (this.control.gameStarted && !this.control.gameEnded && this.canAction && !this.fainted && !this.control[this.target].fainted) {
                if (this.currentAnimation === this[this.name].animations.breath && !this.dodging)
                    this.changeAnimation(b),
                    "player" === this.name && (this.fatigue.cur = (this.fatigue.cur + this.fatigue.inc).limit(this.fatigue.min, this.fatigue.max),
                    c instanceof EntityPowerup && !this.special && (this.fatigue.cur = (this.fatigue.cur - this.fatigue.dec).limit(this.fatigue.min, this.fatigue.max),
                    c.consume(),
                    this.special = !0)),
                    this.inputBuffer = [];
                else {
                    var d = !0;
                    this.currentFrameKey <= 0.5 * this.currentAnimation.frames.length && (d = !1);
                    if (d) {
                        for (; this.inputBuffer.length >= this.maxInputBufferLength; )
                            this.inputBuffer.shift();
                        this.inputBuffer.push(b)
                    }
                }
                "player" === this.name && this.control.gui.hideTutorial(1.5, 1.5)
            }
        },
        block: function() {
            this.control.gameStarted && !this.control.gameEnded && (this.canAction && !this.fainted && !this.control[this.target].fainted) && (this.currentAnimation === this[this.name].animations.breath && (this.changeAnimation("block"),
            "player" === this.name && this.control.gui.startTimeout()),
            "player" === this.name && this.control.gui.hideTutorial(1.5, 1.5))
        },
        unblock: function() {
            this.canAction && (this.currentAnimation === this[this.name].animations.block && (this.changeAnimation("unblock", (this[this.name].animations.unblock.frames.length - 1 - this.currentFrameKey).limit(0, this[this.name].animations.unblock.frames.length - 1)),
            "player" === this.name && this.control.gui.stopTimeout()),
            "player" === this.name && this.control.gui.hideTutorial(1.5, 1.5))
        },
        takeAction: function() {
            var b = this.control[this.target];
            switch (this.currentAnimation.name) {
            case "left":
            case "right":
                if (b.special)
                    break;
                if (!b.fainted && this.distanceTo(b) <= this._DISTANCE + 2.5)
                    if ("enemy" === b.name && (this.comboCount++,
                    this.comboCount >= this.maxComboCount && (this.specialAvailable = ig.game.spawnEntity(EntityPowerup, 0.5 * ig.system.width, 0.25 * ig.system.height, {
                        control: this.control,
                        player: this
                    }),
                    this.comboCount = 0)),
                    b.isBlocking) {
                        try {
                            ig.soundHandler.playSound(ig.soundHandler.SOUNDID.upperCutSound)
                        } catch (c) {
                            console.log(c)
                        }
                        "enemy" === b.name && ("left" === this.currentAnimation.name && ig.game.spawnEntity(EntityEffectSmoke, this.pos.x + 0.45 * ig.system.width, this.pos.y + 0.05 * ig.system.height),
                        "right" === this.currentAnimation.name && ig.game.spawnEntity(EntityEffectSmoke, this.pos.x + 0.55 * ig.system.width, this.pos.y + 0.06 * ig.system.height),
                        "left" === this.currentAnimation.name && ig.game.spawnEntity(EntityEffectSmoke, this.pos.x + 0.45 * ig.system.width, this.pos.y + 0.05 * ig.system.height),
                        "right" === this.currentAnimation.name && ig.game.spawnEntity(EntityEffectSmoke, this.pos.x + 0.55 * ig.system.width, this.pos.y + 0.06 * ig.system.height),
                        "left" === this.currentAnimation.name && ig.game.spawnEntity(EntityEffectSmoke, this.pos.x + 0.45 * ig.system.width, this.pos.y + 0.05 * ig.system.height),
                        "right" === this.currentAnimation.name && ig.game.spawnEntity(EntityEffectSmoke, this.pos.x + 0.55 * ig.system.width, this.pos.y + 0.06 * ig.system.height),
                        "left" === this.currentAnimation.name && ig.game.spawnEntity(EntityEffectSmoke, this.pos.x + 0.45 * ig.system.width, this.pos.y + 0.05 * ig.system.height),
                        "right" === this.currentAnimation.name && ig.game.spawnEntity(EntityEffectSmoke, this.pos.x + 0.55 * ig.system.width, this.pos.y + 0.06 * ig.system.height),
                        this.special ? (this.damage = this.currentAnimation.damage.min + Math.random() * (this.currentAnimation.damage.max - this.currentAnimation.damage.min),
                        b.receiveDamage(this.specialMultiplier * this.damage, this),
                        this.control.tweenScreen({
                            x: 6,
                            y: 6
                        }, 0.15, 9),
                        this.resetCombo()) : this.control.tweenScreen({
                            x: 6,
                            y: 3
                        }, 0.15, 3));
                        "player" === b.name && ("left" === this.currentAnimation.name && ig.game.spawnEntity(EntityEffectSmoke, this.pos.x + 0.45 * ig.system.width, this.pos.y + 0.35 * ig.system.height),
                        "right" === this.currentAnimation.name && ig.game.spawnEntity(EntityEffectSmoke, this.pos.x + 0.55 * ig.system.width, this.pos.y + 0.35 * ig.system.height),
                        "left" === this.currentAnimation.name && ig.game.spawnEntity(EntityEffectSmoke, this.pos.x + 0.45 * ig.system.width, this.pos.y + 0.35 * ig.system.height),
                        "right" === this.currentAnimation.name && ig.game.spawnEntity(EntityEffectSmoke, this.pos.x + 0.55 * ig.system.width, this.pos.y + 0.35 * ig.system.height),
                        "left" === this.currentAnimation.name && ig.game.spawnEntity(EntityEffectSmoke, this.pos.x + 0.45 * ig.system.width, this.pos.y + 0.35 * ig.system.height),
                        "right" === this.currentAnimation.name && ig.game.spawnEntity(EntityEffectSmoke, this.pos.x + 0.55 * ig.system.width, this.pos.y + 0.35 * ig.system.height),
                        "left" === this.currentAnimation.name && ig.game.spawnEntity(EntityEffectSmoke, this.pos.x + 0.45 * ig.system.width, this.pos.y + 0.35 * ig.system.height),
                        "right" === this.currentAnimation.name && ig.game.spawnEntity(EntityEffectSmoke, this.pos.x + 0.55 * ig.system.width, this.pos.y + 0.35 * ig.system.height),
                        this.control.tweenScreen({
                            x: 6,
                            y: 3
                        }, 0.15, 3))
                    } else {
                        b.unblock();
                        this.damage = this.currentAnimation.damage.min + Math.random() * (this.currentAnimation.damage.max - this.currentAnimation.damage.min);
                        b.receiveDamage(this.damage, this);
                        this.control.tweenScreen({
                            x: 3,
                            y: 6
                        }, 0.15, 6);
                        try {
                            ig.soundHandler.playSound(ig.soundHandler.SOUNDID.jabSound)
                        } catch (d) {
                            console.log(d)
                        }
                    }
                else
                    "enemy" === b.name && this.resetCombo();
                break;
            case "hurt":
                this.fainted && (this.changeAnimation(this.currentAnimation.name, this.currentFrameKey),
                this.animationTimer && (this.animationTimer = null));
                break;
            case "block":
                this.isBlocking = !0;
                break;
            case "unblock":
                this.isBlocking = !1
            }
        },
        kill: function() {},
        receiveDamage: function(b, c) {
            if ("enemy" === c.name)
                b *= (ig.game.round - 0.5).limit(1, 2);
            else if (c.special)
                try {
                    "left" === c.currentAnimation.name ? ig.soundHandler.playSound(ig.soundHandler.SOUNDID.hookLeftSound) : ig.soundHandler.playSound(ig.soundHandler.SOUNDID.hookRightSound)
                } catch (d) {
                    console.log(d)
                }
            this.healthTween && this.healthTween.stop();
            this.damageTween && this.damageTween.stop();
            this.regenTween && this.regenTween.stop();
            this.canRegen = !1;
            this.bufferDamage || (this.bufferDamage = 0);
            this.bufferDamage += b;
            ig.game.score = "enemy" === this.name ? (ig.game.score + 100 * b.round()).limit(0, 999999999) : (ig.game.score - (50 * b).round()).limit(0, 999999999);
            this.healthTween = this.tween({
                health: (this.health - 0.25 * this.bufferDamage).limit(0, this.maxHealth)
            }, 0.5);
            this.damageTween = this.tween({
                healthBuffer: (this.healthBuffer - this.bufferDamage).limit(0, this.maxHealth),
                bufferDamage: 0
            }, 0.25);
            this.regenTween = this.tween({}, 0.5, {
                onComplete: function() {
                    this.canRegen = !0
                }
                .bind(this)
            });
            this.damageTween.chain(this.regenTween);
            this.healthTween.start();
            this.damageTween.start();
            this.changeAnimation("hurt")
        },
        CPU_Player_setActionTimer: function() {
            var b = 1.5 * Math.random() / ig.game.round;
            this._CPU_PLAYER_TIMER = new ig.Timer(b)
        },
        CPU_Player_Take_Over: function() {
            var b = this.control[this.target]
              , c = Math.random();
            this.specialAvailable && 0.25 > c && this.specialAvailable.clicked();
            if (Math.random() < ig.game.round / (ig.game.maxRound + 1) && ("hurt" === this.currentAnimation.name && (this.CPU_Player_setActionTimer(),
            this.block()),
            "hurt" === b.currentAnimation.name)) {
                this.CPU_Player_setActionTimer();
                var d = ["left", "right"].random();
                this.punch(d)
            }
            b.currentAnimation === b[b.name].animations.left || b.currentAnimation === b[b.name].animations.right ? (this.CPU_Player_setActionTimer(),
            b.currentAnimation.keyFrames.length ? b.currentFrameKey > b.currentAnimation.keyFrames[0] ? (d = ["left", "right"].random(),
            this.punch(d)) : c >= 1 / 3 ? this.block() : this.unblock() : c >= 1 / 3 ? this.block() : this.unblock()) : b.currentAnimation === b[b.name].animations.breath || b.currentAnimation === b[b.name].animations.hurt ? (this.unblock(),
            this.CPU_Player_setActionTimer(),
            d = ["left", "right"].random(),
            this.punch(d)) : (this.CPU_Player_setActionTimer(),
            0.75 <= c ? this.block() : 0.5 <= c ? (d = ["left", "right"].random(),
            this.punch(d)) : 0.25 <= c && this.unblock());
            return !0
        },
        CPU_MakeMove: function() {
            var b = this.control[this.target]
              , c = Math.random();
            if (Math.random() < ig.game.round / (ig.game.maxRound + 1) && ("hurt" === this.currentAnimation.name && (this.setActionTimer(),
            this.block()),
            "hurt" === b.currentAnimation.name)) {
                this.setActionTimer();
                var d = ["left", "right"].random();
                this.punch(d)
            }
            b.currentAnimation === b[b.name].animations.left || b.currentAnimation === b[b.name].animations.right ? (this.setActionTimer(),
            b.currentAnimation.keyFrames.length ? b.currentFrameKey > b.currentAnimation.keyFrames[0] ? (d = ["left", "right"].random(),
            this.punch(d)) : c >= 1 / 3 ? this.block() : (this.unblock(),
            this.dodge()) : c >= 1 / 3 ? this.block() : (this.unblock(),
            this.dodge())) : b.currentAnimation === b[b.name].animations.breath || b.currentAnimation === b[b.name].animations.hurt ? (this.unblock(),
            this.setActionTimer(),
            d = ["left", "right"].random(),
            this.punch(d)) : (this.setActionTimer(),
            0.75 <= c ? this.block() : 0.5 <= c ? (d = ["left", "right"].random(),
            this.punch(d)) : 0.25 <= c ? this.unblock() : this.dodge());
            return !0
        },
        faint: function() {
            if (!this.fainted) {
                this.fainted = !0;
                this.knockDownCount++;
                this.control.enemy.enemyActionTimer && this.control.enemy.enemyActionTimer.pause();
                this.animationTimer && this.animationTimer.pause();
                this.control.tweenScreen({
                    x: 6,
                    y: 6
                }, 0.16, 8);
                if ("enemy" === this.name)
                    try {
                        ig.soundHandler.playSound(ig.soundHandler.SOUNDID.cheerSound)
                    } catch (b) {
                        console.log(b)
                    }
                this.tween({
                    pos: {
                        y: ig.system.height
                    }
                }, 0.5, {
                    delay: 0.75,
                    easing: ig.Tween.Easing.Quadratic.EaseOut,
                    onComplete: function() {
                        try {
                            ig.soundHandler.playSound(ig.soundHandler.SOUNDID.fallSound)
                        } catch (b) {
                            console.log(b)
                        }
                        this.control.tweenScreen({
                            x: 3,
                            y: 3
                        }, 0.1, 6);
                        if (this.knockDownCount >= this.maxKnockDownCount)
                            this.control.endGame(),
                            this.tween({
                                health: (0).limit(0, this.maxHealth),
                                healthBuffer: (0).limit(0, this.maxHealth)
                            }, 0.25, {
                                onComplete: function() {
                                    this.canRegen = !1
                                }
                                .bind(this)
                            }).start();
                        else {
                            var d = Math.floor(10 * (this.knockDownCount / this.maxKnockDownCount));
                            0.5 < Math.random() && (3 >= d ? d++ : 6 <= d && d--);
                            this.control.refereeCount(this, d);
                            this.restoreHealth(75)
                        }
                    }
                    .bind(this)
                }).start()
            }
        },
        wakeup: function() {
            this.changeAnimation("breath");
            this.tween({
                pos: {
                    x: this._POS.x,
                    y: this._POS.y
                }
            }, 0.5, {
                easing: ig.Tween.Easing.Quadratic.EaseOut,
                onComplete: function() {
                    this.fainted = !1
                }
                .bind(this)
            }).start()
        },
        restoreHealth: function(b) {
            this.healthTween = this.tween({
                health: (this.health + b).limit(0, this.maxHealth)
            }, 0.25);
            this.damageTween = this.tween({
                healthBuffer: (this.health + b).limit(0, this.maxHealth),
                bufferDamage: 0
            }, 0.75);
            this.regenTween = this.tween({}, 0.25, {
                onComplete: function() {
                    this.canRegen = !0
                }
                .bind(this)
            });
            this.damageTween.chain(this.regenTween);
            this.healthTween.start();
            this.damageTween.start()
        },
        updateHealth: function() {
            if (!this.fainted && 0 >= this.healthBuffer)
                return this.healthTween.stop(),
                this.damageTween.stop(),
                this.regenTween.stop(),
                this.faint();
            this.canRegen && this.healthBuffer < this.health && (this.healthBuffer = (this.healthBuffer + 1).limit(0, this.health))
        },
        updateAction: function() {
            this.inputBufferTimer 
            && 0 <= this.inputBufferTimer.delta() 
            && (this.inputBuffer && this.inputBuffer.length) 
            && (this.inputBuffer.shift(),
            this.inputBufferTimer.reset());
            
            this.playerIntercept = !1;
            ig.input.released("click") 
            && (this.playerIntercept = !0);

            "player" === this.name && (ig.input.released("block") ? 
            	(this.playerIntercept = !0,
            		this.unblock(),
            		this.inputBuffer = []) 
            : ig.input.state("block") ? (this.playerIntercept = !0,
            		this.block(),
            		this.inputBuffer = []) 
            	: (ig.input.pressed("left") && (this.playerIntercept = !0,
            this.punch("left")),
            ig.input.pressed("right") && (this.playerIntercept = !0,
            this.punch("right")),
            this.inputBuffer && this.inputBuffer.length && this.punch(this.inputBuffer.pop())));
            
            if (ig.game.demo && this.playerIntercept)
                return console.log("quit demo"), this.control.quitDemo();
            
            "enemy" === this.name ? 
            		this.enemyActionTimer 
            		&& 0 <= this.enemyActionTimer.delta() 
            		&& this.canAction 
            		&& this.CPU_MakeMove() 
            : ig.game.demo 
            		&& this._CPU_PLAYER_TIMER 
            		&& 0 <= this._CPU_PLAYER_TIMER.delta() 
            		&& this.canAction 
            		&& this.CPU_Player_Take_Over()
        },

        updateAnimation: function() {
            this.currentAnimation 
            && this.animationTimer 
            && 0 <= this.animationTimer.delta() 
            && (this.currentAnimation.loop ? 
            	(this.currentFrameKey = 
            		(this.currentFrameKey + 1) % this.currentAnimation.frames.length
            	,this.animationTimer 
            		&& this.animationTimer.reset()
            	) 
            : (
            	this.currentFrameKey 
            	< this.currentAnimation.frames.length 
            	  && (this.currentFrameKey++
            	  , 0 <= this.currentAnimation.keyFrames.indexOf(this.currentFrameKey) 
            	  && this.takeAction()
            	  , this.animationTimer 
            	  && this.animationTimer.reset())
            	  , this.currentFrameKey >= this.currentAnimation.frames.length 
            	  && (this.currentAnimation.nextAnimation ? 
            	  		this.changeAnimation(this.currentAnimation.nextAnimation) 
            	  : (this.currentFrameKey = this.currentAnimation.frames.length - 1
            	  	, this.animationTimer = null)
            	  	)
            ))
        },

        update: function() {
            this.parent();
            this.updateHealth();
            this.updateAction();
            this.updateAnimation()
        },
        draw: function() {
            this.parent();
            if (!ig.global.wm) {
                ig.system.context.globalCompositeOperation = "source-over";
                if (this.currentAnimation 
                	&& this.currentFrameKey < this.currentAnimation.frames.length 
                	&& (ig.system.context.globalCompositeOperation = "source-over"
                	, ig.system.context.drawImage(this.currentAnimation.frames[this.currentFrameKey].data
                	, ig.game.screen.x 
                	  + this.pos.x 
                	  + this.currentAnimation.offset.x / 2 * this.scale.x
                	, ig.game.screen.y 
                	  + this.pos.y 
                	  + this.currentAnimation.offset.y / 2 * this.scale.y
                	, this.scale.x * this.currentAnimation.frames[this.currentFrameKey].width
                	, this.scale.y * this.currentAnimation.frames[this.currentFrameKey].height)
                	, "player" === this.name 
                	&& this.special 
                	&& this.currentFrameKey >= 0.25 * this.currentAnimation.frames.length)
                ) {
                    ig.system.context.globalCompositeOperation = "lighter";
                    for (var b = this.currentFrameKey; 0 < b; b--)
                        b >= 0.25 * this.currentAnimation.frames.length 
                    	&& b <= 0.75 * this.currentAnimation.frames.length 
                    	&& (b >= 
                    		  this.currentFrameKey - 4 
                    		  && ig.system.context.drawImage(
                    		  	this.currentAnimation.frames[b].data
                    		  	, ig.game.screen.x 
                    		  		+ this.pos.x 
                    		  		+ this.currentAnimation.offset.x / 2 * this.scale.x
                    		  	, ig.game.screen.y 
                    		  		+ this.pos.y 
                    		  		+ this.currentAnimation.offset.y / 2 * this.scale.y
                    		  	, this.scale.x * this.currentAnimation.frames[b].width
                    		  	, this.scale.y * this.currentAnimation.frames[b].height)
                    		  	, b -= 1
                    		)
                }
                ig.system.context.globalCompositeOperation = "source-over"
            }
        }
    })});
ig.module("game.entities.text")
  .requires("impact.entity")
  .defines(function() {
    EntityText = ig.Entity.extend({
        zIndex: 1E4,
        spriteSheet: null,
        spriteID: null,
        gravityFactor: 0,
        angle: 0,
        alpha: 1,
        anchor: {
            x: 0.5,
            y: 0.5
        },
        scale: {
            x: 1,
            y: 1
        },
        init: function(b, c, d) {
            this.parent(b, c, d);
            if ("undefined" !== typeof this.text && null !== this.text)
                switch (this.spriteSheet = "GUI",
                this.spriteID = this.textSet + "-set-" + this.text,
                this._POS = {
                    x: this.pos.x,
                    y: this.pos.y
                },
                this._SIZE = {
                    x: _SPRITESHEETS_DATA[this.spriteSheet].texture[this.spriteID].w,
                    y: _SPRITESHEETS_DATA[this.spriteSheet].texture[this.spriteID].h
                },
                this.textSet) {
                case "number":
                    this.startCountTween();
                    break;
                case "fight":
                    this.scale = {
                        x: 10,
                        y: 10
                    };
                    this.anchor = {
                        x: 0.5,
                        y: 0.75
                    };
                    this.startFadeTween();
                    break;
                default:
                    this.anchor = {
                        x: 0.5,
                        y: 0.25
                    },
                    this.startTween()
                }
        },
        startTween: function() {
            this.tween1 = this.tween({
                alpha: 1,
                scale: {
                    x: 1.25,
                    y: 1.25
                }
            }, 0.25, {
                delay: this.delay
            });
            this.tween2 = this.tween({
                alpha: 1,
                scale: {
                    x: 1,
                    y: 1
                }
            }, 0.05, {});
            this.tween3 = this.tween({}, 0.45);
            this.tween4 = this.tween({
                pos: {
                    y: this.pos.y - 6
                }
            }, 0.75);
            this.tween5 = this.tween({
                pos: {
                    y: this.pos.y + 6
                }
            }, 0.75);
            this.tween1.chain(this.tween2);
            this.tween2.chain(this.tween3);
            this.tween3.chain(this.tween4);
            this.tween4.chain(this.tween5);
            this.tween5.chain(this.tween4);
            this.tween1.start()
        },
        startFadeTween: function() {
            this.tween1 = this.tween({
                alpha: 1,
                scale: {
                    x: 1.85,
                    y: 1.85
                }
            }, 0.15, {
                delay: this.delay
            });
            this.tween2 = this.tween({
                alpha: 1,
                scale: {
                    x: 1.7,
                    y: 1.7
                }
            }, 0.05);
            this.tween3 = this.tween({}, 0.95, {
                onComplete: function() {
                    if (0 === this.textSet.indexOf(this.text.toLowerCase()))
                        try {
                            ig.soundHandler.playSound(ig.soundHandler.SOUNDID.fightSound)
                        } catch (b) {
                            console.log(b)
                        }
                }
                .bind(this)
            });
            this.tween4 = this.tween({
                alpha: 0.5
            }, 0.15);
            this.tween5 = this.tween({
                alpha: 0.01,
                anchor: {
                    x: 0.5,
                    y: 0.25
                },
                scale: {
                    x: 24,
                    y: 18
                }
            }, 0.2, {
                onComplete: function() {
                    0 === this.textSet.indexOf(this.text.toLowerCase()) && this.action && "function" === typeof this.action && this.action();
                    this.kill()
                }
                .bind(this)
            });
            this.tween1.chain(this.tween2);
            this.tween2.chain(this.tween3);
            this.tween3.chain(this.tween4);
            this.tween4.chain(this.tween5);
            this.tween1.start()
        },
        startCountTween: function() {
            this.tween1 = this.tween({
                alpha: 1,
                scale: {
                    x: 2,
                    y: 2
                }
            }, 0.25, {
                delay: this.delay,
                onComplete: function() {
                    try {
                        ig.soundHandler.playSound([null, ig.soundHandler.SOUNDID.countOneSound, ig.soundHandler.SOUNDID.countTwoSound, ig.soundHandler.SOUNDID.countThreeSound, ig.soundHandler.SOUNDID.countFourSound, ig.soundHandler.SOUNDID.countFiveSound][this.text])
                    } catch (b) {
                        console.log(b)
                    }
                }
                .bind(this)
            });
            this.tween2 = this.tween({}, 0.5);
            this.tween3 = this.tween({
                alpha: 0.01,
                scale: {
                    x: 1.98,
                    y: 1.98
                }
            }, 0.25, {
                onComplete: function() {
                    this.action && "function" === typeof this.action && this.action();
                    this.kill()
                }
                .bind(this)
            });
            this.tween1.chain(this.tween2);
            this.tween2.chain(this.tween3);
            this.tween1.start()
        },
        draw: function() {
            this.spriteSheet && this.spriteID && (this._POS.x = this.pos.x + this.anchor.x * this.size.x,
            this._POS.y = this.pos.y + this.anchor.y * this.size.y,
            this.size.x = this.scale.x * this._SIZE.x,
            this.size.y = this.scale.y * this._SIZE.y,
            this.pos.x = this._POS.x - this.anchor.x * this.size.x,
            this.pos.y = this._POS.y - this.anchor.y * this.size.y,
            this.alpha && (ig.system.context.globalAlpha = this.alpha),
            ig.game.spriteSheets[this.spriteSheet] && ig.system.context.drawImage(ig.game.spriteSheets[this.spriteSheet].data, _SPRITESHEETS_DATA[this.spriteSheet].texture[this.spriteID].x, _SPRITESHEETS_DATA[this.spriteSheet].texture[this.spriteID].y, _SPRITESHEETS_DATA[this.spriteSheet].texture[this.spriteID].w, _SPRITESHEETS_DATA[this.spriteSheet].texture[this.spriteID].h, this.pos.x, this.pos.y, this.size.x, this.size.y),
            this.alpha && (ig.system.context.globalAlpha = 1))
        }
    })});
ig.module("game.entities.confetti-generator")
  .requires("impact.entity")
  .defines(function() {
    EntityConfettiGenerator = ig.Entity.extend({
        zIndex: 99,
        gravityFactor: 0,
        size: {
            x: 20,
            y: 23
        },
        colour1: {
            r: 197,
            g: 13,
            b: 0
        },
        colour2: {
            r: 243,
            g: 243,
            b: 243
        },
        colour3: {
            r: 65,
            g: 101,
            b: 210
        },
        confettiArea: {
            x: 480,
            y: 640
        },
        particles: [],
        _MAXPARTICLES: 25,
        tilt: Math.floor(10 * Math.random()) - 10,
        tiltAngleIncremental: 0.07 * Math.random() + 0.05,
        tiltAngle: 0,
        angle: 0,
        TiltChangeCountdown: 5,
        init: function(b, c, d) {
            this.parent(b, c, d);
            for (b = 0; b < this._MAXPARTICLES; b++) {
                this.randomColour = Math.floor(3 * Math.random() + 1);
                switch (this.randomColour) {
                case 1:
                    this.colour = this.colour1;
                    break;
                case 2:
                    this.colour = this.colour2;
                    break;
                case 3:
                    this.colour = this.colour3
                }
                this.particles.push({
                    x: Math.random() * this.confettiArea.x,
                    y: Math.random() * this.confettiArea.y,
                    r: this.randomFromTo(5, 30),
                    d: Math.random() * this._MAXPARTICLES + 10,
                    color: "rgb(" + this.colour.r + "," + this.colour.g + "," + this.colour.b + ")",
                    tilt: Math.floor(10 * Math.random()) - 10,
                    tiltAngleIncremental: 0.07 * Math.random() + 0.05,
                    tiltAngle: 0
                });
                ig.game.sortEntitiesDeferred()
            }
        },
        update: function() {
            this.angle += 0.01;
            this.tiltAngle += 0.1;
            this.TiltChangeCountdown--;
            for (var b = 0; b < this._MAXPARTICLES; b++) {
                var c = this.particles[b];
                c.tiltAngle += c.tiltAngleIncremental;
                c.y += (Math.cos(this.angle + c.d) + 1 + c.r / 2) / 2;
                c.x += Math.sin(this.angle);
                c.tilt = 15 * Math.sin(c.tiltAngle - b / 3);
                if (c.x > this.confettiArea.x + 5 || -5 > c.x || c.y > this.confettiArea.y)
                    this.particles[b] = 0 < b % 5 || 0 == b % 2 ? {
                        x: Math.random() * this.confettiArea.x,
                        y: -10,
                        r: c.r,
                        d: c.d,
                        color: c.color,
                        tilt: Math.floor(10 * Math.random()) - 10,
                        tiltAngle: c.tiltAngle,
                        tiltAngleIncremental: c.tiltAngleIncremental
                    } : 0 < Math.sin(this.angle) ? {
                        x: -5,
                        y: Math.random() * this.confettiArea.y,
                        r: c.r,
                        d: c.d,
                        color: c.color,
                        tilt: Math.floor(10 * Math.random()) - 10,
                        tiltAngleIncremental: c.tiltAngleIncremental
                    } : {
                        x: this.confettiArea.x + 5,
                        y: Math.random() * this.confettiArea.y,
                        r: c.r,
                        d: c.d,
                        color: c.color,
                        tilt: Math.floor(10 * Math.random()) - 10,
                        tiltAngleIncremental: c.tiltAngleIncremental
                    }
            }
            this.parent()
        },
        draw: function() {
            var b = ig.system.context;
            b.save();
            for (var c = 0; c < this._MAXPARTICLES; c++) {
                var d = this.particles[c];
                b.beginPath();
                b.lineWidth = d.r / 2;
                b.strokeStyle = d.color;
                b.moveTo(d.x + d.tilt + d.r / 4, d.y);
                b.lineTo(d.x + d.tilt, d.y + d.tilt + d.r / 4);
                b.stroke()
            }
            b.restore();
            this.parent()
        },
        randomFromTo: function(b, c) {
            return Math.floor(Math.random() * (c - b + 1) + b)
        }
    })});
ig.module("game.entities.battle-control")
  .requires("impact.entity", "game.entities.gui", "game.entities.boxing-ring", "game.entities.fighter", "game.entities.text", "game.entities.confetti-generator")
  .defines(function() {
    EntityBattleControl = ig.Entity.extend({
        gravityFactor: 0,
        gameTime: 180,
        init: function(b, c, d) {
            this.parent(b, c, d);
            if (!ig.global.wm) {
                try {
                    ig.soundHandler.playSound([null, ig.soundHandler.SOUNDID.roundOneSound, ig.soundHandler.SOUNDID.roundTwoSound, ig.soundHandler.SOUNDID.roundThreeSound][ig.game.round]),
                    ig.soundHandler.playSound(ig.soundHandler.SOUNDID.cheerSound)
                } catch (f) {
                    console.log(f)
                }
                ig.game.pointer = ig.game.getEntitiesByType(EntityPointer)[0];
                this.ring = ig.game.spawnEntity(EntityBoxingRing, 0, 170, {
                    control: this,
                    zIndex: 1
                });
                this.enemy = ig.game.spawnEntity(EntityFighter, 0, 170, {
                    name: "enemy",
                    target: "player",
                    control: this,
                    zIndex: 2,
                    canAction: !1
                });
                this.player = ig.game.spawnEntity(EntityFighter, 0, 240, {
                    name: "player",
                    target: "enemy",
                    control: this,
                    zIndex: 4,
                    canAction: !1
                });
                this.gui = ig.game.spawnEntity(EntityGui, 0, 0, {
                    control: this,
                    zIndex: 100
                });
                this.enemy._DISTANCE = this.enemy.distanceTo(this.player);
                this.player._DISTANCE = this.player.distanceTo(this.enemy);
                this.gameTimer = new ig.Timer(this.gameTime);
                this.gameTimer.pause();
                this.tweenTextStart("fight", "FIGHT!", 0.5 * ig.system.width, 0.5 * ig.system.height, this.startGame.bind(this));
                ig.game.sortEntitiesDeferred()
            }
        },
        startGame: function() {
            if (!this.gameStarted) {
                this.gameTimer = new ig.Timer(this.gameTime);
                this.gameTimer.unpause();
                this.gameStarted = !0;
                this.gui.initTutorial();
                this.enemy.canAction = !0;
                this.player.canAction = !0;
                this.player.resetCombo();
                this.enemy.setActionTimer(0.05);
                ig.game.demo && this.player.CPU_Player_setActionTimer();
                try {
                    ig.soundHandler.playSound(ig.soundHandler.SOUNDID.ringSound)
                } catch (b) {
                    console.log(b)
                }
            }
        },
        quitDemo: function() {
            if (ig.game.demo)
                return ig.game.demo = !1,
                ig.game.director.jumpTo(LevelStart),
                !1
        },
        endGame: function() {
            if (ig.game.demo)
                return this.quitDemo();
            if (!this.gameEnded) {
                try {
                    ig.soundHandler.playSound(ig.soundHandler.SOUNDID.bellStartSound)
                } catch (b) {
                    console.log(b)
                }
                this.gameEnded = !0;
                this.gameTimer.pause();
                this.enemy.canAction = !1;
                this.player.canAction = !1;
                ig.game.win = 0 < this.enemy.healthBuffer ? !1 : !0;
                if (ig.game.win) {
                    try {
                        ig.soundHandler.playSound(ig.soundHandler.SOUNDID.cheerSound)
                    } catch (c) {
                        console.log(c)
                    }
                    this.tweenTextStart("win", "WIN!", 0.5 * ig.system.width, 0.25 * ig.system.height);
                    ig.game.spawnEntity(EntityConfettiGenerator, 0.5 * ig.system.width, 0, {
                        _MAXPARTICLES: 50
                    })
                } else
                    ig.game.score = (0.9 * ig.game.score).ceil().limit(0, 999999999),
                    this.tweenTextStart("lose", "LOSE", 0.5 * ig.system.width, 0.25 * ig.system.height, null, 2);
                ig.game.totalScore = (ig.game.totalScore + ig.game.score).limit(0, 999999999);
                this.gui.showScore(ig.game.score);
                this.nextButton = ig.game.spawnEntity(EntityButtonNext, 0.5 * ig.system.width, 0.65 * ig.system.height, {
                    control: this,
                    scale: {
                        x: 1.2,
                        y: 1.2
                    }
                })
            }
        },
        getGameTime: function() {
            var b = Math.ceil(Math.max(0, Math.abs(this.gameTimer.delta())));
            0 <= this.gameTimer.delta() && (b = 0);
            var c = []
              , d = b % 60;
            c.push(Math.floor(b / 60) % 60);
            10 > d ? (c.push(0),
            c.push(d)) : (c.push(Math.floor(d / 10)),
            c.push(d - 10 * Math.floor(d / 10)));
            return c
        },
        tweenTextStart: function(b, c, d, f, g, p) {
            p || (p = 1);
            c = c.toString();
            for (var x = 0; x < c.length; x++)
                ig.game.spawnEntity(EntityText, d + 62 * (x - 0.5 * (c.length - 1)), f, {
                    textSet: b,
                    text: c[x],
                    alpha: 0.01,
                    scale: {
                        x: 0.01,
                        y: 0.01
                    },
                    action: g,
                    control: this,
                    delay: 0.05 * x * p
                })
        },
        refereeCount: function(b, c) {
            b && (this.slowCounter || (this.slowCounter = 0),
            this.slowCounter = (this.slowCounter + 1).limit(1, 10),
            c || (c = 10),
            this.slowCounter < c ? this.tweenTextStart("number", this.slowCounter, 0.5 * ig.system.width, 0.5 * ig.system.height, function() {
                this.refereeCount(b, c)
            }
            .bind(this)) : (this.tweenTextStart("fight", "FIGHT!", 0.5 * ig.system.width, 0.5 * ig.system.height, null, 0.25),
            this.enemy.setActionTimer(),
            this.player.resetCombo(),
            b.wakeup(),
            this.slowCounter = 0))
        },
        tweenScreen: function(b, c, d) {
            this.screen = {
                x: ig.game.screen.x,
                y: ig.game.screen.y
            };
            c || (c = 0.24);
            b || (b = {
                x: 5 * (0.5 - Math.random()),
                y: 10 * Math.random() * (0.5 < Math.random()) ? -1 : 1
            });
            if (!d || 0 >= d)
                d = 1;
            for (var f = this.tween({
                screen: {
                    x: 0,
                    y: 0
                }
            }, c / 3, {
                easing: ig.Tween.Easing.Bounce.EaseOut,
                onComplete: function() {
                    this.screen.x = 0;
                    this.screen.y = 0;
                    ig.game.screen.x = 0;
                    ig.game.screen.y = 0
                }
                .bind(this)
            }), g = [], p = 0; p < d; p++) {
                var x = this.tween({
                    screen: {
                        x: (1 - p / d) * b.x,
                        y: (1 - p / d) * b.y
                    }
                }, c / 3, {
                    easing: ig.Tween.Easing.Bounce.EaseIn
                })
                  , t = this.tween({
                    screen: {
                        x: -(1 - p / d) * b.x,
                        y: -(1 - p / d) * b.y
                    }
                }, c / 3, {
                    easing: ig.Tween.Easing.Bounce.EaseIn
                });
                g.push(x);
                g.push(t)
            }
            if (g.length) {
                for (b = 1; b < g.length; b++)
                    g[b - 1].chain(g[b]);
                g[g.length - 1].chain(f);
                g[0].start()
            }
        },
        update: function() {
            this.parent();
            ig.global.wm || (this.gameTimer && 0 <= this.gameTimer.delta() && (this.gameTimer.pause(),
            this.endGame()),
            this.screen && (ig.game.screen.x = this.screen.x,
            ig.game.screen.y = this.screen.y))
        },
        draw: function() {
            this.parent();
            ig.global.wm || (ig.system.context.fillStyle = "#161621",
            ig.system.context.fillRect(0, 0, ig.system.width, ig.system.height))
        }
    })});
ig.module("game.levels.battle")
  .requires("impact.image", "game.entities.battle-control", "game.entities.pointer-selector")
  .defines(function() {
    LevelBattle = {
        entities: [{
            type: "EntityBattleControl",
            x: -50,
            y: -50
        }, {
            type: "EntityPointerSelector",
            x: 0,
            y: 0
        }],
        layer: []
    }});
ig.module("game.entities.result-control")
  .requires("impact.entity", "game.entities.confetti-generator")
  .defines(function() {
    EntityResultControl = ig.Entity.extend({
        gravityFactor: 0,
        spriteSheet: "result",
        score: {
            spriteSheet: "GUI",
            buffer: null,
            scale: {
                x: 1,
                y: 1
            }
        },
        screenTweening: !1,
        screenOffset: 0,
        init: function(b, c, d) {
            this.parent(b, c, d);
            if (!ig.global.wm) {
                if (_SETTINGS.API.Enabled && _SETTINGS.API.Log.Events.EndGame)
                    try {
                        console.log(ig.game.totalScore)
                    } catch (f) {
                        console.log(f)
                    }
                ig.game.pointer = ig.game.getEntitiesByType(EntityPointer)[0];
                ig.game.win ? (this.spriteID = "win",
                ig.game.spawnEntity(EntityConfettiGenerator, 0.5 * ig.system.width, 0, {
                    colour1: {
                        r: 254,
                        g: 236,
                        b: 19
                    },
                    colour2: {
                        r: 126,
                        g: 216,
                        b: 231
                    },
                    colour3: {
                        r: 176,
                        g: 221,
                        b: 41
                    },
                    _MAXPARTICLES: 50
                })) : this.spriteID = "lose";
                this.showScore(ig.game.totalScore);
                ig.game.sortEntitiesDeferred()
            }
        },
        showScore: function(b) {
            this.screenTweening = !0;
            this.rotateY = 0.5 <= Math.random() ? -180 : 180;
            ig.game.win || (this.rotateY *= 2);
            this.score.buffer = 0;
            this.scoreTween1 = this.tween({
                score: {
                    buffer: b
                }
            }, 0.325, {
                onComplete: function() {
                    this.score.buffer = b;
                    this.spawnButtons();
                    if (ig.game.win)
                        try {
                            ig.soundHandler.playSound(ig.soundHandler.SOUNDID.cheerSound)
                        } catch (c) {
                            console.log(c)
                        }
                }
                .bind(this)
            });
            this.scoreTween2 = this.tween({
                score: {
                    scale: {
                        x: 0.93,
                        y: 1.04
                    }
                }
            }, 0.05);
            this.scoreTween3 = this.tween({
                score: {
                    scale: {
                        x: 1.05,
                        y: 0.72
                    }
                }
            }, 0.1);
            this.scoreTween4 = this.tween({
                score: {
                    scale: {
                        x: 0.88,
                        y: 1.11
                    }
                }
            }, 0.1);
            this.scoreTween5 = this.tween({
                score: {
                    scale: {
                        x: 1,
                        y: 1
                    }
                }
            }, 0.05);
            this.scoreTween2.chain(this.scoreTween3);
            this.scoreTween3.chain(this.scoreTween4);
            this.scoreTween4.chain(this.scoreTween5);
            this.screenTween = this.tween({
                rotateY: 0
            }, 1.25, {
                easing: ig.Tween.Easing.Cubic.EaseOut,
                onComplete: function() {
                    this.screenTweening = !1;
                    this.scoreTween1.start();
                    this.scoreTween2.start()
                }
                .bind(this)
            });
            this.screenTween.start()
        },
        spawnButtons: function() {
            this.buttons || (this.buttons = []);
            this.buttons.push(ig.game.spawnEntity(EntityButtonMainMenu, 0.25 * ig.system.width, 0.8 * ig.system.height, {
                control: this,
                scale: {
                    x: 1.2,
                    y: 1.2
                }
            }));
            this.buttons.push(ig.game.spawnEntity(EntityButtonRetry, 0.75 * ig.system.width, 0.8 * ig.system.height, {
                control: this,
                scale: {
                    x: 1.2,
                    y: 1.2
                }
            }));
            this.unlockButtons()
        },
        lockButtons: function() {
            if (this.buttons && this.buttons.length)
                for (var b = 0; b < this.buttons.length; b++)
                    this.buttons[b].locked = !0
        },
        unlockButtons: function() {
            if (this.buttons && this.buttons.length)
                for (var b = 0; b < this.buttons.length; b++)
                    this.buttons[b].locked = !1
        },
        update: function() {
            this.parent();
            !ig.global.wm && this.screenTweening && (isNaN(this.rotateX) && (this.rotateX = 0),
            isNaN(this.rotateY) && (this.rotateY = 0),
            isNaN(this.rotateZ) && (this.rotateZ = 0),
            ig.system.canvas.style["-webkit-transform"] = "rotateX(" + this.rotateX + "deg) rotateY(" + this.rotateY + "deg)  rotateZ(" + this.rotateZ + "deg)",
            ig.system.canvas.style.transform = "rotateX(" + this.rotateX + "deg) rotateY(" + this.rotateY + "deg)  rotateZ(" + this.rotateZ + "deg)")
        },
        drawScore: function(b, c, d) {
            b = b.toString();
            for (var f = "", g = b.length - 1, p = 1; 0 <= g; g--,
            p++)
                f = b[g] + f,
                p && 0 === p % 3 && 0 < g && (f = "," + f);
            f || (f = b.toString());
            for (g = 0; g < f.length; g++)
                b = _SPRITESHEETS_DATA[this.score.spriteSheet].texture["number-set-" + f[g]].w,
                p = _SPRITESHEETS_DATA[this.score.spriteSheet].texture["number-set-" + f[g]].h,
                this.drawSprite(this.score.spriteSheet, "number-set-" + f[g], c + 37 * (g - 0.5 * (f.length - 1)) - 0.5 * b, d + 46.25 - p, this.score.scale.x * b, this.score.scale.y * p)
        },
        drawSprite: function(b, c, d, f, g, p) {
            b && c && ig.game.spriteSheets[b] && (g || (g = _SPRITESHEETS_DATA[b].texture[c].w),
            p || (p = _SPRITESHEETS_DATA[b].texture[c].h),
            ig.system.context.drawImage(ig.game.spriteSheets[b].data, _SPRITESHEETS_DATA[b].texture[c].x, _SPRITESHEETS_DATA[b].texture[c].y, _SPRITESHEETS_DATA[b].texture[c].w, _SPRITESHEETS_DATA[b].texture[c].h, d, f, g, p))
        },
        draw: function() {
            this.parent();
            ig.global.wm || (ig.system.context.fillStyle = "#161621",
            ig.system.context.fillRect(0, 0, ig.system.width, ig.system.height),
            ig.system.context.drawImage(ig.game.spriteSheets[this.spriteSheet].data, _SPRITESHEETS_DATA[this.spriteSheet].texture[this.spriteID].x, _SPRITESHEETS_DATA[this.spriteSheet].texture[this.spriteID].y, _SPRITESHEETS_DATA[this.spriteSheet].texture[this.spriteID].w, _SPRITESHEETS_DATA[this.spriteSheet].texture[this.spriteID].h, 0, 0.1 * ig.system.height, _SPRITESHEETS_DATA[this.spriteSheet].texture[this.spriteID].w, _SPRITESHEETS_DATA[this.spriteSheet].texture[this.spriteID].h),
            this.score && null !== this.score.buffer && 0 <= this.score.buffer && (ig.game.win ? this.drawScore(this.score.buffer.round(), 0.5 * ig.system.width, 0.675 * ig.system.height) : this.drawScore(this.score.buffer.round(), 0.5 * ig.system.width, 0.321 * ig.system.height)))
        }
    })});
ig.module("game.levels.result")
  .requires("impact.image", "game.entities.result-control", "game.entities.pointer-selector")
  .defines(function() {
    LevelResult = {
        entities: [{
            type: "EntityResultControl",
            x: -50,
            y: -50
        }, {
            type: "EntityPointerSelector",
            x: 0,
            y: 0
        }],
        layer: []
    }});
ig.module("game.main")
  .requires("impact.game", "plugins.splash-loader", "plugins.tween", "plugins.url-parameters", "plugins.jukebox", "plugins.director", "plugins.impact-storage", "plugins.branding.splash", "game.entities.branding-logo-placeholder", "game.entities.branding-logo", "game.entities.button-more-games", "game.entities.opening-kitty", "game.entities.pointer", "game.entities.pointer-selector", "game.entities.select", "game.levels.opening", "game.levels.start", "game.levels.battle", "game.levels.result")
  .defines(function() {
    MyGame = ig.Game.extend({
        gravity: 48 * 9.80665,
        score: 0,
        totalScore: 0,
        round: 1,
        maxRound: 3,
        win: false,
        spriteSheets: {
            'GUI': new ig.Image(_SPRITESHEETS_DATA['GUI'].path),
            'result': new ig.Image(_SPRITESHEETS_DATA['result'].path),
            'btn_more_games': new ig.Image(_SPRITESHEETS_DATA['btn_more_games'].path)
        },
        init: function() {
                this.setupControls();
            this.setupLocalStorage();
            this.removeLoadingWheel();
            this.injectMobileLink();
            this.setupURLParameters();
            this.finalize();
        },
        initSfx: function() {},
        finalize: function() {
                if (ig.ua.mobile) {
                    ig.game.showOverlay(['play']);
                } else {
                    ig.game.startGame();
                }
            sizeHandler();
        },
        injectMobileLink: function() {
                $('#play').attr('onclick', 'ig.game.pressPlay();ig.soundHandler.staticSound.play();');
            },
        removeLoadingWheel: function() {
                try {
                    $('#ajaxbar').css('background', 'none');
                } catch (err) {
                    console.log(err);
                }
        },
        showDebugMenu: function() {
                this.fpsCounter++;
                this.hideOverlay(['play']);
            ig.Entity._debugShowBoxes = true;
            $('.ig_debug').show();
        },
        setupLocalStorage: function() {
                try {
                    this.storage = new ig.Storage();
                } catch (e) {}
            if (this.storage) {
                var key = 'playerStats-superboxing-marketjs';
                if (!this.playerStats)
                    this.resetPlayerStats();
                var value = this.playerStats;
                if (this.storage.isSet(key)) {
                    var canLoadFromStorage = true;
                    for (var keyKey in this.storage.get(key)) {
                        if (canLoadFromStorage && !(keyKey in this.playerStats)) {
                            canLoadFromStorage = false;
                            console.log('error loading');
                            return this.savePlayerStats();
                        }
                    }
                    if (canLoadFromStorage = true) {
                        for (var stat in this.storage.get(key)) {
                            this.playerStats[stat] = this.storage.get(key)[stat];
                        }
                    }
                } else {
                    console.log('no localstorage before, creating...');
                    this.savePlayerStats();
                }
            }
        },
        savePlayerStats: function() {
                console.log('playerStats saved');
                var key = 'playerStats-superboxing-marketjs'
                  , value = this.playerStats;
            try {
                this.storage.set(key, value);
            } catch (e) {
                if ((e.name).toUpperCase() == 'QUOTA_EXCEEDED_ERR') {
                    console.log('localstorage is not available');
                }
            }
        },
        resetPlayerStats: function() {
                ig.log('resetting player stats ...');
            this.playerStats = {
                playedTutorial: false,
                sfxMuted: false,
                bgmMuted: false
            };
        },
        startGame: function() {
            if (ig.ua.mobile) {
                this.director = new ig.Director(this,[LevelOpening, LevelStart, LevelBattle, LevelResult]);
            } else {
                this.director = new ig.Director(this,[LevelOpening, LevelStart, LevelBattle, LevelResult]);
            }
            if (_SETTINGS['Branding']['Splash']['Enabled']) {
                try {
                    this.branding = new ig.BrandingSplash();
                } catch (err) {
                    console.log(err);
                    console.log('Loading original levels ...');
                    this.director.loadLevel(this.director.currentLevel);
                }
            } else {
                this.director.loadLevel(this.director.currentLevel);
            }
            this.spawnEntity(EntityPointerSelector, 50, 50);
            if (ig.ua.mobile) {
                ig.soundHandler.playBackgroundMusic();
            }
            if (ig.game.playerStats.bgmMuted)
                ig.soundHandler.stopBackgroundMusic();
            else
                ig.soundHandler.playBackgroundMusic();
            if (ig.game.playerStats.sfxMuted)
                ig.soundHandler._muteSounds();
            else
                ig.soundHandler._unMuteSounds();
        },
        fpsCount: function() {
            if (!this.fpsTimer) {
                this.fpsTimer = new ig.Timer(1);
            }
            if (this.fpsTimer && this.fpsTimer.delta() < 0) {
                if (this.fpsCounter != null) {
                    this.fpsCounter++;
                } else {
                    this.fpsCounter = 0;
                }
            } else {
                ig.game.fps = this.fpsCounter;
                this.fpsCounter = 0;
                this.fpsTimer.reset();
            }
        },
        endGame: function() {
                console.log('End game');
                ig.soundHandler.stopBackgroundMusic();
                if (ig.ua.mobile) {
                    if (_SETTINGS['Ad']['Mobile']['End']['Enabled'])
                        MobileAdInGameEnd.Initialize();
                }
        },
        setupControls: function() {
        	//TODO add myo to controls
                ig.input.unbindAll();
                ig.input.initMouse();
                ig.input.bind(ig.KEY.MOUSE1, 'click');
                ig.input.bind(ig.KEY.A, 'left');
                ig.input.bind(ig.KEY.S, 'block');
            ig.input.bind(ig.KEY.D, 'right');
            ig.input.bind(ig.KEY.W, 'block');
            ig.input.bind(ig.KEY.LEFT_ARROW, 'left');
            ig.input.bind(ig.KEY.DOWN_ARROW, 'block');
            ig.input.bind(ig.KEY.RIGHT_ARROW, 'right');
            ig.input.bind(ig.KEY.UP_ARROW, 'block');
        },
        setupURLParameters: function() {
            this.setupURLParameters = new ig.UrlParameters();
        },
        pressPlay: function() {
            this.hideOverlay(['play']);
            this.startGame();
            if (ig.ua.mobile) {
                if (_SETTINGS['Ad']['Mobile']['Footer']['Enabled'])
                    MobileAdInGameFooter.Initialize();
            }
            if (ig.ua.mobile) {
                if (_SETTINGS['Ad']['Mobile']['Header']['Enabled'])
                    MobileAdInGameHeader.Initialize();
            }
        },
        pauseGame: function() {
                ig.system.stopRunLoop.call(ig.system);
                console.log('Game Paused');
        },
        resumeGame: function() {
            ig.system.startRunLoop.call(ig.system);
            console.log('Game Resumed');
        },
        showOverlay: function(divList) {
            for (i = 0; i < divList.length; i++) {
                if ($('#' + divList[i]))
                    $('#' + divList[i]).show();
                if (document.getElementById(divList[i]))
                    document.getElementById(divList[i]).style.visibility = "visible";
            }
        },
        hideOverlay: function(divList) {
            for (i = 0; i < divList.length; i++) {
                if ($('#' + divList[i]))
                    $('#' + divList[i]).hide();
                if (document.getElementById(divList[i]))
                    document.getElementById(divList[i]).style.visibility = "hidden";
            }
        },
        update: function() {
            if (this.paused) {
                for (var i = 0; i < this.entities.length; i++) {
                    if (this.entities[i].ignorePause) {
                        this.entities[i].update();
                    }
                }
            } else {
                this.parent();
                if (ig.ua.mobile && ig.soundHandler) {
                    ig.soundHandler.forceLoopBGM();
                }
            }
        },
        draw: function() {
            this.parent();
        },
        drawFPS: function() {
            if (ig.debug) {
                ig.system.context.font = "36px Arial";
                ig.system.context.fillStyle = '#0000FF';
                ig.system.context.textAlign = "left";
                ig.system.context.fillText('FPS: ' + Math.round(1000 / ig.debug.debugTickAvg).limit(0, 60), 18, 0.45 * ig.system.height);
            }
        },
        drawDebug: function() {
            if (!ig.global.wm) {
                this.debugEnable();
                if (this.viewDebug) {
                    ig.system.context.fillStyle = '#000000';
                    ig.system.context.globalAlpha = 0.35;
                    ig.system.context.fillRect(0, 0, ig.system.width / 4, ig.system.height);
                    ig.system.context.globalAlpha = 1;
                    if (this.debug && this.debug.length > 0) {
                        for (i = 0; i < this.debug.length; i++) {
                            ig.system.context.font = "10px Arial";
                            ig.system.context.fillStyle = '#ffffff';
                            ig.system.context.fillText(this.debugLine - this.debug.length + i + ": " + this.debug[i], 10, 50 + 10 * i);
                        }
                    }
                }
            }
        },
        debugCL: function(consoleLog) {
            if (!this.debug) {
                this.debug = [];
                this.debugLine = 1;
                this.debug.push(consoleLog);
            } else {
                if (this.debug.length < 50) {
                    this.debug.push(consoleLog);
                } else {
                    this.debug.splice(0, 1);
                    this.debug.push(consoleLog);
                }
                this.debugLine++;
            }
            console.log(consoleLog);
        },
        debugEnable: function() {
            if (ig.input.pressed('click')) {
                this.debugEnableTimer = new ig.Timer(2);
            }
            if (this.debugEnableTimer && this.debugEnableTimer.delta() < 0) {
                if (ig.input.released('click')) {
                    this.debugEnableTimer = null;
                }
            } else if (this.debugEnableTimer && this.debugEnableTimer.delta() > 0) {
                this.debugEnableTimer = null;
                if (this.viewDebug) {
                    this.viewDebug = false;
                } else {
                    this.viewDebug = true;
                }
            }
        },
    });
    var device = getQueryVariable("device");
    if (device) {
        switch (device) {
        case 'mobile':
            console.log('serving mobile version ...');
            ig.ua.mobile = true;
            break;
        case 'desktop':
            console.log('serving desktop version ...');
            ig.ua.mobile = false;
            break;
        default:
            console.log('serving universal version ...');
            break;
        }
    } else {
        console.log('serving universal version ...');
    }
    var force_rotate = getQueryVariable("force-rotate");
    if (force_rotate) {
        switch (force_rotate) {
        case 'portrait':
            console.log('force rotate to portrait');
            window.orientation = 0;
            break;
        case 'landscape':
            console.log('force rotate to horizontal');
            window.orientation = 90;
            break;
        default:
            alert('wrong command/type in param force-rotate. Defaulting value to portrait');
            window.orientation = 0;
        }
    }
    if (ig.ua.mobile) {
        ig.Sound.enabled = false;
        ig.main('#canvas', MyGame, 60, mobileWidth, mobileHeight, 1, ig.SplashLoader);
    } else {
        ig.main('#canvas', MyGame, 60, desktopWidth, desktopHeight, 1, ig.SplashLoader);
    }
    if (ig.ua.mobile) {
        orientationHandler();
    }
    sizeHandler();
    fixSamsungHandler();
    Array});
